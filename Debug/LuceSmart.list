
LuceSmart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003424  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035dc  080035dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035dc  080035dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035dc  080035dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035dc  080035dc  000135dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000410  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000041c  2000041c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001213e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002351  00000000  00000000  0003217a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  000344d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f88  00000000  00000000  00035560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002280  00000000  00000000  000364e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b63  00000000  00000000  00038768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4c6a  00000000  00000000  0004c2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00100f35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004714  00000000  00000000  00100f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003594 	.word	0x08003594

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003594 	.word	0x08003594

080001c8 <delay_us>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <delay_us+0x30>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2200      	movs	r2, #0
 80001d8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2)<=us);
 80001da:	bf00      	nop
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <delay_us+0x30>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001e2:	88fb      	ldrh	r3, [r7, #6]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d9f9      	bls.n	80001dc <delay_us+0x14>
}
 80001e8:	bf00      	nop
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	200000d8 	.word	0x200000d8

080001fc <receive_data>:
uint32_t data=0;
uint8_t count=0;
uint32_t receive_data (void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0

	  uint32_t code=0;
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]

		  /* The START Sequence begin here
	   * there will be a pulse of 9ms LOW and
	   * than 4.5 ms space (HIGH)
	   */
	  while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)));  // wait for the pin to go high.. 9ms LOW
 8000206:	bf00      	nop
 8000208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800020c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000210:	f000 ff46 	bl	80010a0 <HAL_GPIO_ReadPin>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d0f6      	beq.n	8000208 <receive_data+0xc>

	  while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)));  // wait for the pin to go low.. 4.5ms HIGH
 800021a:	bf00      	nop
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000224:	f000 ff3c 	bl	80010a0 <HAL_GPIO_ReadPin>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d1f6      	bne.n	800021c <receive_data+0x20>
	   * We are only going to check the SPACE after 562.5us pulse
	   * if the space is 562.5us, the bit indicates '0'
	   * if the space is around 1.6ms, the bit is '1'
	   */

	  for (int i=0; i<32; i++)
 800022e:	2300      	movs	r3, #0
 8000230:	603b      	str	r3, [r7, #0]
 8000232:	e042      	b.n	80002ba <receive_data+0xbe>
	  {
		  count=0;
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <receive_data+0xd0>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]

		  while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10))); // wait for pin to go high.. this is 562.5us LOW
 800023a:	bf00      	nop
 800023c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000244:	f000 ff2c 	bl	80010a0 <HAL_GPIO_ReadPin>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d0f6      	beq.n	800023c <receive_data+0x40>

		  while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)))
 800024e:	e012      	b.n	8000276 <receive_data+0x7a>
		  {
			  count++;
 8000250:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <receive_data+0xd0>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	3301      	adds	r3, #1
 8000256:	b2da      	uxtb	r2, r3
 8000258:	4b1c      	ldr	r3, [pc, #112]	; (80002cc <receive_data+0xd0>)
 800025a:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 800025c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000260:	481b      	ldr	r0, [pc, #108]	; (80002d0 <receive_data+0xd4>)
 8000262:	f000 ff4d 	bl	8001100 <HAL_GPIO_TogglePin>
			  delay_us(100);
 8000266:	2064      	movs	r0, #100	; 0x64
 8000268:	f7ff ffae 	bl	80001c8 <delay_us>
			  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 800026c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <receive_data+0xd4>)
 8000272:	f000 ff45 	bl	8001100 <HAL_GPIO_TogglePin>
		  while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)))
 8000276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f000 ff0f 	bl	80010a0 <HAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1e3      	bne.n	8000250 <receive_data+0x54>
		  }

		  if (count > 12) // if the space is more than 1.2 ms
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <receive_data+0xd0>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b0c      	cmp	r3, #12
 800028e:	d908      	bls.n	80002a2 <receive_data+0xa6>
		  {
			  code |= (1UL << (31-i));   // write 1
 8000290:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	fa22 f303 	lsr.w	r3, r2, r3
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	4313      	orrs	r3, r2
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	e008      	b.n	80002b4 <receive_data+0xb8>
		  }

		  else code &= ~(1UL << (31-i));  // write 0
 80002a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	fa22 f303 	lsr.w	r3, r2, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	4013      	ands	r3, r2
 80002b2:	607b      	str	r3, [r7, #4]
	  for (int i=0; i<32; i++)
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	3301      	adds	r3, #1
 80002b8:	603b      	str	r3, [r7, #0]
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	2b1f      	cmp	r3, #31
 80002be:	ddb9      	ble.n	8000234 <receive_data+0x38>
	  }

		return code;
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000414 	.word	0x20000414
 80002d0:	48001000 	.word	0x48001000

080002d4 <HAL_GPIO_EXTI_Callback>:

SmartLamp S;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
	if(GPIO_Pin == GPIO_PIN_10){
 80002de:	88fb      	ldrh	r3, [r7, #6]
 80002e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002e4:	d11b      	bne.n	800031e <HAL_GPIO_EXTI_Callback+0x4a>
		while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)));  // wait for the pin to go low.. 4.5ms HIGH
 80002e6:	bf00      	nop
 80002e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	f000 fed6 	bl	80010a0 <HAL_GPIO_ReadPin>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d1f6      	bne.n	80002e8 <HAL_GPIO_EXTI_Callback+0x14>
		data = receive_data ();
 80002fa:	f7ff ff7f 	bl	80001fc <receive_data>
 80002fe:	4603      	mov	r3, r0
 8000300:	4a09      	ldr	r2, [pc, #36]	; (8000328 <HAL_GPIO_EXTI_Callback+0x54>)
 8000302:	6013      	str	r3, [r2, #0]
		if(data==0xFFA25D) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <HAL_GPIO_EXTI_Callback+0x54>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a08      	ldr	r2, [pc, #32]	; (800032c <HAL_GPIO_EXTI_Callback+0x58>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d103      	bne.n	8000316 <HAL_GPIO_EXTI_Callback+0x42>
 800030e:	2101      	movs	r1, #1
 8000310:	4807      	ldr	r0, [pc, #28]	; (8000330 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000312:	f000 fef5 	bl	8001100 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8000316:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800031a:	f000 fc11 	bl	8000b40 <HAL_Delay>
	}
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000410 	.word	0x20000410
 800032c:	00ffa25d 	.word	0x00ffa25d
 8000330:	48000400 	.word	0x48000400

08000334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000338:	f000 fb9c 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033c:	f000 f820 	bl	8000380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000340:	f000 f96e 	bl	8000620 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000344:	f000 f87e 	bl	8000444 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000348:	f000 f8bc 	bl	80004c4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800034c:	f000 f946 	bl	80005dc <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000350:	f000 f8f6 	bl	8000540 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim2);
 8000354:	4808      	ldr	r0, [pc, #32]	; (8000378 <main+0x44>)
 8000356:	f002 fd88 	bl	8002e6a <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim2);
 800035a:	4807      	ldr	r0, [pc, #28]	; (8000378 <main+0x44>)
 800035c:	f002 fddc 	bl	8002f18 <HAL_TIM_Base_Start>
  delay_us(600);
 8000360:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000364:	f7ff ff30 	bl	80001c8 <delay_us>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036e:	4803      	ldr	r0, [pc, #12]	; (800037c <main+0x48>)
 8000370:	f000 feae 	bl	80010d0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000374:	e7fe      	b.n	8000374 <main+0x40>
 8000376:	bf00      	nop
 8000378:	200000d8 	.word	0x200000d8
 800037c:	48001000 	.word	0x48001000

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b09e      	sub	sp, #120	; 0x78
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800038a:	2228      	movs	r2, #40	; 0x28
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f003 f8f8 	bl	8003584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000394:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a4:	463b      	mov	r3, r7
 80003a6:	223c      	movs	r2, #60	; 0x3c
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 f8ea 	bl	8003584 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003b0:	2303      	movs	r3, #3
 80003b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003be:	2301      	movs	r3, #1
 80003c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c2:	2310      	movs	r3, #16
 80003c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c6:	2302      	movs	r3, #2
 80003c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f8c6 	bl	800156c <HAL_RCC_OscConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003e6:	f000 f9c5 	bl	8000774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	230f      	movs	r3, #15
 80003ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ee:	2302      	movs	r3, #2
 80003f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000400:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000404:	2101      	movs	r1, #1
 8000406:	4618      	mov	r0, r3
 8000408:	f002 f8ee 	bl	80025e8 <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000412:	f000 f9af 	bl	8000774 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <SystemClock_Config+0xc0>)
 8000418:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800041e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000422:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000424:	463b      	mov	r3, r7
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fac4 	bl	80029b4 <HAL_RCCEx_PeriphCLKConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000432:	f000 f99f 	bl	8000774 <Error_Handler>
  }
}
 8000436:	bf00      	nop
 8000438:	3778      	adds	r7, #120	; 0x78
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	00020020 	.word	0x00020020

08000444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_I2C1_Init+0x74>)
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <MX_I2C1_Init+0x78>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800044e:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000450:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <MX_I2C1_Init+0x7c>)
 8000452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000454:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_I2C1_Init+0x74>)
 800045c:	2201      	movs	r2, #1
 800045e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_I2C1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800047e:	480e      	ldr	r0, [pc, #56]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000480:	f000 fe70 	bl	8001164 <HAL_I2C_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800048a:	f000 f973 	bl	8000774 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800048e:	2100      	movs	r1, #0
 8000490:	4809      	ldr	r0, [pc, #36]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000492:	f000 fef6 	bl	8001282 <HAL_I2CEx_ConfigAnalogFilter>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800049c:	f000 f96a 	bl	8000774 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004a0:	2100      	movs	r1, #0
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_I2C1_Init+0x74>)
 80004a4:	f000 ff38 	bl	8001318 <HAL_I2CEx_ConfigDigitalFilter>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ae:	f000 f961 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000028 	.word	0x20000028
 80004bc:	40005400 	.word	0x40005400
 80004c0:	2000090e 	.word	0x2000090e

080004c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_SPI1_Init+0x74>)
 80004ca:	4a1c      	ldr	r2, [pc, #112]	; (800053c <MX_SPI1_Init+0x78>)
 80004cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_SPI1_Init+0x74>)
 80004d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_SPI1_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_SPI1_Init+0x74>)
 80004de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_SPI1_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_SPI1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_SPI1_Init+0x74>)
 80004f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_SPI1_Init+0x74>)
 80004fa:	2208      	movs	r2, #8
 80004fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_SPI1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_SPI1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_SPI1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_SPI1_Init+0x74>)
 8000512:	2207      	movs	r2, #7
 8000514:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_SPI1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_SPI1_Init+0x74>)
 800051e:	2208      	movs	r2, #8
 8000520:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_SPI1_Init+0x74>)
 8000524:	f002 fbf6 	bl	8002d14 <HAL_SPI_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f000 f921 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000074 	.word	0x20000074
 800053c:	40013000 	.word	0x40013000

08000540 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800055e:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000560:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000564:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000568:	222f      	movs	r2, #47	; 0x2f
 800056a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_TIM2_Init+0x98>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000574:	f04f 32ff 	mov.w	r2, #4294967295
 8000578:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_TIM2_Init+0x98>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000586:	4814      	ldr	r0, [pc, #80]	; (80005d8 <MX_TIM2_Init+0x98>)
 8000588:	f002 fc6f 	bl	8002e6a <HAL_TIM_Base_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000592:	f000 f8ef 	bl	8000774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	4619      	mov	r1, r3
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005a4:	f002 fd1a 	bl	8002fdc <HAL_TIM_ConfigClockSource>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005ae:	f000 f8e1 	bl	8000774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_TIM2_Init+0x98>)
 80005c0:	f002 ff00 	bl	80033c4 <HAL_TIMEx_MasterConfigSynchronization>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005ca:	f000 f8d3 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000d8 	.word	0x200000d8

080005dc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <MX_USB_PCD_Init+0x40>)
 80005e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005e8:	2208      	movs	r2, #8
 80005ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 8000606:	f000 fed3 	bl	80013b0 <HAL_PCD_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 f8b0 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000124 	.word	0x20000124
 800061c:	40005c00 	.word	0x40005c00

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000636:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <MX_GPIO_Init+0x148>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a4b      	ldr	r2, [pc, #300]	; (8000768 <MX_GPIO_Init+0x148>)
 800063c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b49      	ldr	r3, [pc, #292]	; (8000768 <MX_GPIO_Init+0x148>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b46      	ldr	r3, [pc, #280]	; (8000768 <MX_GPIO_Init+0x148>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a45      	ldr	r2, [pc, #276]	; (8000768 <MX_GPIO_Init+0x148>)
 8000654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b43      	ldr	r3, [pc, #268]	; (8000768 <MX_GPIO_Init+0x148>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000666:	4b40      	ldr	r3, [pc, #256]	; (8000768 <MX_GPIO_Init+0x148>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a3f      	ldr	r2, [pc, #252]	; (8000768 <MX_GPIO_Init+0x148>)
 800066c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <MX_GPIO_Init+0x148>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b3a      	ldr	r3, [pc, #232]	; (8000768 <MX_GPIO_Init+0x148>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a39      	ldr	r2, [pc, #228]	; (8000768 <MX_GPIO_Init+0x148>)
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b37      	ldr	r3, [pc, #220]	; (8000768 <MX_GPIO_Init+0x148>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b34      	ldr	r3, [pc, #208]	; (8000768 <MX_GPIO_Init+0x148>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a33      	ldr	r2, [pc, #204]	; (8000768 <MX_GPIO_Init+0x148>)
 800069c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b31      	ldr	r3, [pc, #196]	; (8000768 <MX_GPIO_Init+0x148>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006ae:	2200      	movs	r2, #0
 80006b0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80006b4:	482d      	ldr	r0, [pc, #180]	; (800076c <MX_GPIO_Init+0x14c>)
 80006b6:	f000 fd0b 	bl	80010d0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2101      	movs	r1, #1
 80006be:	482c      	ldr	r0, [pc, #176]	; (8000770 <MX_GPIO_Init+0x150>)
 80006c0:	f000 fd06 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80006c4:	2337      	movs	r3, #55	; 0x37
 80006c6:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006c8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	4824      	ldr	r0, [pc, #144]	; (800076c <MX_GPIO_Init+0x14c>)
 80006da:	f000 fb67 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006de:	f64f 7308 	movw	r3, #65288	; 0xff08
 80006e2:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	481d      	ldr	r0, [pc, #116]	; (800076c <MX_GPIO_Init+0x14c>)
 80006f8:	f000 fb58 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006fc:	2301      	movs	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f000 fb4b 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000716:	2301      	movs	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4810      	ldr	r0, [pc, #64]	; (8000770 <MX_GPIO_Init+0x150>)
 800072e:	f000 fb3d 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000738:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f000 fb2e 	bl	8000dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2101      	movs	r1, #1
 8000754:	2028      	movs	r0, #40	; 0x28
 8000756:	f000 faf2 	bl	8000d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800075a:	2028      	movs	r0, #40	; 0x28
 800075c:	f000 fb0b 	bl	8000d76 <HAL_NVIC_EnableIRQ>

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	48001000 	.word	0x48001000
 8000770:	48000400 	.word	0x48000400

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x44>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_MspInit+0x44>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6193      	str	r3, [r2, #24]
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x44>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_MspInit+0x44>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x44>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x44>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80007b6:	2006      	movs	r0, #6
 80007b8:	f000 fab6 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_I2C_MspInit+0x7c>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d127      	bne.n	800083a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <HAL_I2C_MspInit+0x80>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <HAL_I2C_MspInit+0x80>)
 80007f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <HAL_I2C_MspInit+0x80>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000802:	23c0      	movs	r3, #192	; 0xc0
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000806:	2312      	movs	r3, #18
 8000808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080a:	2301      	movs	r3, #1
 800080c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000812:	2304      	movs	r3, #4
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <HAL_I2C_MspInit+0x84>)
 800081e:	f000 fac5 	bl	8000dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_I2C_MspInit+0x80>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <HAL_I2C_MspInit+0x80>)
 8000828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_I2C_MspInit+0x80>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40005400 	.word	0x40005400
 8000848:	40021000 	.word	0x40021000
 800084c:	48000400 	.word	0x48000400

08000850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_SPI_MspInit+0x7c>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d128      	bne.n	80008c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_SPI_MspInit+0x80>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <HAL_SPI_MspInit+0x80>)
 8000878:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_SPI_MspInit+0x80>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_SPI_MspInit+0x80>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <HAL_SPI_MspInit+0x80>)
 8000890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_SPI_MspInit+0x80>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80008a2:	23e0      	movs	r3, #224	; 0xe0
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b2:	2305      	movs	r3, #5
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f000 fa74 	bl	8000dac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40013000 	.word	0x40013000
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e4:	d10b      	bne.n	80008fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_TIM_Base_MspInit+0x38>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_TIM_Base_MspInit+0x38>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	61d3      	str	r3, [r2, #28]
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_TIM_Base_MspInit+0x38>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a18      	ldr	r2, [pc, #96]	; (8000990 <HAL_PCD_MspInit+0x80>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d129      	bne.n	8000986 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_PCD_MspInit+0x84>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <HAL_PCD_MspInit+0x84>)
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_PCD_MspInit+0x84>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800094a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800095c:	230e      	movs	r3, #14
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f000 fa1f 	bl	8000dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_PCD_MspInit+0x84>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_PCD_MspInit+0x84>)
 8000974:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_PCD_MspInit+0x84>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40005c00 	.word	0x40005c00
 8000994:	40021000 	.word	0x40021000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f88c 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80009f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009f4:	f000 fb9e 	bl	8001134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a58 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490e      	ldr	r1, [pc, #56]	; (8000a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0b      	ldr	r4, [pc, #44]	; (8000a6c <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a4a:	f7ff ffd7 	bl	80009fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f002 fd75 	bl	800353c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a52:	f7ff fc6f 	bl	8000334 <main>

08000a56 <LoopForever>:

LoopForever:
    b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a58:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a64:	080035e4 	.word	0x080035e4
  ldr r2, =_sbss
 8000a68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a6c:	2000041c 	.word	0x2000041c

08000a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_2_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_Init+0x28>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_Init+0x28>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 f94f 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f808 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff fe76 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x54>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x58>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f967 	bl	8000d92 <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00e      	b.n	8000aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d80a      	bhi.n	8000aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f000 f92f 	bl	8000d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_InitTick+0x5c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000418 	.word	0x20000418

08000b28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000418 	.word	0x20000418

08000b40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff ffee 	bl	8000b28 <HAL_GetTick>
 8000b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b58:	d005      	beq.n	8000b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_Delay+0x44>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4413      	add	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b66:	bf00      	nop
 8000b68:	f7ff ffde 	bl	8000b28 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8f7      	bhi.n	8000b68 <HAL_Delay+0x28>
  {
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff29 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff3e 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff8e 	bl	8000c7c <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5d 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff31 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dba:	e154      	b.n	8001066 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 8146 	beq.w	8001060 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d005      	beq.n	8000dec <HAL_GPIO_Init+0x40>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d130      	bne.n	8000e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e22:	2201      	movs	r2, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	f003 0201 	and.w	r2, r3, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d017      	beq.n	8000e8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d123      	bne.n	8000ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	08da      	lsrs	r2, r3, #3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	220f      	movs	r2, #15
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	6939      	ldr	r1, [r7, #16]
 8000eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0203 	and.w	r2, r3, #3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 80a0 	beq.w	8001060 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f20:	4b58      	ldr	r3, [pc, #352]	; (8001084 <HAL_GPIO_Init+0x2d8>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a57      	ldr	r2, [pc, #348]	; (8001084 <HAL_GPIO_Init+0x2d8>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b55      	ldr	r3, [pc, #340]	; (8001084 <HAL_GPIO_Init+0x2d8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f38:	4a53      	ldr	r2, [pc, #332]	; (8001088 <HAL_GPIO_Init+0x2dc>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f62:	d019      	beq.n	8000f98 <HAL_GPIO_Init+0x1ec>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a49      	ldr	r2, [pc, #292]	; (800108c <HAL_GPIO_Init+0x2e0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d013      	beq.n	8000f94 <HAL_GPIO_Init+0x1e8>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a48      	ldr	r2, [pc, #288]	; (8001090 <HAL_GPIO_Init+0x2e4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d00d      	beq.n	8000f90 <HAL_GPIO_Init+0x1e4>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a47      	ldr	r2, [pc, #284]	; (8001094 <HAL_GPIO_Init+0x2e8>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d007      	beq.n	8000f8c <HAL_GPIO_Init+0x1e0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a46      	ldr	r2, [pc, #280]	; (8001098 <HAL_GPIO_Init+0x2ec>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d101      	bne.n	8000f88 <HAL_GPIO_Init+0x1dc>
 8000f84:	2304      	movs	r3, #4
 8000f86:	e008      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f88:	2305      	movs	r3, #5
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e004      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000faa:	4937      	ldr	r1, [pc, #220]	; (8001088 <HAL_GPIO_Init+0x2dc>)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_GPIO_Init+0x2f0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fdc:	4a2f      	ldr	r2, [pc, #188]	; (800109c <HAL_GPIO_Init+0x2f0>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_GPIO_Init+0x2f0>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001006:	4a25      	ldr	r2, [pc, #148]	; (800109c <HAL_GPIO_Init+0x2f0>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_GPIO_Init+0x2f0>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001030:	4a1a      	ldr	r2, [pc, #104]	; (800109c <HAL_GPIO_Init+0x2f0>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_GPIO_Init+0x2f0>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_GPIO_Init+0x2f0>)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	f47f aea3 	bne.w	8000dbc <HAL_GPIO_Init+0x10>
  }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	48000400 	.word	0x48000400
 8001090:	48000800 	.word	0x48000800
 8001094:	48000c00 	.word	0x48000c00
 8001098:	48001000 	.word	0x48001000
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e001      	b.n	80010c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
 80010dc:	4613      	mov	r3, r2
 80010de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	041a      	lsls	r2, r3, #16
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43d9      	mvns	r1, r3
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	400b      	ands	r3, r1
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	4013      	ands	r3, r2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f8be 	bl	80002d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e081      	b.n	800127a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fb1c 	bl	80007c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2224      	movs	r2, #36	; 0x24
 8001194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	e006      	b.n	80011ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d104      	bne.n	80011fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800120c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001210:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001220:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69d9      	ldr	r1, [r3, #28]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1a      	ldr	r2, [r3, #32]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2220      	movs	r2, #32
 8001266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b20      	cmp	r3, #32
 8001296:	d138      	bne.n	800130a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e032      	b.n	800130c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2224      	movs	r2, #36	; 0x24
 80012b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0201 	bic.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6819      	ldr	r1, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0201 	orr.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2220      	movs	r2, #32
 80012fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800130a:	2302      	movs	r3, #2
  }
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b20      	cmp	r3, #32
 800132c:	d139      	bne.n	80013a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001338:	2302      	movs	r3, #2
 800133a:	e033      	b.n	80013a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2224      	movs	r2, #36	; 0x24
 8001348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800136a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2220      	movs	r2, #32
 8001392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80013a2:	2302      	movs	r3, #2
  }
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b2:	b08b      	sub	sp, #44	; 0x2c
 80013b4:	af06      	add	r7, sp, #24
 80013b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e0d0      	b.n	8001564 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d106      	bne.n	80013dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fa9a 	bl	8000910 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2203      	movs	r2, #3
 80013e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f86b 	bl	80034c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	e04c      	b.n	800148e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	3301      	adds	r3, #1
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	b298      	uxth	r0, r3
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	3336      	adds	r3, #54	; 0x36
 8001432:	4602      	mov	r2, r0
 8001434:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	3303      	adds	r3, #3
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	3338      	adds	r3, #56	; 0x38
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	333c      	adds	r3, #60	; 0x3c
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	3340      	adds	r3, #64	; 0x40
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3301      	adds	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	d3ad      	bcc.n	80013f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e044      	b.n	8001528 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	440b      	add	r3, r1
 80014ac:	f203 1369 	addw	r3, r3, #361	; 0x169
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	3301      	adds	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3b5      	bcc.n	800149e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	687e      	ldr	r6, [r7, #4]
 800153a:	466d      	mov	r5, sp
 800153c:	f106 0410 	add.w	r4, r6, #16
 8001540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	602b      	str	r3, [r5, #0]
 8001548:	1d33      	adds	r3, r6, #4
 800154a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f001 ffd4 	bl	80034fa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800156c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001572:	af00      	add	r7, sp, #0
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800157c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800157e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	f001 b823 	b.w	80025d8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 817d 	beq.w	80018a2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015a8:	4bbc      	ldr	r3, [pc, #752]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d00c      	beq.n	80015ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b4:	4bb9      	ldr	r3, [pc, #740]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d15c      	bne.n	800167a <HAL_RCC_OscConfig+0x10e>
 80015c0:	4bb6      	ldr	r3, [pc, #728]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d155      	bne.n	800167a <HAL_RCC_OscConfig+0x10e>
 80015ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e6:	fab3 f383 	clz	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	095b      	lsrs	r3, r3, #5
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d102      	bne.n	8001600 <HAL_RCC_OscConfig+0x94>
 80015fa:	4ba8      	ldr	r3, [pc, #672]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	e015      	b.n	800162c <HAL_RCC_OscConfig+0xc0>
 8001600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001604:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001618:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800161c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001628:	4b9c      	ldr	r3, [pc, #624]	; (800189c <HAL_RCC_OscConfig+0x330>)
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001630:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001634:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001638:	fa92 f2a2 	rbit	r2, r2
 800163c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001640:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001644:	fab2 f282 	clz	r2, r2
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	f042 0220 	orr.w	r2, r2, #32
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	f002 021f 	and.w	r2, r2, #31
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f202 	lsl.w	r2, r1, r2
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 811f 	beq.w	80018a0 <HAL_RCC_OscConfig+0x334>
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 8116 	bne.w	80018a0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	f000 bfaf 	b.w	80025d8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x12e>
 800168c:	4b83      	ldr	r3, [pc, #524]	; (800189c <HAL_RCC_OscConfig+0x330>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a82      	ldr	r2, [pc, #520]	; (800189c <HAL_RCC_OscConfig+0x330>)
 8001692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e036      	b.n	8001708 <HAL_RCC_OscConfig+0x19c>
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x158>
 80016aa:	4b7c      	ldr	r3, [pc, #496]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7b      	ldr	r2, [pc, #492]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80016b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b79      	ldr	r3, [pc, #484]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a78      	ldr	r2, [pc, #480]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80016bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e021      	b.n	8001708 <HAL_RCC_OscConfig+0x19c>
 80016c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x184>
 80016d6:	4b71      	ldr	r3, [pc, #452]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a70      	ldr	r2, [pc, #448]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b6e      	ldr	r3, [pc, #440]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a6d      	ldr	r2, [pc, #436]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0x19c>
 80016f0:	4b6a      	ldr	r3, [pc, #424]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a69      	ldr	r2, [pc, #420]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80016f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b67      	ldr	r3, [pc, #412]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a66      	ldr	r2, [pc, #408]	; (800189c <HAL_RCC_OscConfig+0x330>)
 8001702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001708:	4b64      	ldr	r3, [pc, #400]	; (800189c <HAL_RCC_OscConfig+0x330>)
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	f023 020f 	bic.w	r2, r3, #15
 8001710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001714:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	495f      	ldr	r1, [pc, #380]	; (800189c <HAL_RCC_OscConfig+0x330>)
 800171e:	4313      	orrs	r3, r2
 8001720:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d059      	beq.n	80017e6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff f9f9 	bl	8000b28 <HAL_GetTick>
 8001736:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff f9f4 	bl	8000b28 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b64      	cmp	r3, #100	; 0x64
 800174a:	d902      	bls.n	8001752 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	f000 bf43 	b.w	80025d8 <HAL_RCC_OscConfig+0x106c>
 8001752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001756:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800175e:	fa93 f3a3 	rbit	r3, r3
 8001762:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001766:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	095b      	lsrs	r3, r3, #5
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d102      	bne.n	8001784 <HAL_RCC_OscConfig+0x218>
 800177e:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_RCC_OscConfig+0x330>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	e015      	b.n	80017b0 <HAL_RCC_OscConfig+0x244>
 8001784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001788:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80017ac:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017b4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80017b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80017bc:	fa92 f2a2 	rbit	r2, r2
 80017c0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80017c4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80017c8:	fab2 f282 	clz	r2, r2
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	f042 0220 	orr.w	r2, r2, #32
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	f002 021f 	and.w	r2, r2, #31
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ab      	beq.n	800173c <HAL_RCC_OscConfig+0x1d0>
 80017e4:	e05d      	b.n	80018a2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff f99f 	bl	8000b28 <HAL_GetTick>
 80017ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff f99a 	bl	8000b28 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b64      	cmp	r3, #100	; 0x64
 80017fe:	d902      	bls.n	8001806 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	f000 bee9 	b.w	80025d8 <HAL_RCC_OscConfig+0x106c>
 8001806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800181a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d102      	bne.n	8001838 <HAL_RCC_OscConfig+0x2cc>
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_RCC_OscConfig+0x330>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	e015      	b.n	8001864 <HAL_RCC_OscConfig+0x2f8>
 8001838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800184c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001850:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001854:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_RCC_OscConfig+0x330>)
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001868:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800186c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001870:	fa92 f2a2 	rbit	r2, r2
 8001874:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001878:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800187c:	fab2 f282 	clz	r2, r2
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	f042 0220 	orr.w	r2, r2, #32
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	f002 021f 	and.w	r2, r2, #31
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f202 	lsl.w	r2, r1, r2
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1ab      	bne.n	80017f0 <HAL_RCC_OscConfig+0x284>
 8001898:	e003      	b.n	80018a2 <HAL_RCC_OscConfig+0x336>
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 817d 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018b8:	4ba6      	ldr	r3, [pc, #664]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00b      	beq.n	80018dc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018c4:	4ba3      	ldr	r3, [pc, #652]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d172      	bne.n	80019b6 <HAL_RCC_OscConfig+0x44a>
 80018d0:	4ba0      	ldr	r3, [pc, #640]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d16c      	bne.n	80019b6 <HAL_RCC_OscConfig+0x44a>
 80018dc:	2302      	movs	r3, #2
 80018de:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80018e6:	fa93 f3a3 	rbit	r3, r3
 80018ea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80018ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	095b      	lsrs	r3, r3, #5
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b01      	cmp	r3, #1
 8001904:	d102      	bne.n	800190c <HAL_RCC_OscConfig+0x3a0>
 8001906:	4b93      	ldr	r3, [pc, #588]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	e013      	b.n	8001934 <HAL_RCC_OscConfig+0x3c8>
 800190c:	2302      	movs	r3, #2
 800190e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001924:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001930:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	2202      	movs	r2, #2
 8001936:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800193a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800193e:	fa92 f2a2 	rbit	r2, r2
 8001942:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001946:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800194a:	fab2 f282 	clz	r2, r2
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	f042 0220 	orr.w	r2, r2, #32
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	f002 021f 	and.w	r2, r2, #31
 800195a:	2101      	movs	r1, #1
 800195c:	fa01 f202 	lsl.w	r2, r1, r2
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00a      	beq.n	800197c <HAL_RCC_OscConfig+0x410>
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d002      	beq.n	800197c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	f000 be2e 	b.w	80025d8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b75      	ldr	r3, [pc, #468]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	21f8      	movs	r1, #248	; 0xf8
 8001992:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800199a:	fa91 f1a1 	rbit	r1, r1
 800199e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80019a2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019a6:	fab1 f181 	clz	r1, r1
 80019aa:	b2c9      	uxtb	r1, r1
 80019ac:	408b      	lsls	r3, r1
 80019ae:	4969      	ldr	r1, [pc, #420]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b4:	e0fd      	b.n	8001bb2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8088 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x56c>
 80019c8:	2301      	movs	r3, #1
 80019ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80019da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	461a      	mov	r2, r3
 80019f0:	2301      	movs	r3, #1
 80019f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff f898 	bl	8000b28 <HAL_GetTick>
 80019f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fe:	f7ff f893 	bl	8000b28 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d902      	bls.n	8001a14 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	f000 bde2 	b.w	80025d8 <HAL_RCC_OscConfig+0x106c>
 8001a14:	2302      	movs	r3, #2
 8001a16:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4d8>
 8001a3e:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	e013      	b.n	8001a6c <HAL_RCC_OscConfig+0x500>
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a68:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001a72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a76:	fa92 f2a2 	rbit	r2, r2
 8001a7a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001a7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a82:	fab2 f282 	clz	r2, r2
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	f042 0220 	orr.w	r2, r2, #32
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	f002 021f 	and.w	r2, r2, #31
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f202 	lsl.w	r2, r1, r2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0af      	beq.n	80019fe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	21f8      	movs	r1, #248	; 0xf8
 8001ab4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001abc:	fa91 f1a1 	rbit	r1, r1
 8001ac0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ac4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ac8:	fab1 f181 	clz	r1, r1
 8001acc:	b2c9      	uxtb	r1, r1
 8001ace:	408b      	lsls	r3, r1
 8001ad0:	4920      	ldr	r1, [pc, #128]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
 8001ad6:	e06c      	b.n	8001bb2 <HAL_RCC_OscConfig+0x646>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001aea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	461a      	mov	r2, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff f810 	bl	8000b28 <HAL_GetTick>
 8001b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f80b 	bl	8000b28 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d902      	bls.n	8001b24 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f000 bd5a 	b.w	80025d8 <HAL_RCC_OscConfig+0x106c>
 8001b24:	2302      	movs	r3, #2
 8001b26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d104      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5ec>
 8001b4e:	4b01      	ldr	r3, [pc, #4]	; (8001b54 <HAL_RCC_OscConfig+0x5e8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	e015      	b.n	8001b80 <HAL_RCC_OscConfig+0x614>
 8001b54:	40021000 	.word	0x40021000
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001b7c:	4bc8      	ldr	r3, [pc, #800]	; (8001ea0 <HAL_RCC_OscConfig+0x934>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	2202      	movs	r2, #2
 8001b82:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001b86:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b8a:	fa92 f2a2 	rbit	r2, r2
 8001b8e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001b92:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b96:	fab2 f282 	clz	r2, r2
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	f042 0220 	orr.w	r2, r2, #32
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	f002 021f 	and.w	r2, r2, #31
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ad      	bne.n	8001b0e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8110 	beq.w	8001de8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d079      	beq.n	8001ccc <HAL_RCC_OscConfig+0x760>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4bab      	ldr	r3, [pc, #684]	; (8001ea4 <HAL_RCC_OscConfig+0x938>)
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2301      	movs	r3, #1
 8001c00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7fe ff91 	bl	8000b28 <HAL_GetTick>
 8001c06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7fe ff8c 	bl	8000b28 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d902      	bls.n	8001c22 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	f000 bcdb 	b.w	80025d8 <HAL_RCC_OscConfig+0x106c>
 8001c22:	2302      	movs	r3, #2
 8001c24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c60:	2202      	movs	r2, #2
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	fa93 f2a3 	rbit	r2, r3
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7c:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x934>)
 8001c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c88:	2102      	movs	r1, #2
 8001c8a:	6019      	str	r1, [r3, #0]
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f1a3 	rbit	r1, r3
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ca2:	6019      	str	r1, [r3, #0]
  return result;
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0a0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x6a0>
 8001cca:	e08d      	b.n	8001de8 <HAL_RCC_OscConfig+0x87c>
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cee:	601a      	str	r2, [r3, #0]
  return result;
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cf8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b68      	ldr	r3, [pc, #416]	; (8001ea4 <HAL_RCC_OscConfig+0x938>)
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7fe ff0b 	bl	8000b28 <HAL_GetTick>
 8001d12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d18:	f7fe ff06 	bl	8000b28 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d902      	bls.n	8001d2e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f000 bc55 	b.w	80025d8 <HAL_RCC_OscConfig+0x106c>
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d36:	2202      	movs	r2, #2
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fa93 f2a3 	rbit	r2, r3
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d7e:	2202      	movs	r2, #2
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_OscConfig+0x934>)
 8001d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001da6:	2102      	movs	r1, #2
 8001da8:	6019      	str	r1, [r3, #0]
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	fa93 f1a3 	rbit	r1, r3
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001dc0:	6019      	str	r1, [r3, #0]
  return result;
 8001dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d197      	bne.n	8001d18 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 81a1 	beq.w	8002140 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_RCC_OscConfig+0x934>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d116      	bne.n	8001e3e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_RCC_OscConfig+0x934>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <HAL_RCC_OscConfig+0x934>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	61d3      	str	r3, [r2, #28]
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_RCC_OscConfig+0x934>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e36:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HAL_RCC_OscConfig+0x93c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d11a      	bne.n	8001e80 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_RCC_OscConfig+0x93c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <HAL_RCC_OscConfig+0x93c>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e56:	f7fe fe67 	bl	8000b28 <HAL_GetTick>
 8001e5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	e009      	b.n	8001e74 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e60:	f7fe fe62 	bl	8000b28 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b64      	cmp	r3, #100	; 0x64
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e3b1      	b.n	80025d8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_RCC_OscConfig+0x93c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ef      	beq.n	8001e60 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d10d      	bne.n	8001eac <HAL_RCC_OscConfig+0x940>
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_RCC_OscConfig+0x934>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4a02      	ldr	r2, [pc, #8]	; (8001ea0 <HAL_RCC_OscConfig+0x934>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6213      	str	r3, [r2, #32]
 8001e9c:	e03c      	b.n	8001f18 <HAL_RCC_OscConfig+0x9ac>
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	10908120 	.word	0x10908120
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x96a>
 8001ebc:	4bc1      	ldr	r3, [pc, #772]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4ac0      	ldr	r2, [pc, #768]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	4bbe      	ldr	r3, [pc, #760]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4abd      	ldr	r2, [pc, #756]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001ece:	f023 0304 	bic.w	r3, r3, #4
 8001ed2:	6213      	str	r3, [r2, #32]
 8001ed4:	e020      	b.n	8001f18 <HAL_RCC_OscConfig+0x9ac>
 8001ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x994>
 8001ee6:	4bb7      	ldr	r3, [pc, #732]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4ab6      	ldr	r2, [pc, #728]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	4bb4      	ldr	r3, [pc, #720]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4ab3      	ldr	r2, [pc, #716]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0x9ac>
 8001f00:	4bb0      	ldr	r3, [pc, #704]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4aaf      	ldr	r2, [pc, #700]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	4bad      	ldr	r3, [pc, #692]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4aac      	ldr	r2, [pc, #688]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001f12:	f023 0304 	bic.w	r3, r3, #4
 8001f16:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8081 	beq.w	800202c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7fe fdfd 	bl	8000b28 <HAL_GetTick>
 8001f2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f34:	f7fe fdf8 	bl	8000b28 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e345      	b.n	80025d8 <HAL_RCC_OscConfig+0x106c>
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f54:	2202      	movs	r2, #2
 8001f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fa93 f2a3 	rbit	r2, r3
 8001f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f78:	2202      	movs	r2, #2
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f92:	601a      	str	r2, [r3, #0]
  return result;
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f9c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	095b      	lsrs	r3, r3, #5
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d102      	bne.n	8001fb8 <HAL_RCC_OscConfig+0xa4c>
 8001fb2:	4b84      	ldr	r3, [pc, #528]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	e013      	b.n	8001fe0 <HAL_RCC_OscConfig+0xa74>
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	fa93 f2a3 	rbit	r2, r3
 8001fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	4b79      	ldr	r3, [pc, #484]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fe4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001fe8:	2102      	movs	r1, #2
 8001fea:	6011      	str	r1, [r2, #0]
 8001fec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	fa92 f1a2 	rbit	r1, r2
 8001ffa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ffe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002002:	6011      	str	r1, [r2, #0]
  return result;
 8002004:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002008:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d084      	beq.n	8001f34 <HAL_RCC_OscConfig+0x9c8>
 800202a:	e07f      	b.n	800212c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7fe fd7c 	bl	8000b28 <HAL_GetTick>
 8002030:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	e00b      	b.n	800204e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7fe fd77 	bl	8000b28 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e2c4      	b.n	80025d8 <HAL_RCC_OscConfig+0x106c>
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002056:	2202      	movs	r2, #2
 8002058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	fa93 f2a3 	rbit	r2, r3
 8002068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800207a:	2202      	movs	r2, #2
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002082:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002094:	601a      	str	r2, [r3, #0]
  return result;
 8002096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800209e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d102      	bne.n	80020ba <HAL_RCC_OscConfig+0xb4e>
 80020b4:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	e013      	b.n	80020e2 <HAL_RCC_OscConfig+0xb76>
 80020ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020c2:	2202      	movs	r2, #2
 80020c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	fa93 f2a3 	rbit	r2, r3
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80020ea:	2102      	movs	r1, #2
 80020ec:	6011      	str	r1, [r2, #0]
 80020ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	fa92 f1a2 	rbit	r1, r2
 80020fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002100:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002104:	6011      	str	r1, [r2, #0]
  return result;
 8002106:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800210a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	fab2 f282 	clz	r2, r2
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f002 021f 	and.w	r2, r2, #31
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f202 	lsl.w	r2, r1, r2
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d184      	bne.n	8002036 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800212c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002130:	2b01      	cmp	r3, #1
 8002132:	d105      	bne.n	8002140 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 800213a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002144:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8242 	beq.w	80025d6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_RCC_OscConfig+0xc58>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b08      	cmp	r3, #8
 800215c:	f000 8213 	beq.w	8002586 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002164:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b02      	cmp	r3, #2
 800216e:	f040 8162 	bne.w	8002436 <HAL_RCC_OscConfig+0xeca>
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800217a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800217e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002192:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002196:	601a      	str	r2, [r3, #0]
  return result;
 8002198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	461a      	mov	r2, r3
 80021b4:	2300      	movs	r3, #0
 80021b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7fe fcb6 	bl	8000b28 <HAL_GetTick>
 80021bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c0:	e00c      	b.n	80021dc <HAL_RCC_OscConfig+0xc70>
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe fcae 	bl	8000b28 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1fd      	b.n	80025d8 <HAL_RCC_OscConfig+0x106c>
 80021dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002200:	601a      	str	r2, [r3, #0]
  return result;
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800220a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <HAL_RCC_OscConfig+0xcba>
 8002220:	4bb0      	ldr	r3, [pc, #704]	; (80024e4 <HAL_RCC_OscConfig+0xf78>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	e027      	b.n	8002276 <HAL_RCC_OscConfig+0xd0a>
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800222e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fa93 f2a3 	rbit	r2, r3
 8002242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002246:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002250:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	fa93 f2a3 	rbit	r2, r3
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	4b9c      	ldr	r3, [pc, #624]	; (80024e4 <HAL_RCC_OscConfig+0xf78>)
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800227a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800227e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002282:	6011      	str	r1, [r2, #0]
 8002284:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002288:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	fa92 f1a2 	rbit	r1, r2
 8002292:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002296:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800229a:	6011      	str	r1, [r2, #0]
  return result;
 800229c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022a0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	fab2 f282 	clz	r2, r2
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	f042 0220 	orr.w	r2, r2, #32
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	f002 021f 	and.w	r2, r2, #31
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f202 	lsl.w	r2, r1, r2
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d182      	bne.n	80021c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c2:	4b88      	ldr	r3, [pc, #544]	; (80024e4 <HAL_RCC_OscConfig+0xf78>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	430b      	orrs	r3, r1
 80022e4:	497f      	ldr	r1, [pc, #508]	; (80024e4 <HAL_RCC_OscConfig+0xf78>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80022f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	fa93 f2a3 	rbit	r2, r3
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800230e:	601a      	str	r2, [r3, #0]
  return result;
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002318:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002324:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	461a      	mov	r2, r3
 800232c:	2301      	movs	r3, #1
 800232e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fbfa 	bl	8000b28 <HAL_GetTick>
 8002334:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002338:	e009      	b.n	800234e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233a:	f7fe fbf5 	bl	8000b28 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e144      	b.n	80025d8 <HAL_RCC_OscConfig+0x106c>
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002356:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800235a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002372:	601a      	str	r2, [r3, #0]
  return result;
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800237c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_RCC_OscConfig+0xe2c>
 8002392:	4b54      	ldr	r3, [pc, #336]	; (80024e4 <HAL_RCC_OscConfig+0xf78>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	e027      	b.n	80023e8 <HAL_RCC_OscConfig+0xe7c>
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80023c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <HAL_RCC_OscConfig+0xf78>)
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80023f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023f4:	6011      	str	r1, [r2, #0]
 80023f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	fa92 f1a2 	rbit	r1, r2
 8002404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002408:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800240c:	6011      	str	r1, [r2, #0]
  return result;
 800240e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002412:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	fab2 f282 	clz	r2, r2
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	f042 0220 	orr.w	r2, r2, #32
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f002 021f 	and.w	r2, r2, #31
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f202 	lsl.w	r2, r1, r2
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d082      	beq.n	800233a <HAL_RCC_OscConfig+0xdce>
 8002434:	e0cf      	b.n	80025d6 <HAL_RCC_OscConfig+0x106a>
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800243e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	fa93 f2a3 	rbit	r2, r3
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800245a:	601a      	str	r2, [r3, #0]
  return result;
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002464:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002470:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	461a      	mov	r2, r3
 8002478:	2300      	movs	r3, #0
 800247a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fb54 	bl	8000b28 <HAL_GetTick>
 8002480:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	e009      	b.n	800249a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe fb4f 	bl	8000b28 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e09e      	b.n	80025d8 <HAL_RCC_OscConfig+0x106c>
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	fa93 f2a3 	rbit	r2, r3
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024be:	601a      	str	r2, [r3, #0]
  return result;
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d104      	bne.n	80024e8 <HAL_RCC_OscConfig+0xf7c>
 80024de:	4b01      	ldr	r3, [pc, #4]	; (80024e4 <HAL_RCC_OscConfig+0xf78>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	e029      	b.n	8002538 <HAL_RCC_OscConfig+0xfcc>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	fa93 f2a3 	rbit	r2, r3
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f2a3 	rbit	r2, r3
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_RCC_OscConfig+0x1078>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800253c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002540:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002544:	6011      	str	r1, [r2, #0]
 8002546:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800254a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	fa92 f1a2 	rbit	r1, r2
 8002554:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002558:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800255c:	6011      	str	r1, [r2, #0]
  return result;
 800255e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002562:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	fab2 f282 	clz	r2, r2
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f042 0220 	orr.w	r2, r2, #32
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f002 021f 	and.w	r2, r2, #31
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d180      	bne.n	8002486 <HAL_RCC_OscConfig+0xf1a>
 8002584:	e027      	b.n	80025d6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e01e      	b.n	80025d8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_RCC_OscConfig+0x1078>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025a6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d10b      	bne.n	80025d2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80025ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000

080025e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b09e      	sub	sp, #120	; 0x78
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e162      	b.n	80028c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b90      	ldr	r3, [pc, #576]	; (8002844 <HAL_RCC_ClockConfig+0x25c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d910      	bls.n	8002630 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b8d      	ldr	r3, [pc, #564]	; (8002844 <HAL_RCC_ClockConfig+0x25c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 0207 	bic.w	r2, r3, #7
 8002616:	498b      	ldr	r1, [pc, #556]	; (8002844 <HAL_RCC_ClockConfig+0x25c>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b89      	ldr	r3, [pc, #548]	; (8002844 <HAL_RCC_ClockConfig+0x25c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e14a      	b.n	80028c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b82      	ldr	r3, [pc, #520]	; (8002848 <HAL_RCC_ClockConfig+0x260>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	497f      	ldr	r1, [pc, #508]	; (8002848 <HAL_RCC_ClockConfig+0x260>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80dc 	beq.w	8002814 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d13c      	bne.n	80026de <HAL_RCC_ClockConfig+0xf6>
 8002664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002668:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d102      	bne.n	800268e <HAL_RCC_ClockConfig+0xa6>
 8002688:	4b6f      	ldr	r3, [pc, #444]	; (8002848 <HAL_RCC_ClockConfig+0x260>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	e00f      	b.n	80026ae <HAL_RCC_ClockConfig+0xc6>
 800268e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002692:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	667b      	str	r3, [r7, #100]	; 0x64
 800269c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a0:	663b      	str	r3, [r7, #96]	; 0x60
 80026a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_ClockConfig+0x260>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80026b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026b6:	fa92 f2a2 	rbit	r2, r2
 80026ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f042 0220 	orr.w	r2, r2, #32
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f002 021f 	and.w	r2, r2, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d17b      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e0f3      	b.n	80028c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d13c      	bne.n	8002760 <HAL_RCC_ClockConfig+0x178>
 80026e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d102      	bne.n	8002710 <HAL_RCC_ClockConfig+0x128>
 800270a:	4b4f      	ldr	r3, [pc, #316]	; (8002848 <HAL_RCC_ClockConfig+0x260>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	e00f      	b.n	8002730 <HAL_RCC_ClockConfig+0x148>
 8002710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002714:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002718:	fa93 f3a3 	rbit	r3, r3
 800271c:	647b      	str	r3, [r7, #68]	; 0x44
 800271e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002722:	643b      	str	r3, [r7, #64]	; 0x40
 8002724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800272c:	4b46      	ldr	r3, [pc, #280]	; (8002848 <HAL_RCC_ClockConfig+0x260>)
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002734:	63ba      	str	r2, [r7, #56]	; 0x38
 8002736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002738:	fa92 f2a2 	rbit	r2, r2
 800273c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800273e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002740:	fab2 f282 	clz	r2, r2
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	f042 0220 	orr.w	r2, r2, #32
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f002 021f 	and.w	r2, r2, #31
 8002750:	2101      	movs	r1, #1
 8002752:	fa01 f202 	lsl.w	r2, r1, r2
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d13a      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0b2      	b.n	80028c6 <HAL_RCC_ClockConfig+0x2de>
 8002760:	2302      	movs	r3, #2
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_RCC_ClockConfig+0x1a0>
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_RCC_ClockConfig+0x260>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e00d      	b.n	80027a4 <HAL_RCC_ClockConfig+0x1bc>
 8002788:	2302      	movs	r3, #2
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	2302      	movs	r3, #2
 8002796:	623b      	str	r3, [r7, #32]
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	61fb      	str	r3, [r7, #28]
 80027a0:	4b29      	ldr	r3, [pc, #164]	; (8002848 <HAL_RCC_ClockConfig+0x260>)
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2202      	movs	r2, #2
 80027a6:	61ba      	str	r2, [r7, #24]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	fa92 f2a2 	rbit	r2, r2
 80027ae:	617a      	str	r2, [r7, #20]
  return result;
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	fab2 f282 	clz	r2, r2
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	f042 0220 	orr.w	r2, r2, #32
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	f002 021f 	and.w	r2, r2, #31
 80027c2:	2101      	movs	r1, #1
 80027c4:	fa01 f202 	lsl.w	r2, r1, r2
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e079      	b.n	80028c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_RCC_ClockConfig+0x260>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f023 0203 	bic.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	491a      	ldr	r1, [pc, #104]	; (8002848 <HAL_RCC_ClockConfig+0x260>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e4:	f7fe f9a0 	bl	8000b28 <HAL_GetTick>
 80027e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7fe f99c 	bl	8000b28 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e061      	b.n	80028c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_RCC_ClockConfig+0x260>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 020c 	and.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	429a      	cmp	r2, r3
 8002812:	d1eb      	bne.n	80027ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_ClockConfig+0x25c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d214      	bcs.n	800284c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_RCC_ClockConfig+0x25c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	4906      	ldr	r1, [pc, #24]	; (8002844 <HAL_RCC_ClockConfig+0x25c>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <HAL_RCC_ClockConfig+0x25c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e040      	b.n	80028c6 <HAL_RCC_ClockConfig+0x2de>
 8002844:	40022000 	.word	0x40022000
 8002848:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCC_ClockConfig+0x2e8>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	491a      	ldr	r1, [pc, #104]	; (80028d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4912      	ldr	r1, [pc, #72]	; (80028d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800288a:	f000 f829 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 800288e:	4601      	mov	r1, r0
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002898:	22f0      	movs	r2, #240	; 0xf0
 800289a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	fa92 f2a2 	rbit	r2, r2
 80028a2:	60fa      	str	r2, [r7, #12]
  return result;
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	fab2 f282 	clz	r2, r2
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	40d3      	lsrs	r3, r2
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x2ec>)
 80028b0:	5cd3      	ldrb	r3, [r2, r3]
 80028b2:	fa21 f303 	lsr.w	r3, r1, r3
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <HAL_RCC_ClockConfig+0x2f0>)
 80028b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_RCC_ClockConfig+0x2f4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe f8ee 	bl	8000aa0 <HAL_InitTick>
  
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3778      	adds	r7, #120	; 0x78
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	080035ac 	.word	0x080035ac
 80028d8:	20000000 	.word	0x20000000
 80028dc:	20000004 	.word	0x20000004

080028e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b08b      	sub	sp, #44	; 0x2c
 80028e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028fa:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b04      	cmp	r3, #4
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x30>
 800290a:	2b08      	cmp	r3, #8
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x36>
 800290e:	e03c      	b.n	800298a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002912:	623b      	str	r3, [r7, #32]
      break;
 8002914:	e03c      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800291c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002920:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	fa92 f2a2 	rbit	r2, r2
 8002928:	607a      	str	r2, [r7, #4]
  return result;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	40d3      	lsrs	r3, r2
 8002934:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800293a:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	220f      	movs	r2, #15
 8002944:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	fa92 f2a2 	rbit	r2, r2
 800294c:	60fa      	str	r2, [r7, #12]
  return result;
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	fab2 f282 	clz	r2, r2
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	40d3      	lsrs	r3, r2
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002968:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	e004      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	623b      	str	r3, [r7, #32]
      break;
 8002988:	e002      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800298c:	623b      	str	r3, [r7, #32]
      break;
 800298e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002990:	6a3b      	ldr	r3, [r7, #32]
}
 8002992:	4618      	mov	r0, r3
 8002994:	372c      	adds	r7, #44	; 0x2c
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	007a1200 	.word	0x007a1200
 80029a8:	080035bc 	.word	0x080035bc
 80029ac:	080035cc 	.word	0x080035cc
 80029b0:	003d0900 	.word	0x003d0900

080029b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b092      	sub	sp, #72	; 0x48
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80d4 	beq.w	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d8:	4b4e      	ldr	r3, [pc, #312]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10e      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b4b      	ldr	r3, [pc, #300]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4a4a      	ldr	r2, [pc, #296]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	61d3      	str	r3, [r2, #28]
 80029f0:	4b48      	ldr	r3, [pc, #288]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	4b45      	ldr	r3, [pc, #276]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d118      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0e:	4b42      	ldr	r3, [pc, #264]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a41      	ldr	r2, [pc, #260]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe f885 	bl	8000b28 <HAL_GetTick>
 8002a1e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	e008      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe f881 	bl	8000b28 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b64      	cmp	r3, #100	; 0x64
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e169      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a40:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8084 	beq.w	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d07c      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a60:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	461a      	mov	r2, r3
 8002aae:	2300      	movs	r3, #0
 8002ab0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ab2:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d04b      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe f831 	bl	8000b28 <HAL_GetTick>
 8002ac6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe f82d 	bl	8000b28 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e113      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	2302      	movs	r3, #2
 8002aee:	623b      	str	r3, [r7, #32]
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	61fb      	str	r3, [r7, #28]
  return result;
 8002af8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d108      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b0e:	4b01      	ldr	r3, [pc, #4]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	e00d      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40007000 	.word	0x40007000
 8002b1c:	10908100 	.word	0x10908100
 8002b20:	2302      	movs	r3, #2
 8002b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	4b78      	ldr	r3, [pc, #480]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2202      	movs	r2, #2
 8002b32:	613a      	str	r2, [r7, #16]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	fa92 f2a2 	rbit	r2, r2
 8002b3a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	fab2 f282 	clz	r2, r2
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	f002 021f 	and.w	r2, r2, #31
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f202 	lsl.w	r2, r1, r2
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0b7      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	496a      	ldr	r1, [pc, #424]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b66      	ldr	r3, [pc, #408]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	4a65      	ldr	r2, [pc, #404]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b8c:	4b60      	ldr	r3, [pc, #384]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	f023 0203 	bic.w	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	495d      	ldr	r1, [pc, #372]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002baa:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	4956      	ldr	r1, [pc, #344]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bc8:	4b51      	ldr	r3, [pc, #324]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	494e      	ldr	r1, [pc, #312]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be6:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f023 0210 	bic.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	4947      	ldr	r1, [pc, #284]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c04:	4b42      	ldr	r3, [pc, #264]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	493f      	ldr	r1, [pc, #252]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c22:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f023 0220 	bic.w	r2, r3, #32
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4938      	ldr	r1, [pc, #224]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c40:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	4930      	ldr	r1, [pc, #192]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	4929      	ldr	r1, [pc, #164]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	4921      	ldr	r1, [pc, #132]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	491a      	ldr	r1, [pc, #104]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	4912      	ldr	r1, [pc, #72]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	490b      	ldr	r1, [pc, #44]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	4903      	ldr	r1, [pc, #12]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3748      	adds	r7, #72	; 0x48
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000

08002d14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e09d      	b.n	8002e62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d108      	bne.n	8002d40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d36:	d009      	beq.n	8002d4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
 8002d3e:	e005      	b.n	8002d4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fd fd72 	bl	8000850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d8c:	d902      	bls.n	8002d94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e002      	b.n	8002d9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002da2:	d007      	beq.n	8002db4 <HAL_SPI_Init+0xa0>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dac:	d002      	beq.n	8002db4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	ea42 0103 	orr.w	r1, r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	0c1b      	lsrs	r3, r3, #16
 8002e10:	f003 0204 	and.w	r2, r3, #4
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e30:	ea42 0103 	orr.w	r1, r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e049      	b.n	8002f10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fd fd1f 	bl	80008d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f000 f961 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d001      	beq.n	8002f30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e042      	b.n	8002fb6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a21      	ldr	r2, [pc, #132]	; (8002fc4 <HAL_TIM_Base_Start+0xac>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d018      	beq.n	8002f74 <HAL_TIM_Base_Start+0x5c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4a:	d013      	beq.n	8002f74 <HAL_TIM_Base_Start+0x5c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <HAL_TIM_Base_Start+0xb0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00e      	beq.n	8002f74 <HAL_TIM_Base_Start+0x5c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <HAL_TIM_Base_Start+0xb4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_TIM_Base_Start+0x5c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1a      	ldr	r2, [pc, #104]	; (8002fd0 <HAL_TIM_Base_Start+0xb8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <HAL_TIM_Base_Start+0x5c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <HAL_TIM_Base_Start+0xbc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d115      	bne.n	8002fa0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <HAL_TIM_Base_Start+0xc0>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d015      	beq.n	8002fb2 <HAL_TIM_Base_Start+0x9a>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8c:	d011      	beq.n	8002fb2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9e:	e008      	b.n	8002fb2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e000      	b.n	8002fb4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40013400 	.word	0x40013400
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	00010007 	.word	0x00010007

08002fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0b6      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x18a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800301a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003034:	d03e      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0xd8>
 8003036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303a:	f200 8087 	bhi.w	800314c <HAL_TIM_ConfigClockSource+0x170>
 800303e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003042:	f000 8086 	beq.w	8003152 <HAL_TIM_ConfigClockSource+0x176>
 8003046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304a:	d87f      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x170>
 800304c:	2b70      	cmp	r3, #112	; 0x70
 800304e:	d01a      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0xaa>
 8003050:	2b70      	cmp	r3, #112	; 0x70
 8003052:	d87b      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x170>
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d050      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x11e>
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	d877      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x170>
 800305c:	2b50      	cmp	r3, #80	; 0x50
 800305e:	d03c      	beq.n	80030da <HAL_TIM_ConfigClockSource+0xfe>
 8003060:	2b50      	cmp	r3, #80	; 0x50
 8003062:	d873      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x170>
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d058      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x13e>
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d86f      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x170>
 800306c:	2b30      	cmp	r3, #48	; 0x30
 800306e:	d064      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15e>
 8003070:	2b30      	cmp	r3, #48	; 0x30
 8003072:	d86b      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x170>
 8003074:	2b20      	cmp	r3, #32
 8003076:	d060      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15e>
 8003078:	2b20      	cmp	r3, #32
 800307a:	d867      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x170>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d05c      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15e>
 8003080:	2b10      	cmp	r3, #16
 8003082:	d05a      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15e>
 8003084:	e062      	b.n	800314c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f000 f975 	bl	8003384 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	609a      	str	r2, [r3, #8]
      break;
 80030b2:	e04f      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f000 f95e 	bl	8003384 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d6:	609a      	str	r2, [r3, #8]
      break;
 80030d8:	e03c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 f8d2 	bl	8003290 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2150      	movs	r1, #80	; 0x50
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f92b 	bl	800334e <TIM_ITRx_SetConfig>
      break;
 80030f8:	e02c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	461a      	mov	r2, r3
 8003108:	f000 f8f1 	bl	80032ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2160      	movs	r1, #96	; 0x60
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f91b 	bl	800334e <TIM_ITRx_SetConfig>
      break;
 8003118:	e01c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6859      	ldr	r1, [r3, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	461a      	mov	r2, r3
 8003128:	f000 f8b2 	bl	8003290 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2140      	movs	r1, #64	; 0x40
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f90b 	bl	800334e <TIM_ITRx_SetConfig>
      break;
 8003138:	e00c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f000 f902 	bl	800334e <TIM_ITRx_SetConfig>
      break;
 800314a:	e003      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
      break;
 8003150:	e000      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a3c      	ldr	r2, [pc, #240]	; (8003274 <TIM_Base_SetConfig+0x104>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00f      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d00b      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a39      	ldr	r2, [pc, #228]	; (8003278 <TIM_Base_SetConfig+0x108>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d007      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a38      	ldr	r2, [pc, #224]	; (800327c <TIM_Base_SetConfig+0x10c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a37      	ldr	r2, [pc, #220]	; (8003280 <TIM_Base_SetConfig+0x110>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d108      	bne.n	80031ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a2d      	ldr	r2, [pc, #180]	; (8003274 <TIM_Base_SetConfig+0x104>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01b      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d017      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <TIM_Base_SetConfig+0x108>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <TIM_Base_SetConfig+0x10c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00f      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a28      	ldr	r2, [pc, #160]	; (8003280 <TIM_Base_SetConfig+0x110>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <TIM_Base_SetConfig+0x114>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a26      	ldr	r2, [pc, #152]	; (8003288 <TIM_Base_SetConfig+0x118>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a25      	ldr	r2, [pc, #148]	; (800328c <TIM_Base_SetConfig+0x11c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d108      	bne.n	800320c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <TIM_Base_SetConfig+0x104>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00f      	beq.n	8003258 <TIM_Base_SetConfig+0xe8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a11      	ldr	r2, [pc, #68]	; (8003280 <TIM_Base_SetConfig+0x110>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00b      	beq.n	8003258 <TIM_Base_SetConfig+0xe8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <TIM_Base_SetConfig+0x114>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d007      	beq.n	8003258 <TIM_Base_SetConfig+0xe8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a0f      	ldr	r2, [pc, #60]	; (8003288 <TIM_Base_SetConfig+0x118>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d003      	beq.n	8003258 <TIM_Base_SetConfig+0xe8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a0e      	ldr	r2, [pc, #56]	; (800328c <TIM_Base_SetConfig+0x11c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d103      	bne.n	8003260 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	615a      	str	r2, [r3, #20]
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800
 8003280:	40013400 	.word	0x40013400
 8003284:	40014000 	.word	0x40014000
 8003288:	40014400 	.word	0x40014400
 800328c:	40014800 	.word	0x40014800

08003290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f023 0201 	bic.w	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f023 030a 	bic.w	r3, r3, #10
 80032cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b087      	sub	sp, #28
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f023 0210 	bic.w	r2, r3, #16
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	031b      	lsls	r3, r3, #12
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800332a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	f043 0307 	orr.w	r3, r3, #7
 8003370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	609a      	str	r2, [r3, #8]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800339e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	021a      	lsls	r2, r3, #8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	609a      	str	r2, [r3, #8]
}
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d8:	2302      	movs	r3, #2
 80033da:	e063      	b.n	80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2b      	ldr	r2, [pc, #172]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2a      	ldr	r2, [pc, #168]	; (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d108      	bne.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003416:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003428:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344e:	d013      	beq.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a18      	ldr	r2, [pc, #96]	; (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a17      	ldr	r2, [pc, #92]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d10c      	bne.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800347e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	4313      	orrs	r3, r2
 8003488:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40013400 	.word	0x40013400
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40000800 	.word	0x40000800
 80034c0:	40014000 	.word	0x40014000

080034c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80034d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	4013      	ands	r3, r2
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034fa:	b084      	sub	sp, #16
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	f107 0014 	add.w	r0, r7, #20
 8003508:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	b004      	add	sp, #16
 800353a:	4770      	bx	lr

0800353c <__libc_init_array>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	4d0d      	ldr	r5, [pc, #52]	; (8003574 <__libc_init_array+0x38>)
 8003540:	4c0d      	ldr	r4, [pc, #52]	; (8003578 <__libc_init_array+0x3c>)
 8003542:	1b64      	subs	r4, r4, r5
 8003544:	10a4      	asrs	r4, r4, #2
 8003546:	2600      	movs	r6, #0
 8003548:	42a6      	cmp	r6, r4
 800354a:	d109      	bne.n	8003560 <__libc_init_array+0x24>
 800354c:	4d0b      	ldr	r5, [pc, #44]	; (800357c <__libc_init_array+0x40>)
 800354e:	4c0c      	ldr	r4, [pc, #48]	; (8003580 <__libc_init_array+0x44>)
 8003550:	f000 f820 	bl	8003594 <_init>
 8003554:	1b64      	subs	r4, r4, r5
 8003556:	10a4      	asrs	r4, r4, #2
 8003558:	2600      	movs	r6, #0
 800355a:	42a6      	cmp	r6, r4
 800355c:	d105      	bne.n	800356a <__libc_init_array+0x2e>
 800355e:	bd70      	pop	{r4, r5, r6, pc}
 8003560:	f855 3b04 	ldr.w	r3, [r5], #4
 8003564:	4798      	blx	r3
 8003566:	3601      	adds	r6, #1
 8003568:	e7ee      	b.n	8003548 <__libc_init_array+0xc>
 800356a:	f855 3b04 	ldr.w	r3, [r5], #4
 800356e:	4798      	blx	r3
 8003570:	3601      	adds	r6, #1
 8003572:	e7f2      	b.n	800355a <__libc_init_array+0x1e>
 8003574:	080035dc 	.word	0x080035dc
 8003578:	080035dc 	.word	0x080035dc
 800357c:	080035dc 	.word	0x080035dc
 8003580:	080035e0 	.word	0x080035e0

08003584 <memset>:
 8003584:	4402      	add	r2, r0
 8003586:	4603      	mov	r3, r0
 8003588:	4293      	cmp	r3, r2
 800358a:	d100      	bne.n	800358e <memset+0xa>
 800358c:	4770      	bx	lr
 800358e:	f803 1b01 	strb.w	r1, [r3], #1
 8003592:	e7f9      	b.n	8003588 <memset+0x4>

08003594 <_init>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	bf00      	nop
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr

080035a0 <_fini>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	bf00      	nop
 80035a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a6:	bc08      	pop	{r3}
 80035a8:	469e      	mov	lr, r3
 80035aa:	4770      	bx	lr
