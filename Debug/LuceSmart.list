
LuceSmart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe0  08006fe0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006fe0  08006fe0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fe0  08006fe0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000584  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000590  20000590  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b56e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003007  00000000  00000000  0003b5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001570  00000000  00000000  0003fc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f895  00000000  00000000  000411a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c1fa  00000000  00000000  00060a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2852  00000000  00000000  0007cc37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f489  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006118  00000000  00000000  0013f4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f90 	.word	0x08006f90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006f90 	.word	0x08006f90

080001c8 <delay_us>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <delay_us+0x30>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2200      	movs	r2, #0
 80001d8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2)<=us);
 80001da:	bf00      	nop
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <delay_us+0x30>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001e2:	88fb      	ldrh	r3, [r7, #6]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d9f9      	bls.n	80001dc <delay_us+0x14>
}
 80001e8:	bf00      	nop
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	2000012c 	.word	0x2000012c

080001fc <spegni_luce>:
int stato = 0;
int config = 0;
int countdown = 0;


void spegni_luce(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	2101      	movs	r1, #1
 8000204:	4802      	ldr	r0, [pc, #8]	; (8000210 <spegni_luce+0x14>)
 8000206:	f003 f851 	bl	80032ac <HAL_GPIO_WritePin>
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	48000400 	.word	0x48000400

08000214 <accendi_luce>:

void accendi_luce(){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000218:	2201      	movs	r2, #1
 800021a:	2101      	movs	r1, #1
 800021c:	4802      	ldr	r0, [pc, #8]	; (8000228 <accendi_luce+0x14>)
 800021e:	f003 f845 	bl	80032ac <HAL_GPIO_WritePin>
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	48000400 	.word	0x48000400

0800022c <toggle_luce>:

void toggle_luce(){
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000230:	2101      	movs	r1, #1
 8000232:	4802      	ldr	r0, [pc, #8]	; (800023c <toggle_luce+0x10>)
 8000234:	f003 f852 	bl	80032dc <HAL_GPIO_TogglePin>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	48000400 	.word	0x48000400

08000240 <gestisci_tasto>:

void gestisci_tasto(int tasto){
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	if(stato == 0){
 8000248:	4b45      	ldr	r3, [pc, #276]	; (8000360 <gestisci_tasto+0x120>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d11d      	bne.n	800028c <gestisci_tasto+0x4c>
		if(tasto == 0){
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d102      	bne.n	800025c <gestisci_tasto+0x1c>
			toggle_luce();
 8000256:	f7ff ffe9 	bl	800022c <toggle_luce>
				tasto = tasto - 11;
				countdown = countdown*10 + tasto;
			}
		}
	}
}
 800025a:	e07d      	b.n	8000358 <gestisci_tasto+0x118>
		else if(tasto == 1){
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d17a      	bne.n	8000358 <gestisci_tasto+0x118>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000268:	483e      	ldr	r0, [pc, #248]	; (8000364 <gestisci_tasto+0x124>)
 800026a:	f003 f81f 	bl	80032ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000274:	483b      	ldr	r0, [pc, #236]	; (8000364 <gestisci_tasto+0x124>)
 8000276:	f003 f819 	bl	80032ac <HAL_GPIO_WritePin>
			spegni_luce();
 800027a:	f7ff ffbf 	bl	80001fc <spegni_luce>
			HAL_TIM_Base_Start_IT(&htim4);
 800027e:	483a      	ldr	r0, [pc, #232]	; (8000368 <gestisci_tasto+0x128>)
 8000280:	f004 ffea 	bl	8005258 <HAL_TIM_Base_Start_IT>
			stato = 1;
 8000284:	4b36      	ldr	r3, [pc, #216]	; (8000360 <gestisci_tasto+0x120>)
 8000286:	2201      	movs	r2, #1
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	e065      	b.n	8000358 <gestisci_tasto+0x118>
	else if(stato == 1){
 800028c:	4b34      	ldr	r3, [pc, #208]	; (8000360 <gestisci_tasto+0x120>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d11d      	bne.n	80002d0 <gestisci_tasto+0x90>
		if(tasto == 1){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d15e      	bne.n	8000358 <gestisci_tasto+0x118>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002a0:	4830      	ldr	r0, [pc, #192]	; (8000364 <gestisci_tasto+0x124>)
 80002a2:	f003 f803 	bl	80032ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ac:	482d      	ldr	r0, [pc, #180]	; (8000364 <gestisci_tasto+0x124>)
 80002ae:	f002 fffd 	bl	80032ac <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim4);
 80002b2:	482d      	ldr	r0, [pc, #180]	; (8000368 <gestisci_tasto+0x128>)
 80002b4:	f005 f83a 	bl	800532c <HAL_TIM_Base_Stop_IT>
			spegni_luce();
 80002b8:	f7ff ffa0 	bl	80001fc <spegni_luce>
			config = 1;
 80002bc:	4b2b      	ldr	r3, [pc, #172]	; (800036c <gestisci_tasto+0x12c>)
 80002be:	2201      	movs	r2, #1
 80002c0:	601a      	str	r2, [r3, #0]
			countdown = 0;
 80002c2:	4b2b      	ldr	r3, [pc, #172]	; (8000370 <gestisci_tasto+0x130>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
			stato = 2;
 80002c8:	4b25      	ldr	r3, [pc, #148]	; (8000360 <gestisci_tasto+0x120>)
 80002ca:	2202      	movs	r2, #2
 80002cc:	601a      	str	r2, [r3, #0]
}
 80002ce:	e043      	b.n	8000358 <gestisci_tasto+0x118>
	else if(stato == 2){
 80002d0:	4b23      	ldr	r3, [pc, #140]	; (8000360 <gestisci_tasto+0x120>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	d13f      	bne.n	8000358 <gestisci_tasto+0x118>
		if(tasto == 1){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d10f      	bne.n	80002fe <gestisci_tasto+0xbe>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e4:	481f      	ldr	r0, [pc, #124]	; (8000364 <gestisci_tasto+0x124>)
 80002e6:	f002 ffe1 	bl	80032ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f0:	481c      	ldr	r0, [pc, #112]	; (8000364 <gestisci_tasto+0x124>)
 80002f2:	f002 ffdb 	bl	80032ac <HAL_GPIO_WritePin>
			stato = 0;
 80002f6:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <gestisci_tasto+0x120>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
}
 80002fc:	e02c      	b.n	8000358 <gestisci_tasto+0x118>
		} else if(config == 1){
 80002fe:	4b1b      	ldr	r3, [pc, #108]	; (800036c <gestisci_tasto+0x12c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d128      	bne.n	8000358 <gestisci_tasto+0x118>
			if(tasto == 9){
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2b09      	cmp	r3, #9
 800030a:	d111      	bne.n	8000330 <gestisci_tasto+0xf0>
				config = 0;
 800030c:	4b17      	ldr	r3, [pc, #92]	; (800036c <gestisci_tasto+0x12c>)
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
				countdown--;
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <gestisci_tasto+0x130>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	4a15      	ldr	r2, [pc, #84]	; (8000370 <gestisci_tasto+0x130>)
 800031a:	6013      	str	r3, [r2, #0]
				accendi_luce();
 800031c:	f7ff ff7a 	bl	8000214 <accendi_luce>
				__HAL_TIM_SET_COUNTER(&htim3,0);
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <gestisci_tasto+0x134>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2200      	movs	r2, #0
 8000326:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim3);
 8000328:	4812      	ldr	r0, [pc, #72]	; (8000374 <gestisci_tasto+0x134>)
 800032a:	f004 ff95 	bl	8005258 <HAL_TIM_Base_Start_IT>
}
 800032e:	e013      	b.n	8000358 <gestisci_tasto+0x118>
			} else if(tasto >= 11 && tasto <= 20){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2b0a      	cmp	r3, #10
 8000334:	dd10      	ble.n	8000358 <gestisci_tasto+0x118>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b14      	cmp	r3, #20
 800033a:	dc0d      	bgt.n	8000358 <gestisci_tasto+0x118>
				tasto = tasto - 11;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	3b0b      	subs	r3, #11
 8000340:	607b      	str	r3, [r7, #4]
				countdown = countdown*10 + tasto;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <gestisci_tasto+0x130>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4613      	mov	r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	4413      	add	r3, r2
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	461a      	mov	r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4413      	add	r3, r2
 8000354:	4a06      	ldr	r2, [pc, #24]	; (8000370 <gestisci_tasto+0x130>)
 8000356:	6013      	str	r3, [r2, #0]
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000580 	.word	0x20000580
 8000364:	48001000 	.word	0x48001000
 8000368:	200001c4 	.word	0x200001c4
 800036c:	20000584 	.word	0x20000584
 8000370:	20000588 	.word	0x20000588
 8000374:	20000178 	.word	0x20000178

08000378 <receive_data_ir>:

uint32_t receive_data_ir (void){
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
	  uint32_t code=0;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]

	  while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10))); // whut^?
 8000382:	bf00      	nop
 8000384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038c:	f002 ff76 	bl	800327c <HAL_GPIO_ReadPin>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d1f6      	bne.n	8000384 <receive_data_ir+0xc>
	  while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)));  // wait for the pin to go high.. 9ms LOW
 8000396:	bf00      	nop
 8000398:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800039c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a0:	f002 ff6c 	bl	800327c <HAL_GPIO_ReadPin>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0f6      	beq.n	8000398 <receive_data_ir+0x20>
      while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)));  // wait for the pin to go low.. 4.5ms HIGH
 80003aa:	bf00      	nop
 80003ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b4:	f002 ff62 	bl	800327c <HAL_GPIO_ReadPin>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d1f6      	bne.n	80003ac <receive_data_ir+0x34>


	  for (int i=0; i<32; i++){
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	e033      	b.n	800042c <receive_data_ir+0xb4>
		  uint8_t count=0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	71fb      	strb	r3, [r7, #7]
		  while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)));
 80003c8:	bf00      	nop
 80003ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d2:	f002 ff53 	bl	800327c <HAL_GPIO_ReadPin>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d0f6      	beq.n	80003ca <receive_data_ir+0x52>
		  while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10))){
 80003dc:	e005      	b.n	80003ea <receive_data_ir+0x72>
			  count++;
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	3301      	adds	r3, #1
 80003e2:	71fb      	strb	r3, [r7, #7]
			  delay_us(100);
 80003e4:	2064      	movs	r0, #100	; 0x64
 80003e6:	f7ff feef 	bl	80001c8 <delay_us>
		  while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10))){
 80003ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f2:	f002 ff43 	bl	800327c <HAL_GPIO_ReadPin>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d1f0      	bne.n	80003de <receive_data_ir+0x66>
		  }

		  if (count > 12) code |= (1UL << (31-i));
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	2b0c      	cmp	r3, #12
 8000400:	d908      	bls.n	8000414 <receive_data_ir+0x9c>
 8000402:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	fa22 f303 	lsr.w	r3, r2, r3
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	4313      	orrs	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	e008      	b.n	8000426 <receive_data_ir+0xae>
		  else code &= ~(1UL << (31-i));
 8000414:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	fa22 f303 	lsr.w	r3, r2, r3
 800041e:	43db      	mvns	r3, r3
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	4013      	ands	r3, r2
 8000424:	60fb      	str	r3, [r7, #12]
	  for (int i=0; i<32; i++){
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	3301      	adds	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	2b1f      	cmp	r3, #31
 8000430:	ddc8      	ble.n	80003c4 <receive_data_ir+0x4c>
	  }
	  HAL_Delay(200);
 8000432:	20c8      	movs	r0, #200	; 0xc8
 8000434:	f001 f868 	bl	8001508 <HAL_Delay>
	  return code;
 8000438:	68fb      	ldr	r3, [r7, #12]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <convert_data_ir>:

int convert_data_ir(uint32_t data){
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	switch(data) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000452:	f000 80da 	beq.w	800060a <convert_data_ir+0x1c6>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a71      	ldr	r2, [pc, #452]	; (8000620 <convert_data_ir+0x1dc>)
 800045a:	4293      	cmp	r3, r2
 800045c:	f000 80ad 	beq.w	80005ba <convert_data_ir+0x176>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a6f      	ldr	r2, [pc, #444]	; (8000620 <convert_data_ir+0x1dc>)
 8000464:	4293      	cmp	r3, r2
 8000466:	f200 80d2 	bhi.w	800060e <convert_data_ir+0x1ca>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a6d      	ldr	r2, [pc, #436]	; (8000624 <convert_data_ir+0x1e0>)
 800046e:	4293      	cmp	r3, r2
 8000470:	f000 80ad 	beq.w	80005ce <convert_data_ir+0x18a>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a6b      	ldr	r2, [pc, #428]	; (8000624 <convert_data_ir+0x1e0>)
 8000478:	4293      	cmp	r3, r2
 800047a:	f200 80c8 	bhi.w	800060e <convert_data_ir+0x1ca>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a69      	ldr	r2, [pc, #420]	; (8000628 <convert_data_ir+0x1e4>)
 8000482:	4293      	cmp	r3, r2
 8000484:	f000 80a1 	beq.w	80005ca <convert_data_ir+0x186>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a67      	ldr	r2, [pc, #412]	; (8000628 <convert_data_ir+0x1e4>)
 800048c:	4293      	cmp	r3, r2
 800048e:	f200 80be 	bhi.w	800060e <convert_data_ir+0x1ca>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a65      	ldr	r2, [pc, #404]	; (800062c <convert_data_ir+0x1e8>)
 8000496:	4293      	cmp	r3, r2
 8000498:	f000 80a1 	beq.w	80005de <convert_data_ir+0x19a>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a63      	ldr	r2, [pc, #396]	; (800062c <convert_data_ir+0x1e8>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	f200 80b4 	bhi.w	800060e <convert_data_ir+0x1ca>
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a61      	ldr	r2, [pc, #388]	; (8000630 <convert_data_ir+0x1ec>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	f000 8091 	beq.w	80005d2 <convert_data_ir+0x18e>
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a5f      	ldr	r2, [pc, #380]	; (8000630 <convert_data_ir+0x1ec>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	f200 80aa 	bhi.w	800060e <convert_data_ir+0x1ca>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a5d      	ldr	r2, [pc, #372]	; (8000634 <convert_data_ir+0x1f0>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d079      	beq.n	80005b6 <convert_data_ir+0x172>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a5b      	ldr	r2, [pc, #364]	; (8000634 <convert_data_ir+0x1f0>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	f200 80a1 	bhi.w	800060e <convert_data_ir+0x1ca>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a5a      	ldr	r2, [pc, #360]	; (8000638 <convert_data_ir+0x1f4>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	f000 8082 	beq.w	80005da <convert_data_ir+0x196>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a57      	ldr	r2, [pc, #348]	; (8000638 <convert_data_ir+0x1f4>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	f200 8097 	bhi.w	800060e <convert_data_ir+0x1ca>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a56      	ldr	r2, [pc, #344]	; (800063c <convert_data_ir+0x1f8>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d076      	beq.n	80005d6 <convert_data_ir+0x192>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a54      	ldr	r2, [pc, #336]	; (800063c <convert_data_ir+0x1f8>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	f200 808e 	bhi.w	800060e <convert_data_ir+0x1ca>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a52      	ldr	r2, [pc, #328]	; (8000640 <convert_data_ir+0x1fc>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d079      	beq.n	80005ee <convert_data_ir+0x1aa>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a50      	ldr	r2, [pc, #320]	; (8000640 <convert_data_ir+0x1fc>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	f200 8085 	bhi.w	800060e <convert_data_ir+0x1ca>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a4f      	ldr	r2, [pc, #316]	; (8000644 <convert_data_ir+0x200>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d06a      	beq.n	80005e2 <convert_data_ir+0x19e>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a4d      	ldr	r2, [pc, #308]	; (8000644 <convert_data_ir+0x200>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d87c      	bhi.n	800060e <convert_data_ir+0x1ca>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a4c      	ldr	r2, [pc, #304]	; (8000648 <convert_data_ir+0x204>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d050      	beq.n	80005be <convert_data_ir+0x17a>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a4a      	ldr	r2, [pc, #296]	; (8000648 <convert_data_ir+0x204>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d874      	bhi.n	800060e <convert_data_ir+0x1ca>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a49      	ldr	r2, [pc, #292]	; (800064c <convert_data_ir+0x208>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d066      	beq.n	80005fa <convert_data_ir+0x1b6>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a47      	ldr	r2, [pc, #284]	; (800064c <convert_data_ir+0x208>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d86c      	bhi.n	800060e <convert_data_ir+0x1ca>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a46      	ldr	r2, [pc, #280]	; (8000650 <convert_data_ir+0x20c>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d064      	beq.n	8000606 <convert_data_ir+0x1c2>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a44      	ldr	r2, [pc, #272]	; (8000650 <convert_data_ir+0x20c>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d864      	bhi.n	800060e <convert_data_ir+0x1ca>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a43      	ldr	r2, [pc, #268]	; (8000654 <convert_data_ir+0x210>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d05a      	beq.n	8000602 <convert_data_ir+0x1be>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a41      	ldr	r2, [pc, #260]	; (8000654 <convert_data_ir+0x210>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d85c      	bhi.n	800060e <convert_data_ir+0x1ca>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a40      	ldr	r2, [pc, #256]	; (8000658 <convert_data_ir+0x214>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d050      	beq.n	80005fe <convert_data_ir+0x1ba>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a3e      	ldr	r2, [pc, #248]	; (8000658 <convert_data_ir+0x214>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d854      	bhi.n	800060e <convert_data_ir+0x1ca>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a3d      	ldr	r2, [pc, #244]	; (800065c <convert_data_ir+0x218>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d044      	beq.n	80005f6 <convert_data_ir+0x1b2>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a3b      	ldr	r2, [pc, #236]	; (800065c <convert_data_ir+0x218>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d84c      	bhi.n	800060e <convert_data_ir+0x1ca>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a3a      	ldr	r2, [pc, #232]	; (8000660 <convert_data_ir+0x21c>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d034      	beq.n	80005e6 <convert_data_ir+0x1a2>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a38      	ldr	r2, [pc, #224]	; (8000660 <convert_data_ir+0x21c>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d844      	bhi.n	800060e <convert_data_ir+0x1ca>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a37      	ldr	r2, [pc, #220]	; (8000664 <convert_data_ir+0x220>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d01a      	beq.n	80005c2 <convert_data_ir+0x17e>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a35      	ldr	r2, [pc, #212]	; (8000664 <convert_data_ir+0x220>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d83c      	bhi.n	800060e <convert_data_ir+0x1ca>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a34      	ldr	r2, [pc, #208]	; (8000668 <convert_data_ir+0x224>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d026      	beq.n	80005ea <convert_data_ir+0x1a6>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a32      	ldr	r2, [pc, #200]	; (8000668 <convert_data_ir+0x224>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d834      	bhi.n	800060e <convert_data_ir+0x1ca>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a31      	ldr	r2, [pc, #196]	; (800066c <convert_data_ir+0x228>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d00c      	beq.n	80005c6 <convert_data_ir+0x182>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a30      	ldr	r2, [pc, #192]	; (8000670 <convert_data_ir+0x22c>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d01e      	beq.n	80005f2 <convert_data_ir+0x1ae>
 80005b4:	e02b      	b.n	800060e <convert_data_ir+0x1ca>
		case 0xFFA25D: return 0; break; // power
 80005b6:	2300      	movs	r3, #0
 80005b8:	e02b      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFFE21D: return 1; break; //func/stop
 80005ba:	2301      	movs	r3, #1
 80005bc:	e029      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF629D: return 2; break; //vol+
 80005be:	2302      	movs	r3, #2
 80005c0:	e027      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF22DD: return 3; break; //fast back
 80005c2:	2303      	movs	r3, #3
 80005c4:	e025      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF02FD: return 4; break; //pause
 80005c6:	2304      	movs	r3, #4
 80005c8:	e023      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFFC23D: return 5; break; //fast forward
 80005ca:	2305      	movs	r3, #5
 80005cc:	e021      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFFE01F: return 6; break; //down
 80005ce:	2306      	movs	r3, #6
 80005d0:	e01f      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFFA857: return 7; break; //vol-
 80005d2:	2307      	movs	r3, #7
 80005d4:	e01d      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF906F: return 8; break; //up
 80005d6:	2308      	movs	r3, #8
 80005d8:	e01b      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF9867: return 9; break; // eq
 80005da:	2309      	movs	r3, #9
 80005dc:	e019      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFFB04F: return 10; break; //st/rept
 80005de:	230a      	movs	r3, #10
 80005e0:	e017      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF6897: return 11; break; //0
 80005e2:	230b      	movs	r3, #11
 80005e4:	e015      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF30CF: return 12; break; //1
 80005e6:	230c      	movs	r3, #12
 80005e8:	e013      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF18E7: return 13; break; //2
 80005ea:	230d      	movs	r3, #13
 80005ec:	e011      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF7A85: return 14; break; //3
 80005ee:	230e      	movs	r3, #14
 80005f0:	e00f      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF10EF: return 15; break; // 4
 80005f2:	230f      	movs	r3, #15
 80005f4:	e00d      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF38C7: return 16; break; //5
 80005f6:	2310      	movs	r3, #16
 80005f8:	e00b      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF5AA5: return 17; break; //6
 80005fa:	2311      	movs	r3, #17
 80005fc:	e009      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF42BD: return 18; break; //7
 80005fe:	2312      	movs	r3, #18
 8000600:	e007      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF4AB5: return 19; break; // 8
 8000602:	2313      	movs	r3, #19
 8000604:	e005      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFF52AD: return 20; break; //9
 8000606:	2314      	movs	r3, #20
 8000608:	e003      	b.n	8000612 <convert_data_ir+0x1ce>
		case 0xFFFFFFFF: return 21;break; //repeat
 800060a:	2315      	movs	r3, #21
 800060c:	e001      	b.n	8000612 <convert_data_ir+0x1ce>
		default:  return -1; //err
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	00ffe21d 	.word	0x00ffe21d
 8000624:	00ffe01f 	.word	0x00ffe01f
 8000628:	00ffc23d 	.word	0x00ffc23d
 800062c:	00ffb04f 	.word	0x00ffb04f
 8000630:	00ffa857 	.word	0x00ffa857
 8000634:	00ffa25d 	.word	0x00ffa25d
 8000638:	00ff9867 	.word	0x00ff9867
 800063c:	00ff906f 	.word	0x00ff906f
 8000640:	00ff7a85 	.word	0x00ff7a85
 8000644:	00ff6897 	.word	0x00ff6897
 8000648:	00ff629d 	.word	0x00ff629d
 800064c:	00ff5aa5 	.word	0x00ff5aa5
 8000650:	00ff52ad 	.word	0x00ff52ad
 8000654:	00ff4ab5 	.word	0x00ff4ab5
 8000658:	00ff42bd 	.word	0x00ff42bd
 800065c:	00ff38c7 	.word	0x00ff38c7
 8000660:	00ff30cf 	.word	0x00ff30cf
 8000664:	00ff22dd 	.word	0x00ff22dd
 8000668:	00ff18e7 	.word	0x00ff18e7
 800066c:	00ff02fd 	.word	0x00ff02fd
 8000670:	00ff10ef 	.word	0x00ff10ef

08000674 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_10){
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000684:	d109      	bne.n	800069a <HAL_GPIO_EXTI_Callback+0x26>
		uint32_t data = receive_data_ir();
 8000686:	f7ff fe77 	bl	8000378 <receive_data_ir>
 800068a:	60f8      	str	r0, [r7, #12]
		int tasto_premuto = convert_data_ir(data);
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f7ff fed9 	bl	8000444 <convert_data_ir>
 8000692:	60b8      	str	r0, [r7, #8]

		gestisci_tasto(tasto_premuto);
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f7ff fdd3 	bl	8000240 <gestisci_tasto>
	}
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <recive_data_bt>:


uint8_t recive_data_bt(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, RX_BUFFER, BUFFER_LEN);
 80006a8:	2201      	movs	r2, #1
 80006aa:	4904      	ldr	r1, [pc, #16]	; (80006bc <recive_data_bt+0x18>)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <recive_data_bt+0x1c>)
 80006ae:	f005 fa93 	bl	8005bd8 <HAL_UART_Receive_IT>
	return RX_BUFFER[0];
 80006b2:	4b02      	ldr	r3, [pc, #8]	; (80006bc <recive_data_bt+0x18>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028
 80006c0:	20000210 	.word	0x20000210

080006c4 <convert_data_bt>:

int convert_data_bt(uint8_t data){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	switch(data) {
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b14      	cmp	r3, #20
 80006d2:	dc31      	bgt.n	8000738 <convert_data_bt+0x74>
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	db5e      	blt.n	8000796 <convert_data_bt+0xd2>
 80006d8:	2b14      	cmp	r3, #20
 80006da:	d85c      	bhi.n	8000796 <convert_data_bt+0xd2>
 80006dc:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <convert_data_bt+0x20>)
 80006de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e2:	bf00      	nop
 80006e4:	0800073f 	.word	0x0800073f
 80006e8:	08000743 	.word	0x08000743
 80006ec:	08000747 	.word	0x08000747
 80006f0:	0800074b 	.word	0x0800074b
 80006f4:	0800074f 	.word	0x0800074f
 80006f8:	08000753 	.word	0x08000753
 80006fc:	08000757 	.word	0x08000757
 8000700:	0800075b 	.word	0x0800075b
 8000704:	0800075f 	.word	0x0800075f
 8000708:	08000763 	.word	0x08000763
 800070c:	08000767 	.word	0x08000767
 8000710:	0800076b 	.word	0x0800076b
 8000714:	0800076f 	.word	0x0800076f
 8000718:	08000773 	.word	0x08000773
 800071c:	08000777 	.word	0x08000777
 8000720:	0800077b 	.word	0x0800077b
 8000724:	0800077f 	.word	0x0800077f
 8000728:	08000783 	.word	0x08000783
 800072c:	08000787 	.word	0x08000787
 8000730:	0800078b 	.word	0x0800078b
 8000734:	0800078f 	.word	0x0800078f
 8000738:	2bff      	cmp	r3, #255	; 0xff
 800073a:	d02a      	beq.n	8000792 <convert_data_bt+0xce>
 800073c:	e02b      	b.n	8000796 <convert_data_bt+0xd2>
		case 0x00: return 0; break; // power
 800073e:	2300      	movs	r3, #0
 8000740:	e02b      	b.n	800079a <convert_data_bt+0xd6>
		case 0x01: return 1; break; //func/stop
 8000742:	2301      	movs	r3, #1
 8000744:	e029      	b.n	800079a <convert_data_bt+0xd6>
		case 0x02: return 2; break; //vol+
 8000746:	2302      	movs	r3, #2
 8000748:	e027      	b.n	800079a <convert_data_bt+0xd6>
		case 0x03: return 3; break; //fast back
 800074a:	2303      	movs	r3, #3
 800074c:	e025      	b.n	800079a <convert_data_bt+0xd6>
		case 0x04: return 4; break; //pause
 800074e:	2304      	movs	r3, #4
 8000750:	e023      	b.n	800079a <convert_data_bt+0xd6>
		case 0x05: return 5; break; //fast forward
 8000752:	2305      	movs	r3, #5
 8000754:	e021      	b.n	800079a <convert_data_bt+0xd6>
		case 0x06: return 6; break; //down
 8000756:	2306      	movs	r3, #6
 8000758:	e01f      	b.n	800079a <convert_data_bt+0xd6>
		case 0x07: return 7; break; //vol-
 800075a:	2307      	movs	r3, #7
 800075c:	e01d      	b.n	800079a <convert_data_bt+0xd6>
		case 0x08: return 8; break; //up
 800075e:	2308      	movs	r3, #8
 8000760:	e01b      	b.n	800079a <convert_data_bt+0xd6>
		case 0x09: return 9; break; // eq
 8000762:	2309      	movs	r3, #9
 8000764:	e019      	b.n	800079a <convert_data_bt+0xd6>
		case 0x0A: return 10; break; //st/rept
 8000766:	230a      	movs	r3, #10
 8000768:	e017      	b.n	800079a <convert_data_bt+0xd6>
		case 0x0B: return 11; break; //0
 800076a:	230b      	movs	r3, #11
 800076c:	e015      	b.n	800079a <convert_data_bt+0xd6>
		case 0x0C: return 12; break; //1
 800076e:	230c      	movs	r3, #12
 8000770:	e013      	b.n	800079a <convert_data_bt+0xd6>
		case 0x0D: return 13; break; //2
 8000772:	230d      	movs	r3, #13
 8000774:	e011      	b.n	800079a <convert_data_bt+0xd6>
		case 0x0E: return 14; break; //3
 8000776:	230e      	movs	r3, #14
 8000778:	e00f      	b.n	800079a <convert_data_bt+0xd6>
		case 0x0F: return 15; break; // 4
 800077a:	230f      	movs	r3, #15
 800077c:	e00d      	b.n	800079a <convert_data_bt+0xd6>
		case 0x10: return 16; break; //5
 800077e:	2310      	movs	r3, #16
 8000780:	e00b      	b.n	800079a <convert_data_bt+0xd6>
		case 0x11: return 17; break; //6
 8000782:	2311      	movs	r3, #17
 8000784:	e009      	b.n	800079a <convert_data_bt+0xd6>
		case 0x12: return 18; break; //7
 8000786:	2312      	movs	r3, #18
 8000788:	e007      	b.n	800079a <convert_data_bt+0xd6>
		case 0x13: return 19; break; // 8
 800078a:	2313      	movs	r3, #19
 800078c:	e005      	b.n	800079a <convert_data_bt+0xd6>
		case 0x14: return 20; break; //9
 800078e:	2314      	movs	r3, #20
 8000790:	e003      	b.n	800079a <convert_data_bt+0xd6>
		case 0xFF: return 21;break; //repeat
 8000792:	2315      	movs	r3, #21
 8000794:	e001      	b.n	800079a <convert_data_bt+0xd6>
		default:  return -1; //err
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if(stato == 1){
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_ADC_ConvCpltCallback+0x34>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d10d      	bne.n	80007d4 <HAL_ADC_ConvCpltCallback+0x2c>
	  uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <HAL_ADC_ConvCpltCallback+0x38>)
 80007ba:	f001 f9fd 	bl	8001bb8 <HAL_ADC_GetValue>
 80007be:	4603      	mov	r3, r0
 80007c0:	81fb      	strh	r3, [r7, #14]
	  if(adc_val >= 2000) accendi_luce();
 80007c2:	89fb      	ldrh	r3, [r7, #14]
 80007c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80007c8:	d302      	bcc.n	80007d0 <HAL_ADC_ConvCpltCallback+0x28>
 80007ca:	f7ff fd23 	bl	8000214 <accendi_luce>
  	  else spegni_luce();
	 // HAL_TIM_Base_Start_IT(&htim4);
  }
}
 80007ce:	e001      	b.n	80007d4 <HAL_ADC_ConvCpltCallback+0x2c>
  	  else spegni_luce();
 80007d0:	f7ff fd14 	bl	80001fc <spegni_luce>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000580 	.word	0x20000580
 80007e0:	2000002c 	.word	0x2000002c

080007e4 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f2:	480c      	ldr	r0, [pc, #48]	; (8000824 <HAL_UART_RxCpltCallback+0x40>)
 80007f4:	f002 fd5a 	bl	80032ac <HAL_GPIO_WritePin>
	if(huart->Instance == huart4.Instance){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <HAL_UART_RxCpltCallback+0x44>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d10b      	bne.n	800081c <HAL_UART_RxCpltCallback+0x38>
		uint8_t data = recive_data_bt();
 8000804:	f7ff ff4e 	bl	80006a4 <recive_data_bt>
 8000808:	4603      	mov	r3, r0
 800080a:	73fb      	strb	r3, [r7, #15]
		int tasto_premuto = convert_data_bt(data);
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff58 	bl	80006c4 <convert_data_bt>
 8000814:	60b8      	str	r0, [r7, #8]
		gestisci_tasto(tasto_premuto);
 8000816:	68b8      	ldr	r0, [r7, #8]
 8000818:	f7ff fd12 	bl	8000240 <gestisci_tasto>
	}
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	48001000 	.word	0x48001000
 8000828:	20000210 	.word	0x20000210

0800082c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d115      	bne.n	8000868 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if(countdown == 0){
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10c      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x32>
			if(stato == 2){
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d104      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x2a>
				spegni_luce();
 800084c:	f7ff fcd6 	bl	80001fc <spegni_luce>
				config = 1;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
			}
			HAL_TIM_Base_Stop_IT(&htim3);
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000858:	f004 fd68 	bl	800532c <HAL_TIM_Base_Stop_IT>
		HAL_ADC_Start(&hadc1);
		HAL_TIM_Base_Stop_IT(&htim4);
		//HAL_ADC_PollForConversion(&hadc1,1000);
		//__HAL_TIM_SET_COUNTER(&htim4,0);
	}*/
}
 800085c:	e004      	b.n	8000868 <HAL_TIM_PeriodElapsedCallback+0x3c>
			countdown--;
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3b01      	subs	r3, #1
 8000864:	4a03      	ldr	r2, [pc, #12]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000178 	.word	0x20000178
 8000874:	20000588 	.word	0x20000588
 8000878:	20000580 	.word	0x20000580
 800087c:	20000584 	.word	0x20000584

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 fdda 	bl	800143c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f836 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 faca 	bl	8000e24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000890:	f000 f90a 	bl	8000aa8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000894:	f000 f948 	bl	8000b28 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000898:	f000 faa2 	bl	8000de0 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800089c:	f000 f982 	bl	8000ba4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008a0:	f000 f9ce 	bl	8000c40 <MX_TIM3_Init>
  MX_ADC1_Init();
 80008a4:	f000 f88e 	bl	80009c4 <MX_ADC1_Init>
  MX_TIM4_Init();
 80008a8:	f000 fa1a 	bl	8000ce0 <MX_TIM4_Init>
  MX_UART4_Init();
 80008ac:	f000 fa68 	bl	8000d80 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim2);
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <main+0x64>)
 80008b2:	f004 fc18 	bl	80050e6 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim2);
 80008b6:	480b      	ldr	r0, [pc, #44]	; (80008e4 <main+0x64>)
 80008b8:	f004 fc6c 	bl	8005194 <HAL_TIM_Base_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, 0);
 80008bc:	2100      	movs	r1, #0
 80008be:	480a      	ldr	r0, [pc, #40]	; (80008e8 <main+0x68>)
 80008c0:	f001 fc98 	bl	80021f4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT (&hadc1);
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <main+0x68>)
 80008c6:	f001 f837 	bl	8001938 <HAL_ADC_Start_IT>


  HAL_UART_Receive_IT(&huart4, RX_BUFFER, BUFFER_LEN);
 80008ca:	2201      	movs	r2, #1
 80008cc:	4907      	ldr	r1, [pc, #28]	; (80008ec <main+0x6c>)
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <main+0x70>)
 80008d0:	f005 f982 	bl	8005bd8 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <main+0x74>)
 80008dc:	f002 fce6 	bl	80032ac <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <main+0x60>
 80008e2:	bf00      	nop
 80008e4:	2000012c 	.word	0x2000012c
 80008e8:	2000002c 	.word	0x2000002c
 80008ec:	20000028 	.word	0x20000028
 80008f0:	20000210 	.word	0x20000210
 80008f4:	48001000 	.word	0x48001000

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09e      	sub	sp, #120	; 0x78
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000902:	2228      	movs	r2, #40	; 0x28
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f006 fb3a 	bl	8006f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	223c      	movs	r2, #60	; 0x3c
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f006 fb2c 	bl	8006f80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000928:	2303      	movs	r3, #3
 800092a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800092c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000930:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000936:	2301      	movs	r3, #1
 8000938:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	2310      	movs	r3, #16
 800093c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000946:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000948:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800094c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fef8 	bl	8003748 <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800095e:	f000 faff 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	230f      	movs	r3, #15
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000966:	2302      	movs	r3, #2
 8000968:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000978:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800097c:	2101      	movs	r1, #1
 800097e:	4618      	mov	r0, r3
 8000980:	f003 ff20 	bl	80047c4 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800098a:	f000 fae9 	bl	8000f60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <SystemClock_Config+0xc8>)
 8000990:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80009a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 f941 	bl	8004c30 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009b4:	f000 fad4 	bl	8000f60 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3778      	adds	r7, #120	; 0x78
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	000200a8 	.word	0x000200a8

080009c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009e6:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 80009e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a0e:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_TRGO;
 8000a16:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a18:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a34:	2204      	movs	r2, #4
 8000a36:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a44:	4817      	ldr	r0, [pc, #92]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a46:	f000 fd97 	bl	8001578 <HAL_ADC_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a50:	f000 fa86 	bl	8000f60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a60:	f001 ff4e 	bl	8002900 <HAL_ADCEx_MultiModeConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a6a:	f000 fa79 	bl	8000f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <MX_ADC1_Init+0xe0>)
 8000a8c:	f001 fc4c 	bl	8002328 <HAL_ADC_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000a96:	f000 fa63 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000002c 	.word	0x2000002c

08000aa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <MX_I2C1_Init+0x78>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <MX_I2C1_Init+0x7c>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae2:	480e      	ldr	r0, [pc, #56]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ae4:	f002 fc2c 	bl	8003340 <HAL_I2C_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aee:	f000 fa37 	bl	8000f60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000af6:	f002 fcb2 	bl	800345e <HAL_I2CEx_ConfigAnalogFilter>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b00:	f000 fa2e 	bl	8000f60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000b08:	f002 fcf4 	bl	80034f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b12:	f000 fa25 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000007c 	.word	0x2000007c
 8000b20:	40005400 	.word	0x40005400
 8000b24:	2000090e 	.word	0x2000090e

08000b28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <MX_SPI1_Init+0x78>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b5e:	2208      	movs	r2, #8
 8000b60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b76:	2207      	movs	r2, #7
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b82:	2208      	movs	r2, #8
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b88:	f004 fa02 	bl	8004f90 <HAL_SPI_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b92:	f000 f9e5 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000c8 	.word	0x200000c8
 8000ba0:	40013000 	.word	0x40013000

08000ba4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_TIM2_Init+0x98>)
 8000bc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_TIM2_Init+0x98>)
 8000bcc:	222f      	movs	r2, #47	; 0x2f
 8000bce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_TIM2_Init+0x98>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_TIM2_Init+0x98>)
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_TIM2_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_TIM2_Init+0x98>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bea:	4814      	ldr	r0, [pc, #80]	; (8000c3c <MX_TIM2_Init+0x98>)
 8000bec:	f004 fa7b 	bl	80050e6 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bf6:	f000 f9b3 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_TIM2_Init+0x98>)
 8000c08:	f004 fcde 	bl	80055c8 <HAL_TIM_ConfigClockSource>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c12:	f000 f9a5 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <MX_TIM2_Init+0x98>)
 8000c24:	f004 feec 	bl	8005a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c2e:	f000 f997 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000012c 	.word	0x2000012c

08000c40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_TIM3_Init+0x98>)
 8000c60:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <MX_TIM3_Init+0x9c>)
 8000c62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_TIM3_Init+0x98>)
 8000c66:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000c6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_TIM3_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_TIM3_Init+0x98>)
 8000c74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_TIM3_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_TIM3_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c86:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <MX_TIM3_Init+0x98>)
 8000c88:	f004 fa2d 	bl	80050e6 <HAL_TIM_Base_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000c92:	f000 f965 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <MX_TIM3_Init+0x98>)
 8000ca4:	f004 fc90 	bl	80055c8 <HAL_TIM_ConfigClockSource>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000cae:	f000 f957 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_TIM3_Init+0x98>)
 8000cc0:	f004 fe9e 	bl	8005a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000cca:	f000 f949 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	3720      	adds	r7, #32
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000178 	.word	0x20000178
 8000cdc:	40000400 	.word	0x40000400

08000ce0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <MX_TIM4_Init+0x98>)
 8000d00:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <MX_TIM4_Init+0x9c>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_TIM4_Init+0x98>)
 8000d06:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000d0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_TIM4_Init+0x98>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_TIM4_Init+0x98>)
 8000d14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_TIM4_Init+0x98>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM4_Init+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d26:	4814      	ldr	r0, [pc, #80]	; (8000d78 <MX_TIM4_Init+0x98>)
 8000d28:	f004 f9dd 	bl	80050e6 <HAL_TIM_Base_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000d32:	f000 f915 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MX_TIM4_Init+0x98>)
 8000d44:	f004 fc40 	bl	80055c8 <HAL_TIM_ConfigClockSource>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000d4e:	f000 f907 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d52:	2320      	movs	r3, #32
 8000d54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <MX_TIM4_Init+0x98>)
 8000d60:	f004 fe4e 	bl	8005a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000d6a:	f000 f8f9 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200001c4 	.word	0x200001c4
 8000d7c:	40000800 	.word	0x40000800

08000d80 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_UART4_Init+0x58>)
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <MX_UART4_Init+0x5c>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_UART4_Init+0x58>)
 8000d8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_UART4_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_UART4_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_UART4_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_UART4_Init+0x58>)
 8000da6:	2204      	movs	r2, #4
 8000da8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_UART4_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_UART4_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_UART4_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_UART4_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_UART4_Init+0x58>)
 8000dc4:	f004 feba 	bl	8005b3c <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000dce:	f000 f8c7 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000210 	.word	0x20000210
 8000ddc:	40004c00 	.word	0x40004c00

08000de0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_USB_PCD_Init+0x3c>)
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <MX_USB_PCD_Init+0x40>)
 8000de8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_USB_PCD_Init+0x3c>)
 8000dec:	2208      	movs	r2, #8
 8000dee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <MX_USB_PCD_Init+0x3c>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_USB_PCD_Init+0x3c>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <MX_USB_PCD_Init+0x3c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_USB_PCD_Init+0x3c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_USB_PCD_Init+0x3c>)
 8000e0a:	f002 fbbf 	bl	800358c <HAL_PCD_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000e14:	f000 f8a4 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000294 	.word	0x20000294
 8000e20:	40005c00 	.word	0x40005c00

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e3a:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a45      	ldr	r2, [pc, #276]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e44:	6153      	str	r3, [r2, #20]
 8000e46:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b40      	ldr	r3, [pc, #256]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a3f      	ldr	r2, [pc, #252]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e5c:	6153      	str	r3, [r2, #20]
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6a:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a39      	ldr	r2, [pc, #228]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a33      	ldr	r2, [pc, #204]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a2d      	ldr	r2, [pc, #180]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000eb8:	4827      	ldr	r0, [pc, #156]	; (8000f58 <MX_GPIO_Init+0x134>)
 8000eba:	f002 f9f7 	bl	80032ac <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	4826      	ldr	r0, [pc, #152]	; (8000f5c <MX_GPIO_Init+0x138>)
 8000ec4:	f002 f9f2 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000ec8:	2337      	movs	r3, #55	; 0x37
 8000eca:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ecc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	481e      	ldr	r0, [pc, #120]	; (8000f58 <MX_GPIO_Init+0x134>)
 8000ede:	f002 f853 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ee2:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000ee6:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4817      	ldr	r0, [pc, #92]	; (8000f58 <MX_GPIO_Init+0x134>)
 8000efc:	f002 f844 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f00:	2301      	movs	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_GPIO_Init+0x138>)
 8000f18:	f002 f836 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f002 f827 	bl	8002f88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	2028      	movs	r0, #40	; 0x28
 8000f40:	f001 ff75 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f44:	2028      	movs	r0, #40	; 0x28
 8000f46:	f001 ff8e 	bl	8002e66 <HAL_NVIC_EnableIRQ>

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48001000 	.word	0x48001000
 8000f5c:	48000400 	.word	0x48000400

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6193      	str	r3, [r2, #24]
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000fa2:	2006      	movs	r0, #6
 8000fa4:	f001 ff38 	bl	8002e18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fd4:	d12c      	bne.n	8001030 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_ADC_MspInit+0x84>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_ADC_MspInit+0x84>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6153      	str	r3, [r2, #20]
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_ADC_MspInit+0x84>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_ADC_MspInit+0x84>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a11      	ldr	r2, [pc, #68]	; (8001038 <HAL_ADC_MspInit+0x84>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_ADC_MspInit+0x84>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001006:	2301      	movs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100a:	2303      	movs	r3, #3
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101c:	f001 ffb4 	bl	8002f88 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2012      	movs	r0, #18
 8001026:	f001 ff02 	bl	8002e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800102a:	2012      	movs	r0, #18
 800102c:	f001 ff1b 	bl	8002e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <HAL_I2C_MspInit+0x7c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d127      	bne.n	80010ae <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_I2C_MspInit+0x80>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a16      	ldr	r2, [pc, #88]	; (80010bc <HAL_I2C_MspInit+0x80>)
 8001064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_I2C_MspInit+0x80>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001076:	23c0      	movs	r3, #192	; 0xc0
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107a:	2312      	movs	r3, #18
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001086:	2304      	movs	r3, #4
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <HAL_I2C_MspInit+0x84>)
 8001092:	f001 ff79 	bl	8002f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_I2C_MspInit+0x80>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_I2C_MspInit+0x80>)
 800109c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_I2C_MspInit+0x80>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40005400 	.word	0x40005400
 80010bc:	40021000 	.word	0x40021000
 80010c0:	48000400 	.word	0x48000400

080010c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_SPI_MspInit+0x7c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d128      	bne.n	8001138 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_SPI_MspInit+0x80>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	4a16      	ldr	r2, [pc, #88]	; (8001144 <HAL_SPI_MspInit+0x80>)
 80010ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010f0:	6193      	str	r3, [r2, #24]
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_SPI_MspInit+0x80>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_SPI_MspInit+0x80>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <HAL_SPI_MspInit+0x80>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_SPI_MspInit+0x80>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001116:	23e0      	movs	r3, #224	; 0xe0
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001126:	2305      	movs	r3, #5
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f001 ff28 	bl	8002f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40013000 	.word	0x40013000
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001158:	d10c      	bne.n	8001174 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <HAL_TIM_Base_MspInit+0x9c>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <HAL_TIM_Base_MspInit+0x9c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_TIM_Base_MspInit+0x9c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001172:	e032      	b.n	80011da <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <HAL_TIM_Base_MspInit+0xa0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d114      	bne.n	80011a8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_TIM_Base_MspInit+0x9c>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_TIM_Base_MspInit+0x9c>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_TIM_Base_MspInit+0x9c>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	201d      	movs	r0, #29
 800119c:	f001 fe47 	bl	8002e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011a0:	201d      	movs	r0, #29
 80011a2:	f001 fe60 	bl	8002e66 <HAL_NVIC_EnableIRQ>
}
 80011a6:	e018      	b.n	80011da <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_TIM_Base_MspInit+0xa4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d113      	bne.n	80011da <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_TIM_Base_MspInit+0x9c>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <HAL_TIM_Base_MspInit+0x9c>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_TIM_Base_MspInit+0x9c>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	201e      	movs	r0, #30
 80011d0:	f001 fe2d 	bl	8002e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011d4:	201e      	movs	r0, #30
 80011d6:	f001 fe46 	bl	8002e66 <HAL_NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40000400 	.word	0x40000400
 80011ec:	40000800 	.word	0x40000800

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <HAL_UART_MspInit+0x8c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d130      	bne.n	8001274 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_UART_MspInit+0x90>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a1a      	ldr	r2, [pc, #104]	; (8001280 <HAL_UART_MspInit+0x90>)
 8001218:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_UART_MspInit+0x90>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_UART_MspInit+0x90>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_UART_MspInit+0x90>)
 8001230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001234:	6153      	str	r3, [r2, #20]
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_UART_MspInit+0x90>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001242:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001254:	2305      	movs	r3, #5
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4809      	ldr	r0, [pc, #36]	; (8001284 <HAL_UART_MspInit+0x94>)
 8001260:	f001 fe92 	bl	8002f88 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2034      	movs	r0, #52	; 0x34
 800126a:	f001 fde0 	bl	8002e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800126e:	2034      	movs	r0, #52	; 0x34
 8001270:	f001 fdf9 	bl	8002e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40004c00 	.word	0x40004c00
 8001280:	40021000 	.word	0x40021000
 8001284:	48000800 	.word	0x48000800

08001288 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a18      	ldr	r2, [pc, #96]	; (8001308 <HAL_PCD_MspInit+0x80>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d129      	bne.n	80012fe <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_PCD_MspInit+0x84>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_PCD_MspInit+0x84>)
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	6153      	str	r3, [r2, #20]
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_PCD_MspInit+0x84>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80012c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80012d4:	230e      	movs	r3, #14
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e2:	f001 fe51 	bl	8002f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_PCD_MspInit+0x84>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_PCD_MspInit+0x84>)
 80012ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_PCD_MspInit+0x84>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40005c00 	.word	0x40005c00
 800130c:	40021000 	.word	0x40021000

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 f8b4 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <ADC1_2_IRQHandler+0x10>)
 800136a:	f000 fc33 	bl	8001bd4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000002c 	.word	0x2000002c

08001378 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <TIM3_IRQHandler+0x10>)
 800137e:	f004 f804 	bl	800538a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000178 	.word	0x20000178

0800138c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <TIM4_IRQHandler+0x10>)
 8001392:	f003 fffa 	bl	800538a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200001c4 	.word	0x200001c4

080013a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013a8:	f001 ffb2 	bl	8003310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <UART4_IRQHandler+0x10>)
 80013b6:	f004 fc5d 	bl	8005c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000210 	.word	0x20000210

080013c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SystemInit+0x20>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <SystemInit+0x20>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001420 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ee:	490e      	ldr	r1, [pc, #56]	; (8001428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <LoopForever+0xe>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001404:	4c0b      	ldr	r4, [pc, #44]	; (8001434 <LoopForever+0x16>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001412:	f7ff ffd7 	bl	80013c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001416:	f005 fd8f 	bl	8006f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800141a:	f7ff fa31 	bl	8000880 <main>

0800141e <LoopForever>:

LoopForever:
    b LoopForever
 800141e:	e7fe      	b.n	800141e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001420:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800142c:	08006fe8 	.word	0x08006fe8
  ldr r2, =_sbss
 8001430:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001434:	20000590 	.word	0x20000590

08001438 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC3_IRQHandler>
	...

0800143c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_Init+0x28>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <HAL_Init+0x28>)
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f001 fce3 	bl	8002e18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f808 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff fd88 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40022000 	.word	0x40022000

08001468 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f001 fcfb 	bl	8002e82 <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f001 fcc3 	bl	8002e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000004 	.word	0x20000004

080014c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000008 	.word	0x20000008
 80014ec:	2000058c 	.word	0x2000058c

080014f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	2000058c 	.word	0x2000058c

08001508 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff ffee 	bl	80014f0 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_Delay+0x44>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffde 	bl	80014f0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008

08001550 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b09a      	sub	sp, #104	; 0x68
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e1c9      	b.n	800192c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d176      	bne.n	8001698 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d152      	bne.n	8001658 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fcf1 	bl	8000fb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d13b      	bne.n	8001658 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f001 fae3 	bl	8002bac <ADC_Disable>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d12f      	bne.n	8001658 <HAL_ADC_Init+0xe0>
 80015f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d12b      	bne.n	8001658 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001608:	f023 0302 	bic.w	r3, r3, #2
 800160c:	f043 0202 	orr.w	r2, r3, #2
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001622:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001632:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001634:	4b86      	ldr	r3, [pc, #536]	; (8001850 <HAL_ADC_Init+0x2d8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a86      	ldr	r2, [pc, #536]	; (8001854 <HAL_ADC_Init+0x2dc>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0c9a      	lsrs	r2, r3, #18
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800164a:	e002      	b.n	8001652 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3b01      	subs	r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f9      	bne.n	800164c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001674:	d110      	bne.n	8001698 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f023 0312 	bic.w	r3, r3, #18
 800167e:	f043 0210 	orr.w	r2, r3, #16
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f040 8136 	bne.w	8001912 <HAL_ADC_Init+0x39a>
 80016a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 8131 	bne.w	8001912 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 8129 	bne.w	8001912 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016c8:	f043 0202 	orr.w	r2, r3, #2
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d8:	d004      	beq.n	80016e4 <HAL_ADC_Init+0x16c>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a5e      	ldr	r2, [pc, #376]	; (8001858 <HAL_ADC_Init+0x2e0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_Init+0x170>
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HAL_ADC_Init+0x2e4>)
 80016e6:	e000      	b.n	80016ea <HAL_ADC_Init+0x172>
 80016e8:	4b5d      	ldr	r3, [pc, #372]	; (8001860 <HAL_ADC_Init+0x2e8>)
 80016ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f4:	d102      	bne.n	80016fc <HAL_ADC_Init+0x184>
 80016f6:	4b58      	ldr	r3, [pc, #352]	; (8001858 <HAL_ADC_Init+0x2e0>)
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e01a      	b.n	8001732 <HAL_ADC_Init+0x1ba>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a55      	ldr	r2, [pc, #340]	; (8001858 <HAL_ADC_Init+0x2e0>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d103      	bne.n	800170e <HAL_ADC_Init+0x196>
 8001706:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e011      	b.n	8001732 <HAL_ADC_Init+0x1ba>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a54      	ldr	r2, [pc, #336]	; (8001864 <HAL_ADC_Init+0x2ec>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d102      	bne.n	800171e <HAL_ADC_Init+0x1a6>
 8001718:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_ADC_Init+0x2f0>)
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e009      	b.n	8001732 <HAL_ADC_Init+0x1ba>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a51      	ldr	r2, [pc, #324]	; (8001868 <HAL_ADC_Init+0x2f0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d102      	bne.n	800172e <HAL_ADC_Init+0x1b6>
 8001728:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <HAL_ADC_Init+0x2ec>)
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e001      	b.n	8001732 <HAL_ADC_Init+0x1ba>
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d108      	bne.n	8001752 <HAL_ADC_Init+0x1da>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Init+0x1da>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_ADC_Init+0x1dc>
 8001752:	2300      	movs	r3, #0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11c      	bne.n	8001792 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001758:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	d010      	beq.n	8001780 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <HAL_ADC_Init+0x202>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_ADC_Init+0x202>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_ADC_Init+0x204>
 800177a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800177c:	2b00      	cmp	r3, #0
 800177e:	d108      	bne.n	8001792 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	431a      	orrs	r2, r3
 800178e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001790:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7e5b      	ldrb	r3, [r3, #25]
 8001796:	035b      	lsls	r3, r3, #13
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800179c:	2a01      	cmp	r2, #1
 800179e:	d002      	beq.n	80017a6 <HAL_ADC_Init+0x22e>
 80017a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a4:	e000      	b.n	80017a8 <HAL_ADC_Init+0x230>
 80017a6:	2200      	movs	r2, #0
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017b8:	4313      	orrs	r3, r2
 80017ba:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d11b      	bne.n	80017fe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7e5b      	ldrb	r3, [r3, #25]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d109      	bne.n	80017e2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	3b01      	subs	r3, #1
 80017d4:	045a      	lsls	r2, r3, #17
 80017d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017d8:	4313      	orrs	r3, r2
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	663b      	str	r3, [r7, #96]	; 0x60
 80017e0:	e00d      	b.n	80017fe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80017ea:	f043 0220 	orr.w	r2, r3, #32
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	2b01      	cmp	r3, #1
 8001804:	d03a      	beq.n	800187c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <HAL_ADC_Init+0x2ec>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d004      	beq.n	800181a <HAL_ADC_Init+0x2a2>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <HAL_ADC_Init+0x2f0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d128      	bne.n	800186c <HAL_ADC_Init+0x2f4>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001822:	d012      	beq.n	800184a <HAL_ADC_Init+0x2d2>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800182c:	d00a      	beq.n	8001844 <HAL_ADC_Init+0x2cc>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001836:	d002      	beq.n	800183e <HAL_ADC_Init+0x2c6>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	e018      	b.n	8001870 <HAL_ADC_Init+0x2f8>
 800183e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001842:	e015      	b.n	8001870 <HAL_ADC_Init+0x2f8>
 8001844:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001848:	e012      	b.n	8001870 <HAL_ADC_Init+0x2f8>
 800184a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800184e:	e00f      	b.n	8001870 <HAL_ADC_Init+0x2f8>
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83
 8001858:	50000100 	.word	0x50000100
 800185c:	50000300 	.word	0x50000300
 8001860:	50000700 	.word	0x50000700
 8001864:	50000400 	.word	0x50000400
 8001868:	50000500 	.word	0x50000500
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001874:	4313      	orrs	r3, r2
 8001876:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001878:	4313      	orrs	r3, r2
 800187a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d114      	bne.n	80018b4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001898:	f023 0302 	bic.w	r3, r3, #2
 800189c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7e1b      	ldrb	r3, [r3, #24]
 80018a2:	039a      	lsls	r2, r3, #14
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4313      	orrs	r3, r2
 80018ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018b0:	4313      	orrs	r3, r2
 80018b2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <HAL_ADC_Init+0x3bc>)
 80018bc:	4013      	ands	r3, r2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018c4:	430b      	orrs	r3, r1
 80018c6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d10c      	bne.n	80018ea <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f023 010f 	bic.w	r1, r3, #15
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	1e5a      	subs	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
 80018e8:	e007      	b.n	80018fa <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 020f 	bic.w	r2, r2, #15
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f023 0303 	bic.w	r3, r3, #3
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
 8001910:	e00a      	b.n	8001928 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f023 0312 	bic.w	r3, r3, #18
 800191a:	f043 0210 	orr.w	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001922:	2301      	movs	r3, #1
 8001924:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001928:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800192c:	4618      	mov	r0, r3
 800192e:	3768      	adds	r7, #104	; 0x68
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	fff0c007 	.word	0xfff0c007

08001938 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 8123 	bne.w	8001b9a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Start_IT+0x2a>
 800195e:	2302      	movs	r3, #2
 8001960:	e11e      	b.n	8001ba0 <HAL_ADC_Start_IT+0x268>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f001 f8ba 	bl	8002ae4 <ADC_Enable>
 8001970:	4603      	mov	r3, r0
 8001972:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 810a 	bne.w	8001b90 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001998:	d004      	beq.n	80019a4 <HAL_ADC_Start_IT+0x6c>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a82      	ldr	r2, [pc, #520]	; (8001ba8 <HAL_ADC_Start_IT+0x270>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d106      	bne.n	80019b2 <HAL_ADC_Start_IT+0x7a>
 80019a4:	4b81      	ldr	r3, [pc, #516]	; (8001bac <HAL_ADC_Start_IT+0x274>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d010      	beq.n	80019d2 <HAL_ADC_Start_IT+0x9a>
 80019b0:	e005      	b.n	80019be <HAL_ADC_Start_IT+0x86>
 80019b2:	4b7f      	ldr	r3, [pc, #508]	; (8001bb0 <HAL_ADC_Start_IT+0x278>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_ADC_Start_IT+0x9a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c6:	d004      	beq.n	80019d2 <HAL_ADC_Start_IT+0x9a>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a79      	ldr	r2, [pc, #484]	; (8001bb4 <HAL_ADC_Start_IT+0x27c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d115      	bne.n	80019fe <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d036      	beq.n	8001a5a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019fc:	e02d      	b.n	8001a5a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a12:	d004      	beq.n	8001a1e <HAL_ADC_Start_IT+0xe6>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a63      	ldr	r2, [pc, #396]	; (8001ba8 <HAL_ADC_Start_IT+0x270>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10a      	bne.n	8001a34 <HAL_ADC_Start_IT+0xfc>
 8001a1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	e008      	b.n	8001a46 <HAL_ADC_Start_IT+0x10e>
 8001a34:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <HAL_ADC_Start_IT+0x27c>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a66:	d106      	bne.n	8001a76 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f023 0206 	bic.w	r2, r3, #6
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	645a      	str	r2, [r3, #68]	; 0x44
 8001a74:	e002      	b.n	8001a7c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	221c      	movs	r2, #28
 8001a8a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d110      	bne.n	8001ab6 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0204 	bic.w	r2, r2, #4
 8001aa2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0208 	orr.w	r2, r2, #8
 8001ab2:	605a      	str	r2, [r3, #4]
          break;
 8001ab4:	e008      	b.n	8001ac8 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 020c 	orr.w	r2, r2, #12
 8001ac4:	605a      	str	r2, [r3, #4]
          break;
 8001ac6:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d107      	bne.n	8001ae0 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0210 	bic.w	r2, r2, #16
 8001ade:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_Start_IT+0x1bc>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a2e      	ldr	r2, [pc, #184]	; (8001ba8 <HAL_ADC_Start_IT+0x270>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d106      	bne.n	8001b02 <HAL_ADC_Start_IT+0x1ca>
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <HAL_ADC_Start_IT+0x274>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d03e      	beq.n	8001b7e <HAL_ADC_Start_IT+0x246>
 8001b00:	e005      	b.n	8001b0e <HAL_ADC_Start_IT+0x1d6>
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_ADC_Start_IT+0x278>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d037      	beq.n	8001b7e <HAL_ADC_Start_IT+0x246>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b16:	d004      	beq.n	8001b22 <HAL_ADC_Start_IT+0x1ea>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <HAL_ADC_Start_IT+0x270>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d106      	bne.n	8001b30 <HAL_ADC_Start_IT+0x1f8>
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_ADC_Start_IT+0x274>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d027      	beq.n	8001b7e <HAL_ADC_Start_IT+0x246>
 8001b2e:	e005      	b.n	8001b3c <HAL_ADC_Start_IT+0x204>
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_ADC_Start_IT+0x278>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d020      	beq.n	8001b7e <HAL_ADC_Start_IT+0x246>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b44:	d004      	beq.n	8001b50 <HAL_ADC_Start_IT+0x218>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_ADC_Start_IT+0x270>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d106      	bne.n	8001b5e <HAL_ADC_Start_IT+0x226>
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_ADC_Start_IT+0x274>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d010      	beq.n	8001b7e <HAL_ADC_Start_IT+0x246>
 8001b5c:	e005      	b.n	8001b6a <HAL_ADC_Start_IT+0x232>
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_ADC_Start_IT+0x278>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2b09      	cmp	r3, #9
 8001b68:	d009      	beq.n	8001b7e <HAL_ADC_Start_IT+0x246>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b72:	d004      	beq.n	8001b7e <HAL_ADC_Start_IT+0x246>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_ADC_Start_IT+0x27c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10f      	bne.n	8001b9e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0204 	orr.w	r2, r2, #4
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	e006      	b.n	8001b9e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b98:	e001      	b.n	8001b9e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	50000100 	.word	0x50000100
 8001bac:	50000300 	.word	0x50000300
 8001bb0:	50000700 	.word	0x50000700
 8001bb4:	50000400 	.word	0x50000400

08001bb8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d106      	bne.n	8001c04 <HAL_ADC_IRQHandler+0x30>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d00f      	beq.n	8001c24 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	f040 80c0 	bne.w	8001d94 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	f040 80b8 	bne.w	8001d94 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c44:	d004      	beq.n	8001c50 <HAL_ADC_IRQHandler+0x7c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a8e      	ldr	r2, [pc, #568]	; (8001e84 <HAL_ADC_IRQHandler+0x2b0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d106      	bne.n	8001c5e <HAL_ADC_IRQHandler+0x8a>
 8001c50:	4b8d      	ldr	r3, [pc, #564]	; (8001e88 <HAL_ADC_IRQHandler+0x2b4>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d03e      	beq.n	8001cda <HAL_ADC_IRQHandler+0x106>
 8001c5c:	e005      	b.n	8001c6a <HAL_ADC_IRQHandler+0x96>
 8001c5e:	4b8b      	ldr	r3, [pc, #556]	; (8001e8c <HAL_ADC_IRQHandler+0x2b8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d037      	beq.n	8001cda <HAL_ADC_IRQHandler+0x106>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c72:	d004      	beq.n	8001c7e <HAL_ADC_IRQHandler+0xaa>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a82      	ldr	r2, [pc, #520]	; (8001e84 <HAL_ADC_IRQHandler+0x2b0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d106      	bne.n	8001c8c <HAL_ADC_IRQHandler+0xb8>
 8001c7e:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <HAL_ADC_IRQHandler+0x2b4>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d027      	beq.n	8001cda <HAL_ADC_IRQHandler+0x106>
 8001c8a:	e005      	b.n	8001c98 <HAL_ADC_IRQHandler+0xc4>
 8001c8c:	4b7f      	ldr	r3, [pc, #508]	; (8001e8c <HAL_ADC_IRQHandler+0x2b8>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d020      	beq.n	8001cda <HAL_ADC_IRQHandler+0x106>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca0:	d004      	beq.n	8001cac <HAL_ADC_IRQHandler+0xd8>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a77      	ldr	r2, [pc, #476]	; (8001e84 <HAL_ADC_IRQHandler+0x2b0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d106      	bne.n	8001cba <HAL_ADC_IRQHandler+0xe6>
 8001cac:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_ADC_IRQHandler+0x2b4>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2b09      	cmp	r3, #9
 8001cb6:	d010      	beq.n	8001cda <HAL_ADC_IRQHandler+0x106>
 8001cb8:	e005      	b.n	8001cc6 <HAL_ADC_IRQHandler+0xf2>
 8001cba:	4b74      	ldr	r3, [pc, #464]	; (8001e8c <HAL_ADC_IRQHandler+0x2b8>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2b09      	cmp	r3, #9
 8001cc4:	d009      	beq.n	8001cda <HAL_ADC_IRQHandler+0x106>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cce:	d004      	beq.n	8001cda <HAL_ADC_IRQHandler+0x106>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a6e      	ldr	r2, [pc, #440]	; (8001e90 <HAL_ADC_IRQHandler+0x2bc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d104      	bne.n	8001ce4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	e00f      	b.n	8001d04 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cec:	d004      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0x124>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a64      	ldr	r2, [pc, #400]	; (8001e84 <HAL_ADC_IRQHandler+0x2b0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d102      	bne.n	8001cfe <HAL_ADC_IRQHandler+0x12a>
 8001cf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cfc:	e000      	b.n	8001d00 <HAL_ADC_IRQHandler+0x12c>
 8001cfe:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <HAL_ADC_IRQHandler+0x2bc>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d139      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d134      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d12d      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d11a      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 020c 	bic.w	r2, r2, #12
 8001d46:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d112      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d6c:	e00b      	b.n	8001d86 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe fd0e 	bl	80007a8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	220c      	movs	r2, #12
 8001d92:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d106      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x1dc>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d00f      	beq.n	8001dd0 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001dba:	2b40      	cmp	r3, #64	; 0x40
 8001dbc:	f040 8143 	bne.w	8002046 <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	2b40      	cmp	r3, #64	; 0x40
 8001dcc:	f040 813b 	bne.w	8002046 <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de4:	d004      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x21c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <HAL_ADC_IRQHandler+0x2b0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d106      	bne.n	8001dfe <HAL_ADC_IRQHandler+0x22a>
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_ADC_IRQHandler+0x2b4>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d03e      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x2a6>
 8001dfc:	e005      	b.n	8001e0a <HAL_ADC_IRQHandler+0x236>
 8001dfe:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <HAL_ADC_IRQHandler+0x2b8>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d037      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x2a6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e12:	d004      	beq.n	8001e1e <HAL_ADC_IRQHandler+0x24a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_ADC_IRQHandler+0x2b0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d106      	bne.n	8001e2c <HAL_ADC_IRQHandler+0x258>
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_ADC_IRQHandler+0x2b4>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d027      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x2a6>
 8001e2a:	e005      	b.n	8001e38 <HAL_ADC_IRQHandler+0x264>
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_ADC_IRQHandler+0x2b8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d020      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x2a6>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e40:	d004      	beq.n	8001e4c <HAL_ADC_IRQHandler+0x278>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HAL_ADC_IRQHandler+0x2b0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d106      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x286>
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_ADC_IRQHandler+0x2b4>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d010      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x2a6>
 8001e58:	e005      	b.n	8001e66 <HAL_ADC_IRQHandler+0x292>
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_ADC_IRQHandler+0x2b8>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	2b09      	cmp	r3, #9
 8001e64:	d009      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x2a6>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e6e:	d004      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x2a6>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <HAL_ADC_IRQHandler+0x2bc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10c      	bne.n	8001e94 <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	e017      	b.n	8001eb4 <HAL_ADC_IRQHandler+0x2e0>
 8001e84:	50000100 	.word	0x50000100
 8001e88:	50000300 	.word	0x50000300
 8001e8c:	50000700 	.word	0x50000700
 8001e90:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x2d4>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a5b      	ldr	r2, [pc, #364]	; (8002010 <HAL_ADC_IRQHandler+0x43c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d102      	bne.n	8001eae <HAL_ADC_IRQHandler+0x2da>
 8001ea8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001eac:	e000      	b.n	8001eb0 <HAL_ADC_IRQHandler+0x2dc>
 8001eae:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_ADC_IRQHandler+0x440>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 80ba 	bne.w	8002038 <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00d      	beq.n	8001eea <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f040 80ad 	bne.w	8002038 <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f040 80a7 	bne.w	8002038 <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	f040 809f 	bne.w	8002038 <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f02:	d004      	beq.n	8001f0e <HAL_ADC_IRQHandler+0x33a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a41      	ldr	r2, [pc, #260]	; (8002010 <HAL_ADC_IRQHandler+0x43c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d106      	bne.n	8001f1c <HAL_ADC_IRQHandler+0x348>
 8001f0e:	4b42      	ldr	r3, [pc, #264]	; (8002018 <HAL_ADC_IRQHandler+0x444>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d03e      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x3c4>
 8001f1a:	e005      	b.n	8001f28 <HAL_ADC_IRQHandler+0x354>
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	; (800201c <HAL_ADC_IRQHandler+0x448>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d037      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x3c4>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f30:	d004      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x368>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a36      	ldr	r2, [pc, #216]	; (8002010 <HAL_ADC_IRQHandler+0x43c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d106      	bne.n	8001f4a <HAL_ADC_IRQHandler+0x376>
 8001f3c:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_ADC_IRQHandler+0x444>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d027      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x3c4>
 8001f48:	e005      	b.n	8001f56 <HAL_ADC_IRQHandler+0x382>
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_ADC_IRQHandler+0x448>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d020      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x3c4>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f5e:	d004      	beq.n	8001f6a <HAL_ADC_IRQHandler+0x396>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <HAL_ADC_IRQHandler+0x43c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d106      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x3a4>
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_ADC_IRQHandler+0x444>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	2b07      	cmp	r3, #7
 8001f74:	d010      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x3c4>
 8001f76:	e005      	b.n	8001f84 <HAL_ADC_IRQHandler+0x3b0>
 8001f78:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_ADC_IRQHandler+0x448>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	2b07      	cmp	r3, #7
 8001f82:	d009      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x3c4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f8c:	d004      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x3c4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a20      	ldr	r2, [pc, #128]	; (8002014 <HAL_ADC_IRQHandler+0x440>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d104      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	e00f      	b.n	8001fc2 <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001faa:	d004      	beq.n	8001fb6 <HAL_ADC_IRQHandler+0x3e2>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_ADC_IRQHandler+0x43c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d102      	bne.n	8001fbc <HAL_ADC_IRQHandler+0x3e8>
 8001fb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fba:	e000      	b.n	8001fbe <HAL_ADC_IRQHandler+0x3ea>
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_ADC_IRQHandler+0x440>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d135      	bne.n	8002038 <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d122      	bne.n	8002020 <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fe8:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d11a      	bne.n	8002038 <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
 800200e:	e013      	b.n	8002038 <HAL_ADC_IRQHandler+0x464>
 8002010:	50000100 	.word	0x50000100
 8002014:	50000400 	.word	0x50000400
 8002018:	50000300 	.word	0x50000300
 800201c:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f043 0210 	orr.w	r2, r3, #16
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f94d 	bl	80022d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2260      	movs	r2, #96	; 0x60
 8002044:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002050:	2b80      	cmp	r3, #128	; 0x80
 8002052:	d113      	bne.n	800207c <HAL_ADC_IRQHandler+0x4a8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	2b80      	cmp	r3, #128	; 0x80
 8002060:	d10c      	bne.n	800207c <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fa6e 	bl	8001550 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800208a:	d115      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x4e4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800209a:	d10d      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f929 	bl	8002300 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b6:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c6:	d115      	bne.n	80020f4 <HAL_ADC_IRQHandler+0x520>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d6:	d10d      	bne.n	80020f4 <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f915 	bl	8002314 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b10      	cmp	r3, #16
 8002100:	d149      	bne.n	8002196 <HAL_ADC_IRQHandler+0x5c2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b10      	cmp	r3, #16
 800210e:	d142      	bne.n	8002196 <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 8002118:	2301      	movs	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e025      	b.n	800216a <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002126:	d004      	beq.n	8002132 <HAL_ADC_IRQHandler+0x55e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2e      	ldr	r2, [pc, #184]	; (80021e8 <HAL_ADC_IRQHandler+0x614>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_ADC_IRQHandler+0x562>
 8002132:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <HAL_ADC_IRQHandler+0x618>)
 8002134:	e000      	b.n	8002138 <HAL_ADC_IRQHandler+0x564>
 8002136:	4b2e      	ldr	r3, [pc, #184]	; (80021f0 <HAL_ADC_IRQHandler+0x61c>)
 8002138:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d10a      	bne.n	800216a <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8002154:	2301      	movs	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e007      	b.n	800216a <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8002166:	2301      	movs	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10e      	bne.n	800218e <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	f043 0202 	orr.w	r2, r3, #2
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff f9eb 	bl	8001564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2210      	movs	r2, #16
 8002194:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a4:	d11b      	bne.n	80021de <HAL_ADC_IRQHandler+0x60a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b4:	d113      	bne.n	80021de <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f043 0208 	orr.w	r2, r3, #8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f887 	bl	80022ec <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	50000100 	.word	0x50000100
 80021ec:	50000300 	.word	0x50000300
 80021f0:	50000700 	.word	0x50000700

080021f4 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_ADCEx_Calibration_Start+0x1c>
 800220c:	2302      	movs	r3, #2
 800220e:	e05f      	b.n	80022d0 <HAL_ADCEx_Calibration_Start+0xdc>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fcc7 	bl	8002bac <ADC_Disable>
 800221e:	4603      	mov	r3, r0
 8002220:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d14e      	bne.n	80022c6 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800223c:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002252:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002262:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002264:	f7ff f944 	bl	80014f0 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800226a:	e01c      	b.n	80022a6 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800226c:	f7ff f940 	bl	80014f0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b0a      	cmp	r3, #10
 8002278:	d915      	bls.n	80022a6 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002288:	d10d      	bne.n	80022a6 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f023 0312 	bic.w	r3, r3, #18
 8002292:	f043 0210 	orr.w	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e014      	b.n	80022d0 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022b4:	d0da      	beq.n	800226c <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002328:	b480      	push	{r7}
 800232a:	b09b      	sub	sp, #108	; 0x6c
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x22>
 8002346:	2302      	movs	r3, #2
 8002348:	e2ca      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x5b8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	f040 82ae 	bne.w	80028be <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d81c      	bhi.n	80023a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	461a      	mov	r2, r3
 800237e:	231f      	movs	r3, #31
 8002380:	4093      	lsls	r3, r2
 8002382:	43db      	mvns	r3, r3
 8002384:	4019      	ands	r1, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa00 f203 	lsl.w	r2, r0, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
 80023a2:	e063      	b.n	800246c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b09      	cmp	r3, #9
 80023aa:	d81e      	bhi.n	80023ea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	3b1e      	subs	r3, #30
 80023c0:	221f      	movs	r2, #31
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4019      	ands	r1, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	3b1e      	subs	r3, #30
 80023dc:	fa00 f203 	lsl.w	r2, r0, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	635a      	str	r2, [r3, #52]	; 0x34
 80023e8:	e040      	b.n	800246c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b0e      	cmp	r3, #14
 80023f0:	d81e      	bhi.n	8002430 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	3b3c      	subs	r3, #60	; 0x3c
 8002406:	221f      	movs	r2, #31
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	4019      	ands	r1, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	3b3c      	subs	r3, #60	; 0x3c
 8002422:	fa00 f203 	lsl.w	r2, r0, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
 800242e:	e01d      	b.n	800246c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	3b5a      	subs	r3, #90	; 0x5a
 8002444:	221f      	movs	r2, #31
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	4019      	ands	r1, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	3b5a      	subs	r3, #90	; 0x5a
 8002460:	fa00 f203 	lsl.w	r2, r0, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 80e5 	bne.w	8002646 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b09      	cmp	r3, #9
 8002482:	d91c      	bls.n	80024be <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6999      	ldr	r1, [r3, #24]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	3b1e      	subs	r3, #30
 8002496:	2207      	movs	r2, #7
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	4019      	ands	r1, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6898      	ldr	r0, [r3, #8]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	3b1e      	subs	r3, #30
 80024b0:	fa00 f203 	lsl.w	r2, r0, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	619a      	str	r2, [r3, #24]
 80024bc:	e019      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6959      	ldr	r1, [r3, #20]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	2207      	movs	r2, #7
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	4019      	ands	r1, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6898      	ldr	r0, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	3b01      	subs	r3, #1
 8002510:	2b03      	cmp	r3, #3
 8002512:	d84f      	bhi.n	80025b4 <HAL_ADC_ConfigChannel+0x28c>
 8002514:	a201      	add	r2, pc, #4	; (adr r2, 800251c <HAL_ADC_ConfigChannel+0x1f4>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	0800252d 	.word	0x0800252d
 8002520:	0800254f 	.word	0x0800254f
 8002524:	08002571 	.word	0x08002571
 8002528:	08002593 	.word	0x08002593
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002532:	4b9a      	ldr	r3, [pc, #616]	; (800279c <HAL_ADC_ConfigChannel+0x474>)
 8002534:	4013      	ands	r3, r2
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	0691      	lsls	r1, r2, #26
 800253c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800253e:	430a      	orrs	r2, r1
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800254a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800254c:	e07e      	b.n	800264c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002554:	4b91      	ldr	r3, [pc, #580]	; (800279c <HAL_ADC_ConfigChannel+0x474>)
 8002556:	4013      	ands	r3, r2
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	0691      	lsls	r1, r2, #26
 800255e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002560:	430a      	orrs	r2, r1
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800256c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800256e:	e06d      	b.n	800264c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002576:	4b89      	ldr	r3, [pc, #548]	; (800279c <HAL_ADC_ConfigChannel+0x474>)
 8002578:	4013      	ands	r3, r2
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	0691      	lsls	r1, r2, #26
 8002580:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002582:	430a      	orrs	r2, r1
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800258e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002590:	e05c      	b.n	800264c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002598:	4b80      	ldr	r3, [pc, #512]	; (800279c <HAL_ADC_ConfigChannel+0x474>)
 800259a:	4013      	ands	r3, r2
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	0691      	lsls	r1, r2, #26
 80025a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025a4:	430a      	orrs	r2, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025b0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025b2:	e04b      	b.n	800264c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d107      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025d6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	069b      	lsls	r3, r3, #26
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d107      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025fa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002602:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	069b      	lsls	r3, r3, #26
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800261e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002626:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	069b      	lsls	r3, r3, #26
 8002630:	429a      	cmp	r2, r3
 8002632:	d10a      	bne.n	800264a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002642:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002644:	e001      	b.n	800264a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <HAL_ADC_ConfigChannel+0x324>
      break;
 800264a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d108      	bne.n	800266c <HAL_ADC_ConfigChannel+0x344>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x344>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_ADC_ConfigChannel+0x346>
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 8130 	bne.w	80028d4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d00f      	beq.n	800269c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2201      	movs	r2, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	400a      	ands	r2, r1
 8002696:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800269a:	e049      	b.n	8002730 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b09      	cmp	r3, #9
 80026bc:	d91c      	bls.n	80026f8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6999      	ldr	r1, [r3, #24]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	3b1b      	subs	r3, #27
 80026d0:	2207      	movs	r2, #7
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	4019      	ands	r1, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6898      	ldr	r0, [r3, #8]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	3b1b      	subs	r3, #27
 80026ea:	fa00 f203 	lsl.w	r2, r0, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	619a      	str	r2, [r3, #24]
 80026f6:	e01b      	b.n	8002730 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6959      	ldr	r1, [r3, #20]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	2207      	movs	r2, #7
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	4019      	ands	r1, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6898      	ldr	r0, [r3, #8]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	fa00 f203 	lsl.w	r2, r0, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002738:	d004      	beq.n	8002744 <HAL_ADC_ConfigChannel+0x41c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <HAL_ADC_ConfigChannel+0x478>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x420>
 8002744:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_ADC_ConfigChannel+0x47c>)
 8002746:	e000      	b.n	800274a <HAL_ADC_ConfigChannel+0x422>
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_ADC_ConfigChannel+0x480>)
 800274a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b10      	cmp	r3, #16
 8002752:	d105      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002764:	2b11      	cmp	r3, #17
 8002766:	d105      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00b      	beq.n	800278c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002778:	2b12      	cmp	r3, #18
 800277a:	f040 80ab 	bne.w	80028d4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800277e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 80a4 	bne.w	80028d4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002794:	d10a      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x484>
 8002796:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <HAL_ADC_ConfigChannel+0x478>)
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	e022      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x4ba>
 800279c:	83fff000 	.word	0x83fff000
 80027a0:	50000100 	.word	0x50000100
 80027a4:	50000300 	.word	0x50000300
 80027a8:	50000700 	.word	0x50000700
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a4e      	ldr	r2, [pc, #312]	; (80028ec <HAL_ADC_ConfigChannel+0x5c4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d103      	bne.n	80027be <HAL_ADC_ConfigChannel+0x496>
 80027b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e011      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x4ba>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a4b      	ldr	r2, [pc, #300]	; (80028f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d102      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x4a6>
 80027c8:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_ADC_ConfigChannel+0x5cc>)
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	e009      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x4ba>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a48      	ldr	r2, [pc, #288]	; (80028f4 <HAL_ADC_ConfigChannel+0x5cc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d102      	bne.n	80027de <HAL_ADC_ConfigChannel+0x4b6>
 80027d8:	4b45      	ldr	r3, [pc, #276]	; (80028f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	e001      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x4ba>
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d108      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x4da>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x4da>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_ADC_ConfigChannel+0x4dc>
 8002802:	2300      	movs	r3, #0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d150      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002808:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	d010      	beq.n	8002830 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d107      	bne.n	800282a <HAL_ADC_ConfigChannel+0x502>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_ADC_ConfigChannel+0x502>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_ADC_ConfigChannel+0x504>
 800282a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800282c:	2b00      	cmp	r3, #0
 800282e:	d13c      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b10      	cmp	r3, #16
 8002836:	d11d      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x54c>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002840:	d118      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800284a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800284e:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2a      	ldr	r2, [pc, #168]	; (80028fc <HAL_ADC_ConfigChannel+0x5d4>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	0c9a      	lsrs	r2, r3, #18
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002864:	e002      	b.n	800286c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3b01      	subs	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f9      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002872:	e02e      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b11      	cmp	r3, #17
 800287a:	d10b      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x56c>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002884:	d106      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800288e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002890:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002892:	e01e      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b12      	cmp	r3, #18
 800289a:	d11a      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800289c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028a8:	e013      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028bc:	e00a      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028d0:	e000      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028d2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	376c      	adds	r7, #108	; 0x6c
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	50000100 	.word	0x50000100
 80028f0:	50000400 	.word	0x50000400
 80028f4:	50000500 	.word	0x50000500
 80028f8:	20000000 	.word	0x20000000
 80028fc:	431bde83 	.word	0x431bde83

08002900 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002900:	b480      	push	{r7}
 8002902:	b099      	sub	sp, #100	; 0x64
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002918:	d102      	bne.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800291a:	4b6d      	ldr	r3, [pc, #436]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	e01a      	b.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6a      	ldr	r2, [pc, #424]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d103      	bne.n	8002932 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800292a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	e011      	b.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a67      	ldr	r2, [pc, #412]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d102      	bne.n	8002942 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800293c:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	e009      	b.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a64      	ldr	r2, [pc, #400]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d102      	bne.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800294c:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	e001      	b.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b0      	b.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800296a:	2302      	movs	r3, #2
 800296c:	e0a9      	b.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 808d 	bne.w	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 8086 	bne.w	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800299c:	d004      	beq.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a4b      	ldr	r2, [pc, #300]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80029a8:	4b4c      	ldr	r3, [pc, #304]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80029aa:	e000      	b.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80029ac:	4b4c      	ldr	r3, [pc, #304]	; (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80029ae:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d040      	beq.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80029b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029ca:	035b      	lsls	r3, r3, #13
 80029cc:	430b      	orrs	r3, r1
 80029ce:	431a      	orrs	r2, r3
 80029d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d108      	bne.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80029f4:	2300      	movs	r3, #0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d15c      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d107      	bne.n	8002a16 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002a16:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d14b      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a24:	f023 030f 	bic.w	r3, r3, #15
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	6811      	ldr	r1, [r2, #0]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	6892      	ldr	r2, [r2, #8]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a36:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a38:	e03c      	b.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a44:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d108      	bne.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d123      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002a88:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d112      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a96:	f023 030f 	bic.w	r3, r3, #15
 8002a9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a9c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a9e:	e009      	b.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ab2:	e000      	b.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002abe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3764      	adds	r7, #100	; 0x64
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	50000100 	.word	0x50000100
 8002ad4:	50000400 	.word	0x50000400
 8002ad8:	50000500 	.word	0x50000500
 8002adc:	50000300 	.word	0x50000300
 8002ae0:	50000700 	.word	0x50000700

08002ae4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d108      	bne.n	8002b10 <ADC_Enable+0x2c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <ADC_Enable+0x2c>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <ADC_Enable+0x2e>
 8002b10:	2300      	movs	r3, #0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d143      	bne.n	8002b9e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <ADC_Enable+0xc4>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00d      	beq.n	8002b40 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f043 0210 	orr.w	r2, r3, #16
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f043 0201 	orr.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e02f      	b.n	8002ba0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002b50:	f7fe fcce 	bl	80014f0 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b56:	e01b      	b.n	8002b90 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b58:	f7fe fcca 	bl	80014f0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d914      	bls.n	8002b90 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d00d      	beq.n	8002b90 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0210 	orr.w	r2, r3, #16
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e007      	b.n	8002ba0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d1dc      	bne.n	8002b58 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	8000003f 	.word	0x8000003f

08002bac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <ADC_Disable+0x2c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <ADC_Disable+0x2c>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <ADC_Disable+0x2e>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d047      	beq.n	8002c6e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 030d 	and.w	r3, r3, #13
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10f      	bne.n	8002c0c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0202 	orr.w	r2, r2, #2
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2203      	movs	r2, #3
 8002c02:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002c04:	f7fe fc74 	bl	80014f0 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c0a:	e029      	b.n	8002c60 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0210 	orr.w	r2, r3, #16
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e023      	b.n	8002c70 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c28:	f7fe fc62 	bl	80014f0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d914      	bls.n	8002c60 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d10d      	bne.n	8002c60 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f043 0210 	orr.w	r2, r3, #16
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e007      	b.n	8002c70 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d0dc      	beq.n	8002c28 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002caa:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	60d3      	str	r3, [r2, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0307 	and.w	r3, r3, #7
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db0b      	blt.n	8002d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	4907      	ldr	r1, [pc, #28]	; (8002d14 <__NVIC_EnableIRQ+0x38>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000e100 	.word	0xe000e100

08002d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	db0a      	blt.n	8002d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	490c      	ldr	r1, [pc, #48]	; (8002d64 <__NVIC_SetPriority+0x4c>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d40:	e00a      	b.n	8002d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4908      	ldr	r1, [pc, #32]	; (8002d68 <__NVIC_SetPriority+0x50>)
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	3b04      	subs	r3, #4
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	440b      	add	r3, r1
 8002d56:	761a      	strb	r2, [r3, #24]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000e100 	.word	0xe000e100
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	; 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f1c3 0307 	rsb	r3, r3, #7
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	bf28      	it	cs
 8002d8a:	2304      	movcs	r3, #4
 8002d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d902      	bls.n	8002d9c <NVIC_EncodePriority+0x30>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3b03      	subs	r3, #3
 8002d9a:	e000      	b.n	8002d9e <NVIC_EncodePriority+0x32>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	f04f 32ff 	mov.w	r2, #4294967295
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	401a      	ands	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	43d9      	mvns	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	4313      	orrs	r3, r2
         );
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3724      	adds	r7, #36	; 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de4:	d301      	bcc.n	8002dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00f      	b.n	8002e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <SysTick_Config+0x40>)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df2:	210f      	movs	r1, #15
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295
 8002df8:	f7ff ff8e 	bl	8002d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <SysTick_Config+0x40>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e02:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <SysTick_Config+0x40>)
 8002e04:	2207      	movs	r2, #7
 8002e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	e000e010 	.word	0xe000e010

08002e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ff29 	bl	8002c78 <__NVIC_SetPriorityGrouping>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e40:	f7ff ff3e 	bl	8002cc0 <__NVIC_GetPriorityGrouping>
 8002e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f7ff ff8e 	bl	8002d6c <NVIC_EncodePriority>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff5d 	bl	8002d18 <__NVIC_SetPriority>
}
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff31 	bl	8002cdc <__NVIC_EnableIRQ>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ffa2 	bl	8002dd4 <SysTick_Config>
 8002e90:	4603      	mov	r3, r0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d008      	beq.n	8002ebe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2204      	movs	r2, #4
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e020      	b.n	8002f00 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 020e 	bic.w	r2, r2, #14
 8002ecc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d005      	beq.n	8002f2e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	e027      	b.n	8002f7e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 020e 	bic.w	r2, r2, #14
 8002f3c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
    } 
  }
  return status;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f96:	e154      	b.n	8003242 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8146 	beq.w	800323c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d005      	beq.n	8002fc8 <HAL_GPIO_Init+0x40>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d130      	bne.n	800302a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffe:	2201      	movs	r2, #1
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 0201 	and.w	r2, r3, #1
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b03      	cmp	r3, #3
 8003034:	d017      	beq.n	8003066 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	2203      	movs	r2, #3
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d123      	bne.n	80030ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	08da      	lsrs	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3208      	adds	r2, #8
 800307a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	08da      	lsrs	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	6939      	ldr	r1, [r7, #16]
 80030b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	2203      	movs	r2, #3
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0203 	and.w	r2, r3, #3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80a0 	beq.w	800323c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fc:	4b58      	ldr	r3, [pc, #352]	; (8003260 <HAL_GPIO_Init+0x2d8>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	4a57      	ldr	r2, [pc, #348]	; (8003260 <HAL_GPIO_Init+0x2d8>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6193      	str	r3, [r2, #24]
 8003108:	4b55      	ldr	r3, [pc, #340]	; (8003260 <HAL_GPIO_Init+0x2d8>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003114:	4a53      	ldr	r2, [pc, #332]	; (8003264 <HAL_GPIO_Init+0x2dc>)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	3302      	adds	r3, #2
 800311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800313e:	d019      	beq.n	8003174 <HAL_GPIO_Init+0x1ec>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a49      	ldr	r2, [pc, #292]	; (8003268 <HAL_GPIO_Init+0x2e0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d013      	beq.n	8003170 <HAL_GPIO_Init+0x1e8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a48      	ldr	r2, [pc, #288]	; (800326c <HAL_GPIO_Init+0x2e4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00d      	beq.n	800316c <HAL_GPIO_Init+0x1e4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a47      	ldr	r2, [pc, #284]	; (8003270 <HAL_GPIO_Init+0x2e8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <HAL_GPIO_Init+0x1e0>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a46      	ldr	r2, [pc, #280]	; (8003274 <HAL_GPIO_Init+0x2ec>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_GPIO_Init+0x1dc>
 8003160:	2304      	movs	r3, #4
 8003162:	e008      	b.n	8003176 <HAL_GPIO_Init+0x1ee>
 8003164:	2305      	movs	r3, #5
 8003166:	e006      	b.n	8003176 <HAL_GPIO_Init+0x1ee>
 8003168:	2303      	movs	r3, #3
 800316a:	e004      	b.n	8003176 <HAL_GPIO_Init+0x1ee>
 800316c:	2302      	movs	r3, #2
 800316e:	e002      	b.n	8003176 <HAL_GPIO_Init+0x1ee>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <HAL_GPIO_Init+0x1ee>
 8003174:	2300      	movs	r3, #0
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	f002 0203 	and.w	r2, r2, #3
 800317c:	0092      	lsls	r2, r2, #2
 800317e:	4093      	lsls	r3, r2
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003186:	4937      	ldr	r1, [pc, #220]	; (8003264 <HAL_GPIO_Init+0x2dc>)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	3302      	adds	r3, #2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003194:	4b38      	ldr	r3, [pc, #224]	; (8003278 <HAL_GPIO_Init+0x2f0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031b8:	4a2f      	ldr	r2, [pc, #188]	; (8003278 <HAL_GPIO_Init+0x2f0>)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031be:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <HAL_GPIO_Init+0x2f0>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031e2:	4a25      	ldr	r2, [pc, #148]	; (8003278 <HAL_GPIO_Init+0x2f0>)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031e8:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_GPIO_Init+0x2f0>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800320c:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <HAL_GPIO_Init+0x2f0>)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003212:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_GPIO_Init+0x2f0>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003236:	4a10      	ldr	r2, [pc, #64]	; (8003278 <HAL_GPIO_Init+0x2f0>)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3301      	adds	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	f47f aea3 	bne.w	8002f98 <HAL_GPIO_Init+0x10>
  }
}
 8003252:	bf00      	nop
 8003254:	bf00      	nop
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40021000 	.word	0x40021000
 8003264:	40010000 	.word	0x40010000
 8003268:	48000400 	.word	0x48000400
 800326c:	48000800 	.word	0x48000800
 8003270:	48000c00 	.word	0x48000c00
 8003274:	48001000 	.word	0x48001000
 8003278:	40010400 	.word	0x40010400

0800327c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	887b      	ldrh	r3, [r7, #2]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
 8003298:	e001      	b.n	800329e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800329e:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
 80032b8:	4613      	mov	r3, r2
 80032ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032bc:	787b      	ldrb	r3, [r7, #1]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032c2:	887a      	ldrh	r2, [r7, #2]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032c8:	e002      	b.n	80032d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4013      	ands	r3, r2
 80032f4:	041a      	lsls	r2, r3, #16
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	43d9      	mvns	r1, r3
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	400b      	ands	r3, r1
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	619a      	str	r2, [r3, #24]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d006      	beq.n	8003334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003326:	4a05      	ldr	r2, [pc, #20]	; (800333c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f9a0 	bl	8000674 <HAL_GPIO_EXTI_Callback>
  }
}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40010400 	.word	0x40010400

08003340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e081      	b.n	8003456 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd fe68 	bl	800103c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	; 0x24
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003390:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	e006      	b.n	80033c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d104      	bne.n	80033da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69d9      	ldr	r1, [r3, #28]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1a      	ldr	r2, [r3, #32]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b20      	cmp	r3, #32
 8003472:	d138      	bne.n	80034e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800347e:	2302      	movs	r3, #2
 8003480:	e032      	b.n	80034e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2224      	movs	r2, #36	; 0x24
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0201 	bic.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e000      	b.n	80034e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
  }
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	d139      	bne.n	800357e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003514:	2302      	movs	r3, #2
 8003516:	e033      	b.n	8003580 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	; 0x24
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003546:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e000      	b.n	8003580 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358e:	b08b      	sub	sp, #44	; 0x2c
 8003590:	af06      	add	r7, sp, #24
 8003592:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e0d0      	b.n	8003740 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fe68 	bl	8001288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f003 fc7a 	bl	8006ebe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
 80035ce:	e04c      	b.n	800366a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	440b      	add	r3, r1
 80035e0:	3301      	adds	r3, #1
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	440b      	add	r3, r1
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	b298      	uxth	r0, r3
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	440b      	add	r3, r1
 800360c:	3336      	adds	r3, #54	; 0x36
 800360e:	4602      	mov	r2, r0
 8003610:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	440b      	add	r3, r1
 8003622:	3303      	adds	r3, #3
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	3338      	adds	r3, #56	; 0x38
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	440b      	add	r3, r1
 800364a:	333c      	adds	r3, #60	; 0x3c
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	440b      	add	r3, r1
 800365e:	3340      	adds	r3, #64	; 0x40
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	3301      	adds	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	d3ad      	bcc.n	80035d0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e044      	b.n	8003704 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	440b      	add	r3, r1
 8003688:	f203 1369 	addw	r3, r3, #361	; 0x169
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	440b      	add	r3, r1
 80036ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	440b      	add	r3, r1
 80036f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	3301      	adds	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	429a      	cmp	r2, r3
 800370c:	d3b5      	bcc.n	800367a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	687e      	ldr	r6, [r7, #4]
 8003716:	466d      	mov	r5, sp
 8003718:	f106 0410 	add.w	r4, r6, #16
 800371c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800371e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	602b      	str	r3, [r5, #0]
 8003724:	1d33      	adds	r3, r6, #4
 8003726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003728:	6838      	ldr	r0, [r7, #0]
 800372a:	f003 fbe3 	bl	8006ef4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800374e:	af00      	add	r7, sp, #0
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003758:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f001 b823 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 817d 	beq.w	8003a7e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003784:	4bbc      	ldr	r3, [pc, #752]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b04      	cmp	r3, #4
 800378e:	d00c      	beq.n	80037aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003790:	4bb9      	ldr	r3, [pc, #740]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d15c      	bne.n	8003856 <HAL_RCC_OscConfig+0x10e>
 800379c:	4bb6      	ldr	r3, [pc, #728]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d155      	bne.n	8003856 <HAL_RCC_OscConfig+0x10e>
 80037aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d102      	bne.n	80037dc <HAL_RCC_OscConfig+0x94>
 80037d6:	4ba8      	ldr	r3, [pc, #672]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	e015      	b.n	8003808 <HAL_RCC_OscConfig+0xc0>
 80037dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80037f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037f4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80037f8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003804:	4b9c      	ldr	r3, [pc, #624]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800380c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003810:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003814:	fa92 f2a2 	rbit	r2, r2
 8003818:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800381c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003820:	fab2 f282 	clz	r2, r2
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	f042 0220 	orr.w	r2, r2, #32
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	f002 021f 	and.w	r2, r2, #31
 8003830:	2101      	movs	r1, #1
 8003832:	fa01 f202 	lsl.w	r2, r1, r2
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 811f 	beq.w	8003a7c <HAL_RCC_OscConfig+0x334>
 800383e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 8116 	bne.w	8003a7c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f000 bfaf 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x12e>
 8003868:	4b83      	ldr	r3, [pc, #524]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a82      	ldr	r2, [pc, #520]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 800386e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	e036      	b.n	80038e4 <HAL_RCC_OscConfig+0x19c>
 8003876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x158>
 8003886:	4b7c      	ldr	r3, [pc, #496]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7b      	ldr	r2, [pc, #492]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b79      	ldr	r3, [pc, #484]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a78      	ldr	r2, [pc, #480]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e021      	b.n	80038e4 <HAL_RCC_OscConfig+0x19c>
 80038a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0x184>
 80038b2:	4b71      	ldr	r3, [pc, #452]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a70      	ldr	r2, [pc, #448]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b6e      	ldr	r3, [pc, #440]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6d      	ldr	r2, [pc, #436]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0x19c>
 80038cc:	4b6a      	ldr	r3, [pc, #424]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a69      	ldr	r2, [pc, #420]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b67      	ldr	r3, [pc, #412]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a66      	ldr	r2, [pc, #408]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e4:	4b64      	ldr	r3, [pc, #400]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	f023 020f 	bic.w	r2, r3, #15
 80038ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	495f      	ldr	r1, [pc, #380]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d059      	beq.n	80039c2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7fd fdef 	bl	80014f0 <HAL_GetTick>
 8003912:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003918:	f7fd fdea 	bl	80014f0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b64      	cmp	r3, #100	; 0x64
 8003926:	d902      	bls.n	800392e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	f000 bf43 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 800392e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003932:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003942:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d102      	bne.n	8003960 <HAL_RCC_OscConfig+0x218>
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	e015      	b.n	800398c <HAL_RCC_OscConfig+0x244>
 8003960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003964:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003978:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800397c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003988:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003990:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003994:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003998:	fa92 f2a2 	rbit	r2, r2
 800399c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80039a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80039a4:	fab2 f282 	clz	r2, r2
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	f042 0220 	orr.w	r2, r2, #32
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	f002 021f 	and.w	r2, r2, #31
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ab      	beq.n	8003918 <HAL_RCC_OscConfig+0x1d0>
 80039c0:	e05d      	b.n	8003a7e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fd fd95 	bl	80014f0 <HAL_GetTick>
 80039c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fd fd90 	bl	80014f0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b64      	cmp	r3, #100	; 0x64
 80039da:	d902      	bls.n	80039e2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	f000 bee9 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 80039e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80039f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d102      	bne.n	8003a14 <HAL_RCC_OscConfig+0x2cc>
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	e015      	b.n	8003a40 <HAL_RCC_OscConfig+0x2f8>
 8003a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a18:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a2c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003a30:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a44:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003a48:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003a4c:	fa92 f2a2 	rbit	r2, r2
 8003a50:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003a54:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003a58:	fab2 f282 	clz	r2, r2
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	f042 0220 	orr.w	r2, r2, #32
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	f002 021f 	and.w	r2, r2, #31
 8003a68:	2101      	movs	r1, #1
 8003a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ab      	bne.n	80039cc <HAL_RCC_OscConfig+0x284>
 8003a74:	e003      	b.n	8003a7e <HAL_RCC_OscConfig+0x336>
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 817d 	beq.w	8003d8e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a94:	4ba6      	ldr	r3, [pc, #664]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 030c 	and.w	r3, r3, #12
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003aa0:	4ba3      	ldr	r3, [pc, #652]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d172      	bne.n	8003b92 <HAL_RCC_OscConfig+0x44a>
 8003aac:	4ba0      	ldr	r3, [pc, #640]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d16c      	bne.n	8003b92 <HAL_RCC_OscConfig+0x44a>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003aca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d102      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x3a0>
 8003ae2:	4b93      	ldr	r3, [pc, #588]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	e013      	b.n	8003b10 <HAL_RCC_OscConfig+0x3c8>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003afa:	2302      	movs	r3, #2
 8003afc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003b00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003b0c:	4b88      	ldr	r3, [pc, #544]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	2202      	movs	r2, #2
 8003b12:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003b16:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003b1a:	fa92 f2a2 	rbit	r2, r2
 8003b1e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003b22:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003b26:	fab2 f282 	clz	r2, r2
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	f042 0220 	orr.w	r2, r2, #32
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	f002 021f 	and.w	r2, r2, #31
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_RCC_OscConfig+0x410>
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d002      	beq.n	8003b58 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f000 be2e 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b75      	ldr	r3, [pc, #468]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	21f8      	movs	r1, #248	; 0xf8
 8003b6e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b76:	fa91 f1a1 	rbit	r1, r1
 8003b7a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003b7e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003b82:	fab1 f181 	clz	r1, r1
 8003b86:	b2c9      	uxtb	r1, r1
 8003b88:	408b      	lsls	r3, r1
 8003b8a:	4969      	ldr	r1, [pc, #420]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b90:	e0fd      	b.n	8003d8e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8088 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x56c>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003bb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2301      	movs	r3, #1
 8003bce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fc8e 	bl	80014f0 <HAL_GetTick>
 8003bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bda:	f7fd fc89 	bl	80014f0 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d902      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	f000 bde2 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003c02:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d102      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4d8>
 8003c1a:	4b45      	ldr	r3, [pc, #276]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	e013      	b.n	8003c48 <HAL_RCC_OscConfig+0x500>
 8003c20:	2302      	movs	r3, #2
 8003c22:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003c32:	2302      	movs	r3, #2
 8003c34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003c38:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003c44:	4b3a      	ldr	r3, [pc, #232]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003c4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003c52:	fa92 f2a2 	rbit	r2, r2
 8003c56:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003c5a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c5e:	fab2 f282 	clz	r2, r2
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	f042 0220 	orr.w	r2, r2, #32
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	f002 021f 	and.w	r2, r2, #31
 8003c6e:	2101      	movs	r1, #1
 8003c70:	fa01 f202 	lsl.w	r2, r1, r2
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0af      	beq.n	8003bda <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7a:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	21f8      	movs	r1, #248	; 0xf8
 8003c90:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c98:	fa91 f1a1 	rbit	r1, r1
 8003c9c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003ca0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003ca4:	fab1 f181 	clz	r1, r1
 8003ca8:	b2c9      	uxtb	r1, r1
 8003caa:	408b      	lsls	r3, r1
 8003cac:	4920      	ldr	r1, [pc, #128]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]
 8003cb2:	e06c      	b.n	8003d8e <HAL_RCC_OscConfig+0x646>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003cc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2300      	movs	r3, #0
 8003cde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fc06 	bl	80014f0 <HAL_GetTick>
 8003ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fd fc01 	bl	80014f0 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d902      	bls.n	8003d00 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	f000 bd5a 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 8003d00:	2302      	movs	r3, #2
 8003d02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d104      	bne.n	8003d34 <HAL_RCC_OscConfig+0x5ec>
 8003d2a:	4b01      	ldr	r3, [pc, #4]	; (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	e015      	b.n	8003d5c <HAL_RCC_OscConfig+0x614>
 8003d30:	40021000 	.word	0x40021000
 8003d34:	2302      	movs	r3, #2
 8003d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d46:	2302      	movs	r3, #2
 8003d48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003d58:	4bc8      	ldr	r3, [pc, #800]	; (800407c <HAL_RCC_OscConfig+0x934>)
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003d62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003d66:	fa92 f2a2 	rbit	r2, r2
 8003d6a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003d6e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003d72:	fab2 f282 	clz	r2, r2
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	f042 0220 	orr.w	r2, r2, #32
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	f002 021f 	and.w	r2, r2, #31
 8003d82:	2101      	movs	r1, #1
 8003d84:	fa01 f202 	lsl.w	r2, r1, r2
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ad      	bne.n	8003cea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8110 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d079      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x760>
 8003db4:	2301      	movs	r3, #1
 8003db6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4bab      	ldr	r3, [pc, #684]	; (8004080 <HAL_RCC_OscConfig+0x938>)
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2301      	movs	r3, #1
 8003ddc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dde:	f7fd fb87 	bl	80014f0 <HAL_GetTick>
 8003de2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de8:	f7fd fb82 	bl	80014f0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d902      	bls.n	8003dfe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	f000 bcdb 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e08:	fa93 f3a3 	rbit	r3, r3
 8003e0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e18:	2202      	movs	r2, #2
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	fa93 f2a3 	rbit	r2, r3
 8003e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e58:	4b88      	ldr	r3, [pc, #544]	; (800407c <HAL_RCC_OscConfig+0x934>)
 8003e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e64:	2102      	movs	r1, #2
 8003e66:	6019      	str	r1, [r3, #0]
 8003e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	fa93 f1a3 	rbit	r1, r3
 8003e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e7e:	6019      	str	r1, [r3, #0]
  return result;
 8003e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0a0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x6a0>
 8003ea6:	e08d      	b.n	8003fc4 <HAL_RCC_OscConfig+0x87c>
 8003ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	fa93 f2a3 	rbit	r2, r3
 8003ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003eca:	601a      	str	r2, [r3, #0]
  return result;
 8003ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ed4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	4b68      	ldr	r3, [pc, #416]	; (8004080 <HAL_RCC_OscConfig+0x938>)
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fd fb01 	bl	80014f0 <HAL_GetTick>
 8003eee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef4:	f7fd fafc 	bl	80014f0 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d902      	bls.n	8003f0a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	f000 bc55 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 8003f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f12:	2202      	movs	r2, #2
 8003f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	fa93 f2a3 	rbit	r2, r3
 8003f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f36:	2202      	movs	r2, #2
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	fa93 f2a3 	rbit	r2, r3
 8003f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	fa93 f2a3 	rbit	r2, r3
 8003f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f76:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_RCC_OscConfig+0x934>)
 8003f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003f82:	2102      	movs	r1, #2
 8003f84:	6019      	str	r1, [r3, #0]
 8003f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	fa93 f1a3 	rbit	r1, r3
 8003f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f98:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003f9c:	6019      	str	r1, [r3, #0]
  return result;
 8003f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d197      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 81a1 	beq.w	800431c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe0:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_RCC_OscConfig+0x934>)
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d116      	bne.n	800401a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fec:	4b23      	ldr	r3, [pc, #140]	; (800407c <HAL_RCC_OscConfig+0x934>)
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	4a22      	ldr	r2, [pc, #136]	; (800407c <HAL_RCC_OscConfig+0x934>)
 8003ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	61d3      	str	r3, [r2, #28]
 8003ff8:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_RCC_OscConfig+0x934>)
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004004:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004012:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <HAL_RCC_OscConfig+0x93c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11a      	bne.n	800405c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004026:	4b17      	ldr	r3, [pc, #92]	; (8004084 <HAL_RCC_OscConfig+0x93c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a16      	ldr	r2, [pc, #88]	; (8004084 <HAL_RCC_OscConfig+0x93c>)
 800402c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004030:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004032:	f7fd fa5d 	bl	80014f0 <HAL_GetTick>
 8004036:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403a:	e009      	b.n	8004050 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403c:	f7fd fa58 	bl	80014f0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	; 0x64
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e3b1      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <HAL_RCC_OscConfig+0x93c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ef      	beq.n	800403c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800405c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004060:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d10d      	bne.n	8004088 <HAL_RCC_OscConfig+0x940>
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_RCC_OscConfig+0x934>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4a02      	ldr	r2, [pc, #8]	; (800407c <HAL_RCC_OscConfig+0x934>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6213      	str	r3, [r2, #32]
 8004078:	e03c      	b.n	80040f4 <HAL_RCC_OscConfig+0x9ac>
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
 8004080:	10908120 	.word	0x10908120
 8004084:	40007000 	.word	0x40007000
 8004088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10c      	bne.n	80040b2 <HAL_RCC_OscConfig+0x96a>
 8004098:	4bc1      	ldr	r3, [pc, #772]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	4ac0      	ldr	r2, [pc, #768]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	6213      	str	r3, [r2, #32]
 80040a4:	4bbe      	ldr	r3, [pc, #760]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	4abd      	ldr	r2, [pc, #756]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040aa:	f023 0304 	bic.w	r3, r3, #4
 80040ae:	6213      	str	r3, [r2, #32]
 80040b0:	e020      	b.n	80040f4 <HAL_RCC_OscConfig+0x9ac>
 80040b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x994>
 80040c2:	4bb7      	ldr	r3, [pc, #732]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	4ab6      	ldr	r2, [pc, #728]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	6213      	str	r3, [r2, #32]
 80040ce:	4bb4      	ldr	r3, [pc, #720]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4ab3      	ldr	r2, [pc, #716]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6213      	str	r3, [r2, #32]
 80040da:	e00b      	b.n	80040f4 <HAL_RCC_OscConfig+0x9ac>
 80040dc:	4bb0      	ldr	r3, [pc, #704]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4aaf      	ldr	r2, [pc, #700]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	6213      	str	r3, [r2, #32]
 80040e8:	4bad      	ldr	r3, [pc, #692]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4aac      	ldr	r2, [pc, #688]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040ee:	f023 0304 	bic.w	r3, r3, #4
 80040f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8081 	beq.w	8004208 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fd f9f3 	bl	80014f0 <HAL_GetTick>
 800410a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	e00b      	b.n	8004128 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fd f9ee 	bl	80014f0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e345      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
 8004128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004130:	2202      	movs	r2, #2
 8004132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004138:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	fa93 f2a3 	rbit	r2, r3
 8004142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004146:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004150:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004154:	2202      	movs	r2, #2
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	fa93 f2a3 	rbit	r2, r3
 8004166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800416e:	601a      	str	r2, [r3, #0]
  return result;
 8004170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004174:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004178:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d102      	bne.n	8004194 <HAL_RCC_OscConfig+0xa4c>
 800418e:	4b84      	ldr	r3, [pc, #528]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	e013      	b.n	80041bc <HAL_RCC_OscConfig+0xa74>
 8004194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004198:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800419c:	2202      	movs	r2, #2
 800419e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	fa93 f2a3 	rbit	r2, r3
 80041ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	4b79      	ldr	r3, [pc, #484]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80041c4:	2102      	movs	r1, #2
 80041c6:	6011      	str	r1, [r2, #0]
 80041c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	fa92 f1a2 	rbit	r1, r2
 80041d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80041de:	6011      	str	r1, [r2, #0]
  return result;
 80041e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041e4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	fab2 f282 	clz	r2, r2
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	f002 021f 	and.w	r2, r2, #31
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d084      	beq.n	8004110 <HAL_RCC_OscConfig+0x9c8>
 8004206:	e07f      	b.n	8004308 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004208:	f7fd f972 	bl	80014f0 <HAL_GetTick>
 800420c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004210:	e00b      	b.n	800422a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fd f96d 	bl	80014f0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e2c4      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
 800422a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004232:	2202      	movs	r2, #2
 8004234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	fa93 f2a3 	rbit	r2, r3
 8004244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004248:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004252:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004256:	2202      	movs	r2, #2
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	fa93 f2a3 	rbit	r2, r3
 8004268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004270:	601a      	str	r2, [r3, #0]
  return result;
 8004272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004276:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800427a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f043 0302 	orr.w	r3, r3, #2
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d102      	bne.n	8004296 <HAL_RCC_OscConfig+0xb4e>
 8004290:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	e013      	b.n	80042be <HAL_RCC_OscConfig+0xb76>
 8004296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800429e:	2202      	movs	r2, #2
 80042a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	fa93 f2a3 	rbit	r2, r3
 80042b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80042c6:	2102      	movs	r1, #2
 80042c8:	6011      	str	r1, [r2, #0]
 80042ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	fa92 f1a2 	rbit	r1, r2
 80042d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80042e0:	6011      	str	r1, [r2, #0]
  return result;
 80042e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042e6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	fab2 f282 	clz	r2, r2
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	f002 021f 	and.w	r2, r2, #31
 80042fc:	2101      	movs	r1, #1
 80042fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d184      	bne.n	8004212 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004308:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800430c:	2b01      	cmp	r3, #1
 800430e:	d105      	bne.n	800431c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004310:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 8004316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800431a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004320:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8242 	beq.w	80047b2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <HAL_RCC_OscConfig+0xc58>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b08      	cmp	r3, #8
 8004338:	f000 8213 	beq.w	8004762 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	2b02      	cmp	r3, #2
 800434a:	f040 8162 	bne.w	8004612 <HAL_RCC_OscConfig+0xeca>
 800434e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004352:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004356:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800435a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004360:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	fa93 f2a3 	rbit	r2, r3
 800436a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004372:	601a      	str	r2, [r3, #0]
  return result;
 8004374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004378:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800437c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004388:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	461a      	mov	r2, r3
 8004390:	2300      	movs	r3, #0
 8004392:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fd f8ac 	bl	80014f0 <HAL_GetTick>
 8004398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800439c:	e00c      	b.n	80043b8 <HAL_RCC_OscConfig+0xc70>
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fd f8a4 	bl	80014f0 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e1fd      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
 80043b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80043c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	fa93 f2a3 	rbit	r2, r3
 80043d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80043dc:	601a      	str	r2, [r3, #0]
  return result;
 80043de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80043e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d102      	bne.n	8004402 <HAL_RCC_OscConfig+0xcba>
 80043fc:	4bb0      	ldr	r3, [pc, #704]	; (80046c0 <HAL_RCC_OscConfig+0xf78>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	e027      	b.n	8004452 <HAL_RCC_OscConfig+0xd0a>
 8004402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004406:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800440a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800440e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004414:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	fa93 f2a3 	rbit	r2, r3
 800441e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004422:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	fa93 f2a3 	rbit	r2, r3
 8004444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004448:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	4b9c      	ldr	r3, [pc, #624]	; (80046c0 <HAL_RCC_OscConfig+0xf78>)
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004456:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800445a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800445e:	6011      	str	r1, [r2, #0]
 8004460:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004464:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	fa92 f1a2 	rbit	r1, r2
 800446e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004472:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004476:	6011      	str	r1, [r2, #0]
  return result;
 8004478:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800447c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	fab2 f282 	clz	r2, r2
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	f042 0220 	orr.w	r2, r2, #32
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	f002 021f 	and.w	r2, r2, #31
 8004492:	2101      	movs	r1, #1
 8004494:	fa01 f202 	lsl.w	r2, r1, r2
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d182      	bne.n	80043a4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800449e:	4b88      	ldr	r3, [pc, #544]	; (80046c0 <HAL_RCC_OscConfig+0xf78>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80044b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	430b      	orrs	r3, r1
 80044c0:	497f      	ldr	r1, [pc, #508]	; (80046c0 <HAL_RCC_OscConfig+0xf78>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]
 80044c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80044ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	fa93 f2a3 	rbit	r2, r3
 80044e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80044ea:	601a      	str	r2, [r3, #0]
  return result;
 80044ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80044f4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f6:	fab3 f383 	clz	r3, r3
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004500:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	461a      	mov	r2, r3
 8004508:	2301      	movs	r3, #1
 800450a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fc fff0 	bl	80014f0 <HAL_GetTick>
 8004510:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004514:	e009      	b.n	800452a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004516:	f7fc ffeb 	bl	80014f0 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e144      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
 800452a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	fa93 f2a3 	rbit	r2, r3
 8004546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800454e:	601a      	str	r2, [r3, #0]
  return result;
 8004550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004554:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004558:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800455a:	fab3 f383 	clz	r3, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	d102      	bne.n	8004574 <HAL_RCC_OscConfig+0xe2c>
 800456e:	4b54      	ldr	r3, [pc, #336]	; (80046c0 <HAL_RCC_OscConfig+0xf78>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	e027      	b.n	80045c4 <HAL_RCC_OscConfig+0xe7c>
 8004574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004578:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800457c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004586:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	fa93 f2a3 	rbit	r2, r3
 8004590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004594:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80045a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	fa93 f2a3 	rbit	r2, r3
 80045b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	4b3f      	ldr	r3, [pc, #252]	; (80046c0 <HAL_RCC_OscConfig+0xf78>)
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045c8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80045cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045d0:	6011      	str	r1, [r2, #0]
 80045d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045d6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	fa92 f1a2 	rbit	r1, r2
 80045e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045e4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80045e8:	6011      	str	r1, [r2, #0]
  return result;
 80045ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045ee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	fab2 f282 	clz	r2, r2
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	f042 0220 	orr.w	r2, r2, #32
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	f002 021f 	and.w	r2, r2, #31
 8004604:	2101      	movs	r1, #1
 8004606:	fa01 f202 	lsl.w	r2, r1, r2
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d082      	beq.n	8004516 <HAL_RCC_OscConfig+0xdce>
 8004610:	e0cf      	b.n	80047b2 <HAL_RCC_OscConfig+0x106a>
 8004612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004616:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800461a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800461e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004624:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	fa93 f2a3 	rbit	r2, r3
 800462e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004632:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004636:	601a      	str	r2, [r3, #0]
  return result;
 8004638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004640:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800464c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7fc ff4a 	bl	80014f0 <HAL_GetTick>
 800465c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004660:	e009      	b.n	8004676 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004662:	f7fc ff45 	bl	80014f0 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e09e      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
 8004676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800467e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004688:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	fa93 f2a3 	rbit	r2, r3
 8004692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004696:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800469a:	601a      	str	r2, [r3, #0]
  return result;
 800469c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80046a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d104      	bne.n	80046c4 <HAL_RCC_OscConfig+0xf7c>
 80046ba:	4b01      	ldr	r3, [pc, #4]	; (80046c0 <HAL_RCC_OscConfig+0xf78>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	e029      	b.n	8004714 <HAL_RCC_OscConfig+0xfcc>
 80046c0:	40021000 	.word	0x40021000
 80046c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80046cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	fa93 f2a3 	rbit	r2, r3
 80046e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80046f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	fa93 f2a3 	rbit	r2, r3
 8004706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCC_OscConfig+0x1078>)
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004718:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800471c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004720:	6011      	str	r1, [r2, #0]
 8004722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004726:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	fa92 f1a2 	rbit	r1, r2
 8004730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004734:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004738:	6011      	str	r1, [r2, #0]
  return result;
 800473a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800473e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	fab2 f282 	clz	r2, r2
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	f042 0220 	orr.w	r2, r2, #32
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	f002 021f 	and.w	r2, r2, #31
 8004754:	2101      	movs	r1, #1
 8004756:	fa01 f202 	lsl.w	r2, r1, r2
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d180      	bne.n	8004662 <HAL_RCC_OscConfig+0xf1a>
 8004760:	e027      	b.n	80047b2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004766:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e01e      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_RCC_OscConfig+0x1078>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800477e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004782:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	429a      	cmp	r2, r3
 8004794:	d10b      	bne.n	80047ae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004796:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800479a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800479e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d001      	beq.n	80047b2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000

080047c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b09e      	sub	sp, #120	; 0x78
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e162      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047dc:	4b90      	ldr	r3, [pc, #576]	; (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d910      	bls.n	800480c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b8d      	ldr	r3, [pc, #564]	; (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 0207 	bic.w	r2, r3, #7
 80047f2:	498b      	ldr	r1, [pc, #556]	; (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b89      	ldr	r3, [pc, #548]	; (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e14a      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004818:	4b82      	ldr	r3, [pc, #520]	; (8004a24 <HAL_RCC_ClockConfig+0x260>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	497f      	ldr	r1, [pc, #508]	; (8004a24 <HAL_RCC_ClockConfig+0x260>)
 8004826:	4313      	orrs	r3, r2
 8004828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80dc 	beq.w	80049f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d13c      	bne.n	80048ba <HAL_RCC_ClockConfig+0xf6>
 8004840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004844:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004848:	fa93 f3a3 	rbit	r3, r3
 800484c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800484e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004850:	fab3 f383 	clz	r3, r3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d102      	bne.n	800486a <HAL_RCC_ClockConfig+0xa6>
 8004864:	4b6f      	ldr	r3, [pc, #444]	; (8004a24 <HAL_RCC_ClockConfig+0x260>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	e00f      	b.n	800488a <HAL_RCC_ClockConfig+0xc6>
 800486a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800486e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004872:	fa93 f3a3 	rbit	r3, r3
 8004876:	667b      	str	r3, [r7, #100]	; 0x64
 8004878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800487c:	663b      	str	r3, [r7, #96]	; 0x60
 800487e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004886:	4b67      	ldr	r3, [pc, #412]	; (8004a24 <HAL_RCC_ClockConfig+0x260>)
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800488e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004892:	fa92 f2a2 	rbit	r2, r2
 8004896:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800489a:	fab2 f282 	clz	r2, r2
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	f042 0220 	orr.w	r2, r2, #32
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	f002 021f 	and.w	r2, r2, #31
 80048aa:	2101      	movs	r1, #1
 80048ac:	fa01 f202 	lsl.w	r2, r1, r2
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d17b      	bne.n	80049ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e0f3      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d13c      	bne.n	800493c <HAL_RCC_ClockConfig+0x178>
 80048c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80048d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d2:	fab3 f383 	clz	r3, r3
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d102      	bne.n	80048ec <HAL_RCC_ClockConfig+0x128>
 80048e6:	4b4f      	ldr	r3, [pc, #316]	; (8004a24 <HAL_RCC_ClockConfig+0x260>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	e00f      	b.n	800490c <HAL_RCC_ClockConfig+0x148>
 80048ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f4:	fa93 f3a3 	rbit	r3, r3
 80048f8:	647b      	str	r3, [r7, #68]	; 0x44
 80048fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004908:	4b46      	ldr	r3, [pc, #280]	; (8004a24 <HAL_RCC_ClockConfig+0x260>)
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004910:	63ba      	str	r2, [r7, #56]	; 0x38
 8004912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004914:	fa92 f2a2 	rbit	r2, r2
 8004918:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800491a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800491c:	fab2 f282 	clz	r2, r2
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	f042 0220 	orr.w	r2, r2, #32
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	f002 021f 	and.w	r2, r2, #31
 800492c:	2101      	movs	r1, #1
 800492e:	fa01 f202 	lsl.w	r2, r1, r2
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d13a      	bne.n	80049ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0b2      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
 800493c:	2302      	movs	r3, #2
 800493e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	fa93 f3a3 	rbit	r3, r3
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d102      	bne.n	8004964 <HAL_RCC_ClockConfig+0x1a0>
 800495e:	4b31      	ldr	r3, [pc, #196]	; (8004a24 <HAL_RCC_ClockConfig+0x260>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	e00d      	b.n	8004980 <HAL_RCC_ClockConfig+0x1bc>
 8004964:	2302      	movs	r3, #2
 8004966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
 8004970:	2302      	movs	r3, #2
 8004972:	623b      	str	r3, [r7, #32]
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	fa93 f3a3 	rbit	r3, r3
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	4b29      	ldr	r3, [pc, #164]	; (8004a24 <HAL_RCC_ClockConfig+0x260>)
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	2202      	movs	r2, #2
 8004982:	61ba      	str	r2, [r7, #24]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	fa92 f2a2 	rbit	r2, r2
 800498a:	617a      	str	r2, [r7, #20]
  return result;
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	fab2 f282 	clz	r2, r2
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	f042 0220 	orr.w	r2, r2, #32
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	f002 021f 	and.w	r2, r2, #31
 800499e:	2101      	movs	r1, #1
 80049a0:	fa01 f202 	lsl.w	r2, r1, r2
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e079      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ae:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <HAL_RCC_ClockConfig+0x260>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f023 0203 	bic.w	r2, r3, #3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	491a      	ldr	r1, [pc, #104]	; (8004a24 <HAL_RCC_ClockConfig+0x260>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c0:	f7fc fd96 	bl	80014f0 <HAL_GetTick>
 80049c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	e00a      	b.n	80049de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c8:	f7fc fd92 	bl	80014f0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e061      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <HAL_RCC_ClockConfig+0x260>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 020c 	and.w	r2, r3, #12
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d1eb      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d214      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 0207 	bic.w	r2, r3, #7
 8004a06:	4906      	ldr	r1, [pc, #24]	; (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e040      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
 8004a20:	40022000 	.word	0x40022000
 8004a24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a34:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <HAL_RCC_ClockConfig+0x2e8>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	491a      	ldr	r1, [pc, #104]	; (8004aac <HAL_RCC_ClockConfig+0x2e8>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a52:	4b16      	ldr	r3, [pc, #88]	; (8004aac <HAL_RCC_ClockConfig+0x2e8>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4912      	ldr	r1, [pc, #72]	; (8004aac <HAL_RCC_ClockConfig+0x2e8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a66:	f000 f829 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a6a:	4601      	mov	r1, r0
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <HAL_RCC_ClockConfig+0x2e8>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a74:	22f0      	movs	r2, #240	; 0xf0
 8004a76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	fa92 f2a2 	rbit	r2, r2
 8004a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	fab2 f282 	clz	r2, r2
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	40d3      	lsrs	r3, r2
 8004a8a:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <HAL_RCC_ClockConfig+0x2ec>)
 8004a8c:	5cd3      	ldrb	r3, [r2, r3]
 8004a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a92:	4a08      	ldr	r2, [pc, #32]	; (8004ab4 <HAL_RCC_ClockConfig+0x2f0>)
 8004a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a96:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <HAL_RCC_ClockConfig+0x2f4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fc fce4 	bl	8001468 <HAL_InitTick>
  
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3778      	adds	r7, #120	; 0x78
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	08006fa8 	.word	0x08006fa8
 8004ab4:	20000000 	.word	0x20000000
 8004ab8:	20000004 	.word	0x20000004

08004abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b08b      	sub	sp, #44	; 0x2c
 8004ac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	2300      	movs	r3, #0
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004ad6:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d002      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x30>
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCC_GetSysClockFreq+0x36>
 8004aea:	e03c      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aec:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004aee:	623b      	str	r3, [r7, #32]
      break;
 8004af0:	e03c      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004af8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004afc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	fa92 f2a2 	rbit	r2, r2
 8004b04:	607a      	str	r2, [r7, #4]
  return result;
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	fab2 f282 	clz	r2, r2
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	40d3      	lsrs	r3, r2
 8004b10:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b12:	5cd3      	ldrb	r3, [r2, r3]
 8004b14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004b16:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	220f      	movs	r2, #15
 8004b20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	fa92 f2a2 	rbit	r2, r2
 8004b28:	60fa      	str	r2, [r7, #12]
  return result;
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	fab2 f282 	clz	r2, r2
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	40d3      	lsrs	r3, r2
 8004b34:	4a14      	ldr	r2, [pc, #80]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b36:	5cd3      	ldrb	r3, [r2, r3]
 8004b38:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b44:	4a0e      	ldr	r2, [pc, #56]	; (8004b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
 8004b54:	e004      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	4a0c      	ldr	r2, [pc, #48]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	623b      	str	r3, [r7, #32]
      break;
 8004b64:	e002      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b68:	623b      	str	r3, [r7, #32]
      break;
 8004b6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	372c      	adds	r7, #44	; 0x2c
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	007a1200 	.word	0x007a1200
 8004b84:	08006fc0 	.word	0x08006fc0
 8004b88:	08006fd0 	.word	0x08006fd0
 8004b8c:	003d0900 	.word	0x003d0900

08004b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b94:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b96:	681b      	ldr	r3, [r3, #0]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000000 	.word	0x20000000

08004ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004bae:	f7ff ffef 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bbc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004bc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	fa92 f2a2 	rbit	r2, r2
 8004bc8:	603a      	str	r2, [r7, #0]
  return result;
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	fab2 f282 	clz	r2, r2
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	40d3      	lsrs	r3, r2
 8004bd4:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004bd6:	5cd3      	ldrb	r3, [r2, r3]
 8004bd8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40021000 	.word	0x40021000
 8004be8:	08006fb8 	.word	0x08006fb8

08004bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004bf2:	f7ff ffcd 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8004bf6:	4601      	mov	r1, r0
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004c00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004c04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	fa92 f2a2 	rbit	r2, r2
 8004c0c:	603a      	str	r2, [r7, #0]
  return result;
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	fab2 f282 	clz	r2, r2
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	40d3      	lsrs	r3, r2
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c1a:	5cd3      	ldrb	r3, [r2, r3]
 8004c1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	08006fb8 	.word	0x08006fb8

08004c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b092      	sub	sp, #72	; 0x48
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80d4 	beq.w	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c54:	4b4e      	ldr	r3, [pc, #312]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10e      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c60:	4b4b      	ldr	r3, [pc, #300]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	4a4a      	ldr	r2, [pc, #296]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	61d3      	str	r3, [r2, #28]
 8004c6c:	4b48      	ldr	r3, [pc, #288]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7e:	4b45      	ldr	r3, [pc, #276]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d118      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8a:	4b42      	ldr	r3, [pc, #264]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a41      	ldr	r2, [pc, #260]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c96:	f7fc fc2b 	bl	80014f0 <HAL_GetTick>
 8004c9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9e:	f7fc fc27 	bl	80014f0 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b64      	cmp	r3, #100	; 0x64
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e169      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb0:	4b38      	ldr	r3, [pc, #224]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cbc:	4b34      	ldr	r3, [pc, #208]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8084 	beq.w	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d07c      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cdc:	4b2c      	ldr	r3, [pc, #176]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	fa93 f3a3 	rbit	r3, r3
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cf6:	fab3 f383 	clz	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	461a      	mov	r2, r3
 8004d06:	2301      	movs	r3, #1
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d1a:	fab3 f383 	clz	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d2e:	4a18      	ldr	r2, [pc, #96]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d04b      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3e:	f7fc fbd7 	bl	80014f0 <HAL_GetTick>
 8004d42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d44:	e00a      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d46:	f7fc fbd3 	bl	80014f0 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e113      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
 8004d68:	2302      	movs	r3, #2
 8004d6a:	623b      	str	r3, [r7, #32]
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	61fb      	str	r3, [r7, #28]
  return result;
 8004d74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f043 0302 	orr.w	r3, r3, #2
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d108      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d8a:	4b01      	ldr	r3, [pc, #4]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	e00d      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004d90:	40021000 	.word	0x40021000
 8004d94:	40007000 	.word	0x40007000
 8004d98:	10908100 	.word	0x10908100
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	fa93 f3a3 	rbit	r3, r3
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	4b78      	ldr	r3, [pc, #480]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	2202      	movs	r2, #2
 8004dae:	613a      	str	r2, [r7, #16]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	fa92 f2a2 	rbit	r2, r2
 8004db6:	60fa      	str	r2, [r7, #12]
  return result;
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	fab2 f282 	clz	r2, r2
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	f002 021f 	and.w	r2, r2, #31
 8004dca:	2101      	movs	r1, #1
 8004dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0b7      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004dd6:	4b6d      	ldr	r3, [pc, #436]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	496a      	ldr	r1, [pc, #424]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004de8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d105      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df0:	4b66      	ldr	r3, [pc, #408]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4a65      	ldr	r2, [pc, #404]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e08:	4b60      	ldr	r3, [pc, #384]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	f023 0203 	bic.w	r2, r3, #3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	495d      	ldr	r1, [pc, #372]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e26:	4b59      	ldr	r3, [pc, #356]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	4956      	ldr	r1, [pc, #344]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e44:	4b51      	ldr	r3, [pc, #324]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	494e      	ldr	r1, [pc, #312]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e62:	4b4a      	ldr	r3, [pc, #296]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f023 0210 	bic.w	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	4947      	ldr	r1, [pc, #284]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004e80:	4b42      	ldr	r3, [pc, #264]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	493f      	ldr	r1, [pc, #252]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d008      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e9e:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	f023 0220 	bic.w	r2, r3, #32
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	4938      	ldr	r1, [pc, #224]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ebc:	4b33      	ldr	r3, [pc, #204]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	4930      	ldr	r1, [pc, #192]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eda:	4b2c      	ldr	r3, [pc, #176]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	4929      	ldr	r1, [pc, #164]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ef8:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	4921      	ldr	r1, [pc, #132]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f16:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	491a      	ldr	r1, [pc, #104]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004f34:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f40:	4912      	ldr	r1, [pc, #72]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f52:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	490b      	ldr	r1, [pc, #44]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004f70:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7c:	4903      	ldr	r1, [pc, #12]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3748      	adds	r7, #72	; 0x48
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000

08004f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e09d      	b.n	80050de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d108      	bne.n	8004fbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb2:	d009      	beq.n	8004fc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	61da      	str	r2, [r3, #28]
 8004fba:	e005      	b.n	8004fc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc f86e 	bl	80010c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005008:	d902      	bls.n	8005010 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	e002      	b.n	8005016 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005014:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800501e:	d007      	beq.n	8005030 <HAL_SPI_Init+0xa0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005028:	d002      	beq.n	8005030 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	ea42 0103 	orr.w	r1, r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	0c1b      	lsrs	r3, r3, #16
 800508c:	f003 0204 	and.w	r2, r3, #4
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050ac:	ea42 0103 	orr.w	r1, r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e049      	b.n	800518c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d106      	bne.n	8005112 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7fc f81b 	bl	8001148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3304      	adds	r3, #4
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f000 fb41 	bl	80057ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d001      	beq.n	80051ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e042      	b.n	8005232 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a21      	ldr	r2, [pc, #132]	; (8005240 <HAL_TIM_Base_Start+0xac>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d018      	beq.n	80051f0 <HAL_TIM_Base_Start+0x5c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c6:	d013      	beq.n	80051f0 <HAL_TIM_Base_Start+0x5c>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <HAL_TIM_Base_Start+0xb0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00e      	beq.n	80051f0 <HAL_TIM_Base_Start+0x5c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <HAL_TIM_Base_Start+0xb4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d009      	beq.n	80051f0 <HAL_TIM_Base_Start+0x5c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1a      	ldr	r2, [pc, #104]	; (800524c <HAL_TIM_Base_Start+0xb8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_TIM_Base_Start+0x5c>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a19      	ldr	r2, [pc, #100]	; (8005250 <HAL_TIM_Base_Start+0xbc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d115      	bne.n	800521c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	4b17      	ldr	r3, [pc, #92]	; (8005254 <HAL_TIM_Base_Start+0xc0>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b06      	cmp	r3, #6
 8005200:	d015      	beq.n	800522e <HAL_TIM_Base_Start+0x9a>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005208:	d011      	beq.n	800522e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0201 	orr.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521a:	e008      	b.n	800522e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e000      	b.n	8005230 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	40013400 	.word	0x40013400
 8005250:	40014000 	.word	0x40014000
 8005254:	00010007 	.word	0x00010007

08005258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d001      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e04a      	b.n	8005306 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a21      	ldr	r2, [pc, #132]	; (8005314 <HAL_TIM_Base_Start_IT+0xbc>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d013      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <HAL_TIM_Base_Start_IT+0xc0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1c      	ldr	r2, [pc, #112]	; (800531c <HAL_TIM_Base_Start_IT+0xc4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1a      	ldr	r2, [pc, #104]	; (8005320 <HAL_TIM_Base_Start_IT+0xc8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a19      	ldr	r2, [pc, #100]	; (8005324 <HAL_TIM_Base_Start_IT+0xcc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d115      	bne.n	80052f0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	4b17      	ldr	r3, [pc, #92]	; (8005328 <HAL_TIM_Base_Start_IT+0xd0>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b06      	cmp	r3, #6
 80052d4:	d015      	beq.n	8005302 <HAL_TIM_Base_Start_IT+0xaa>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052dc:	d011      	beq.n	8005302 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0201 	orr.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ee:	e008      	b.n	8005302 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e000      	b.n	8005304 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40013400 	.word	0x40013400
 8005324:	40014000 	.word	0x40014000
 8005328:	00010007 	.word	0x00010007

0800532c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0201 	bic.w	r2, r2, #1
 8005342:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6a1a      	ldr	r2, [r3, #32]
 800534a:	f241 1311 	movw	r3, #4369	; 0x1111
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10f      	bne.n	8005374 <HAL_TIM_Base_Stop_IT+0x48>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6a1a      	ldr	r2, [r3, #32]
 800535a:	f240 4344 	movw	r3, #1092	; 0x444
 800535e:	4013      	ands	r3, r2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d107      	bne.n	8005374 <HAL_TIM_Base_Stop_IT+0x48>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b02      	cmp	r3, #2
 800539e:	d122      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d11b      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f06f 0202 	mvn.w	r2, #2
 80053b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f9ce 	bl	800576e <HAL_TIM_IC_CaptureCallback>
 80053d2:	e005      	b.n	80053e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f9c0 	bl	800575a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f9d1 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d122      	bne.n	800543a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d11b      	bne.n	800543a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f06f 0204 	mvn.w	r2, #4
 800540a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f9a4 	bl	800576e <HAL_TIM_IC_CaptureCallback>
 8005426:	e005      	b.n	8005434 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f996 	bl	800575a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f9a7 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b08      	cmp	r3, #8
 8005446:	d122      	bne.n	800548e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b08      	cmp	r3, #8
 8005454:	d11b      	bne.n	800548e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f06f 0208 	mvn.w	r2, #8
 800545e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2204      	movs	r2, #4
 8005464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f97a 	bl	800576e <HAL_TIM_IC_CaptureCallback>
 800547a:	e005      	b.n	8005488 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f96c 	bl	800575a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f97d 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b10      	cmp	r3, #16
 800549a:	d122      	bne.n	80054e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d11b      	bne.n	80054e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f06f 0210 	mvn.w	r2, #16
 80054b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2208      	movs	r2, #8
 80054b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f950 	bl	800576e <HAL_TIM_IC_CaptureCallback>
 80054ce:	e005      	b.n	80054dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f942 	bl	800575a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f953 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d10e      	bne.n	800550e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d107      	bne.n	800550e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f06f 0201 	mvn.w	r2, #1
 8005506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7fb f98f 	bl	800082c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d10e      	bne.n	800553a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d107      	bne.n	800553a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 faed 	bl	8005b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005548:	d10e      	bne.n	8005568 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d107      	bne.n	8005568 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fae0 	bl	8005b28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d10e      	bne.n	8005594 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d107      	bne.n	8005594 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800558c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f901 	bl	8005796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d10e      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d107      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0220 	mvn.w	r2, #32
 80055b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 faa0 	bl	8005b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_TIM_ConfigClockSource+0x1c>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e0b6      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x18a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005602:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800560e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005620:	d03e      	beq.n	80056a0 <HAL_TIM_ConfigClockSource+0xd8>
 8005622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005626:	f200 8087 	bhi.w	8005738 <HAL_TIM_ConfigClockSource+0x170>
 800562a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562e:	f000 8086 	beq.w	800573e <HAL_TIM_ConfigClockSource+0x176>
 8005632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005636:	d87f      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005638:	2b70      	cmp	r3, #112	; 0x70
 800563a:	d01a      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0xaa>
 800563c:	2b70      	cmp	r3, #112	; 0x70
 800563e:	d87b      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005640:	2b60      	cmp	r3, #96	; 0x60
 8005642:	d050      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x11e>
 8005644:	2b60      	cmp	r3, #96	; 0x60
 8005646:	d877      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005648:	2b50      	cmp	r3, #80	; 0x50
 800564a:	d03c      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0xfe>
 800564c:	2b50      	cmp	r3, #80	; 0x50
 800564e:	d873      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d058      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x13e>
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d86f      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005658:	2b30      	cmp	r3, #48	; 0x30
 800565a:	d064      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x15e>
 800565c:	2b30      	cmp	r3, #48	; 0x30
 800565e:	d86b      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005660:	2b20      	cmp	r3, #32
 8005662:	d060      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x15e>
 8005664:	2b20      	cmp	r3, #32
 8005666:	d867      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d05c      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x15e>
 800566c:	2b10      	cmp	r3, #16
 800566e:	d05a      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x15e>
 8005670:	e062      	b.n	8005738 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6899      	ldr	r1, [r3, #8]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f000 f99d 	bl	80059c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	609a      	str	r2, [r3, #8]
      break;
 800569e:	e04f      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6899      	ldr	r1, [r3, #8]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f000 f986 	bl	80059c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056c2:	609a      	str	r2, [r3, #8]
      break;
 80056c4:	e03c      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6859      	ldr	r1, [r3, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f000 f8fa 	bl	80058cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2150      	movs	r1, #80	; 0x50
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f953 	bl	800598a <TIM_ITRx_SetConfig>
      break;
 80056e4:	e02c      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6859      	ldr	r1, [r3, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	461a      	mov	r2, r3
 80056f4:	f000 f919 	bl	800592a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2160      	movs	r1, #96	; 0x60
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f943 	bl	800598a <TIM_ITRx_SetConfig>
      break;
 8005704:	e01c      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6859      	ldr	r1, [r3, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	461a      	mov	r2, r3
 8005714:	f000 f8da 	bl	80058cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2140      	movs	r1, #64	; 0x40
 800571e:	4618      	mov	r0, r3
 8005720:	f000 f933 	bl	800598a <TIM_ITRx_SetConfig>
      break;
 8005724:	e00c      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4619      	mov	r1, r3
 8005730:	4610      	mov	r0, r2
 8005732:	f000 f92a 	bl	800598a <TIM_ITRx_SetConfig>
      break;
 8005736:	e003      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
      break;
 800573c:	e000      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800573e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005750:	7bfb      	ldrb	r3, [r7, #15]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a3c      	ldr	r2, [pc, #240]	; (80058b0 <TIM_Base_SetConfig+0x104>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00f      	beq.n	80057e4 <TIM_Base_SetConfig+0x38>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ca:	d00b      	beq.n	80057e4 <TIM_Base_SetConfig+0x38>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a39      	ldr	r2, [pc, #228]	; (80058b4 <TIM_Base_SetConfig+0x108>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d007      	beq.n	80057e4 <TIM_Base_SetConfig+0x38>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a38      	ldr	r2, [pc, #224]	; (80058b8 <TIM_Base_SetConfig+0x10c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_Base_SetConfig+0x38>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a37      	ldr	r2, [pc, #220]	; (80058bc <TIM_Base_SetConfig+0x110>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d108      	bne.n	80057f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a2d      	ldr	r2, [pc, #180]	; (80058b0 <TIM_Base_SetConfig+0x104>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d01b      	beq.n	8005836 <TIM_Base_SetConfig+0x8a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005804:	d017      	beq.n	8005836 <TIM_Base_SetConfig+0x8a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a2a      	ldr	r2, [pc, #168]	; (80058b4 <TIM_Base_SetConfig+0x108>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <TIM_Base_SetConfig+0x8a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a29      	ldr	r2, [pc, #164]	; (80058b8 <TIM_Base_SetConfig+0x10c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00f      	beq.n	8005836 <TIM_Base_SetConfig+0x8a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a28      	ldr	r2, [pc, #160]	; (80058bc <TIM_Base_SetConfig+0x110>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00b      	beq.n	8005836 <TIM_Base_SetConfig+0x8a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a27      	ldr	r2, [pc, #156]	; (80058c0 <TIM_Base_SetConfig+0x114>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d007      	beq.n	8005836 <TIM_Base_SetConfig+0x8a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <TIM_Base_SetConfig+0x118>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_Base_SetConfig+0x8a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a25      	ldr	r2, [pc, #148]	; (80058c8 <TIM_Base_SetConfig+0x11c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d108      	bne.n	8005848 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a10      	ldr	r2, [pc, #64]	; (80058b0 <TIM_Base_SetConfig+0x104>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00f      	beq.n	8005894 <TIM_Base_SetConfig+0xe8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a11      	ldr	r2, [pc, #68]	; (80058bc <TIM_Base_SetConfig+0x110>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00b      	beq.n	8005894 <TIM_Base_SetConfig+0xe8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a10      	ldr	r2, [pc, #64]	; (80058c0 <TIM_Base_SetConfig+0x114>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d007      	beq.n	8005894 <TIM_Base_SetConfig+0xe8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a0f      	ldr	r2, [pc, #60]	; (80058c4 <TIM_Base_SetConfig+0x118>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_Base_SetConfig+0xe8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a0e      	ldr	r2, [pc, #56]	; (80058c8 <TIM_Base_SetConfig+0x11c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d103      	bne.n	800589c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	615a      	str	r2, [r3, #20]
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40012c00 	.word	0x40012c00
 80058b4:	40000400 	.word	0x40000400
 80058b8:	40000800 	.word	0x40000800
 80058bc:	40013400 	.word	0x40013400
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40014400 	.word	0x40014400
 80058c8:	40014800 	.word	0x40014800

080058cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	f023 0201 	bic.w	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f023 030a 	bic.w	r3, r3, #10
 8005908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800592a:	b480      	push	{r7}
 800592c:	b087      	sub	sp, #28
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f023 0210 	bic.w	r2, r3, #16
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	031b      	lsls	r3, r3, #12
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005966:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f043 0307 	orr.w	r3, r3, #7
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	609a      	str	r2, [r3, #8]
}
 80059b4:	bf00      	nop
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	021a      	lsls	r2, r3, #8
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	609a      	str	r2, [r3, #8]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e063      	b.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2b      	ldr	r2, [pc, #172]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2a      	ldr	r2, [pc, #168]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d108      	bne.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d018      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8a:	d013      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a18      	ldr	r2, [pc, #96]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00e      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d009      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a12      	ldr	r2, [pc, #72]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d004      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a13      	ldr	r2, [pc, #76]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d10c      	bne.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40013400 	.word	0x40013400
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40014000 	.word	0x40014000

08005b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e040      	b.n	8005bd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fb fb46 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2224      	movs	r2, #36	; 0x24
 8005b68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fb78 	bl	8006270 <UART_SetConfig>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e022      	b.n	8005bd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fd42 	bl	800661c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fdc9 	bl	8006760 <UART_CheckIdleState>
 8005bce:	4603      	mov	r3, r0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	; 0x28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d13d      	bne.n	8005c6a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_UART_Receive_IT+0x22>
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e036      	b.n	8005c6c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_UART_Receive_IT+0x34>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e02f      	b.n	8005c6c <HAL_UART_Receive_IT+0x94>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d018      	beq.n	8005c5a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	613b      	str	r3, [r7, #16]
   return(result);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	623b      	str	r3, [r7, #32]
 8005c48:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	69f9      	ldr	r1, [r7, #28]
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e6      	bne.n	8005c28 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fe8b 	bl	800697c <UART_Start_Receive_IT>
 8005c66:	4603      	mov	r3, r0
 8005c68:	e000      	b.n	8005c6c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
  }
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3728      	adds	r7, #40	; 0x28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b0ba      	sub	sp, #232	; 0xe8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d115      	bne.n	8005cdc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00f      	beq.n	8005cdc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d009      	beq.n	8005cdc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 82a3 	beq.w	8006218 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
      }
      return;
 8005cda:	e29d      	b.n	8006218 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8117 	beq.w	8005f14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005cf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005cf6:	4b85      	ldr	r3, [pc, #532]	; (8005f0c <HAL_UART_IRQHandler+0x298>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 810a 	beq.w	8005f14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d011      	beq.n	8005d30 <HAL_UART_IRQHandler+0xbc>
 8005d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00b      	beq.n	8005d30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d26:	f043 0201 	orr.w	r2, r3, #1
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d011      	beq.n	8005d60 <HAL_UART_IRQHandler+0xec>
 8005d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00b      	beq.n	8005d60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d56:	f043 0204 	orr.w	r2, r3, #4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d011      	beq.n	8005d90 <HAL_UART_IRQHandler+0x11c>
 8005d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d86:	f043 0202 	orr.w	r2, r3, #2
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d017      	beq.n	8005dcc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d105      	bne.n	8005db4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00b      	beq.n	8005dcc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2208      	movs	r2, #8
 8005dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc2:	f043 0208 	orr.w	r2, r3, #8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d012      	beq.n	8005dfe <HAL_UART_IRQHandler+0x18a>
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00c      	beq.n	8005dfe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8209 	beq.w	800621c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00d      	beq.n	8005e32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d005      	beq.n	8005e56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d04f      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fe28 	bl	8006aac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d141      	bne.n	8005eee <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3308      	adds	r3, #8
 8005e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1d9      	bne.n	8005e6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d013      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <HAL_UART_IRQHandler+0x29c>)
 8005ec4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fd f81e 	bl	8002f0c <HAL_DMA_Abort_IT>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d017      	beq.n	8005f06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee4:	e00f      	b.n	8005f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f9ac 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eec:	e00b      	b.n	8005f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9a8 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef4:	e007      	b.n	8005f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f9a4 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005f04:	e18a      	b.n	800621c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f06:	bf00      	nop
    return;
 8005f08:	e188      	b.n	800621c <HAL_UART_IRQHandler+0x5a8>
 8005f0a:	bf00      	nop
 8005f0c:	04000120 	.word	0x04000120
 8005f10:	08006b73 	.word	0x08006b73

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	f040 8143 	bne.w	80061a4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 813c 	beq.w	80061a4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8135 	beq.w	80061a4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2210      	movs	r2, #16
 8005f40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	f040 80b1 	bne.w	80060b4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 815c 	beq.w	8006220 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f72:	429a      	cmp	r2, r3
 8005f74:	f080 8154 	bcs.w	8006220 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	f000 8085 	beq.w	8006098 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005faa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fbc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1da      	bne.n	8005f8e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ffc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006000:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006004:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800600e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e1      	bne.n	8005fd8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3308      	adds	r3, #8
 8006034:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006038:	66fa      	str	r2, [r7, #108]	; 0x6c
 800603a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800603e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e3      	bne.n	8006014 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006068:	f023 0310 	bic.w	r3, r3, #16
 800606c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800607a:	65bb      	str	r3, [r7, #88]	; 0x58
 800607c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006080:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e4      	bne.n	8006058 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006092:	4618      	mov	r0, r3
 8006094:	f7fc ff01 	bl	8002e9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f8d3 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060b2:	e0b5      	b.n	8006220 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80a7 	beq.w	8006224 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80060d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80a2 	beq.w	8006224 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006102:	647b      	str	r3, [r7, #68]	; 0x44
 8006104:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e4      	bne.n	80060e0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3308      	adds	r3, #8
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	623b      	str	r3, [r7, #32]
   return(result);
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	f023 0301 	bic.w	r3, r3, #1
 800612c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3308      	adds	r3, #8
 8006136:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800613a:	633a      	str	r2, [r7, #48]	; 0x30
 800613c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e3      	bne.n	8006116 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	60fb      	str	r3, [r7, #12]
   return(result);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f023 0310 	bic.w	r3, r3, #16
 8006174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006182:	61fb      	str	r3, [r7, #28]
 8006184:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	69b9      	ldr	r1, [r7, #24]
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	617b      	str	r3, [r7, #20]
   return(result);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e4      	bne.n	8006160 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006196:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f85b 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061a2:	e03f      	b.n	8006224 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00e      	beq.n	80061ce <HAL_UART_IRQHandler+0x55a>
 80061b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d008      	beq.n	80061ce <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fe6f 	bl	8006eaa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061cc:	e02d      	b.n	800622a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00e      	beq.n	80061f8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d008      	beq.n	80061f8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01c      	beq.n	8006228 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
    }
    return;
 80061f6:	e017      	b.n	8006228 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d012      	beq.n	800622a <HAL_UART_IRQHandler+0x5b6>
 8006204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00c      	beq.n	800622a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fcc4 	bl	8006b9e <UART_EndTransmit_IT>
    return;
 8006216:	e008      	b.n	800622a <HAL_UART_IRQHandler+0x5b6>
      return;
 8006218:	bf00      	nop
 800621a:	e006      	b.n	800622a <HAL_UART_IRQHandler+0x5b6>
    return;
 800621c:	bf00      	nop
 800621e:	e004      	b.n	800622a <HAL_UART_IRQHandler+0x5b6>
      return;
 8006220:	bf00      	nop
 8006222:	e002      	b.n	800622a <HAL_UART_IRQHandler+0x5b6>
      return;
 8006224:	bf00      	nop
 8006226:	e000      	b.n	800622a <HAL_UART_IRQHandler+0x5b6>
    return;
 8006228:	bf00      	nop
  }

}
 800622a:	37e8      	adds	r7, #232	; 0xe8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800629e:	f023 030c 	bic.w	r3, r3, #12
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	6979      	ldr	r1, [r7, #20]
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4aa8      	ldr	r2, [pc, #672]	; (800658c <UART_SetConfig+0x31c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d120      	bne.n	8006332 <UART_SetConfig+0xc2>
 80062f0:	4ba7      	ldr	r3, [pc, #668]	; (8006590 <UART_SetConfig+0x320>)
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d817      	bhi.n	800632c <UART_SetConfig+0xbc>
 80062fc:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <UART_SetConfig+0x94>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	08006315 	.word	0x08006315
 8006308:	08006321 	.word	0x08006321
 800630c:	08006327 	.word	0x08006327
 8006310:	0800631b 	.word	0x0800631b
 8006314:	2301      	movs	r3, #1
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e0b5      	b.n	8006486 <UART_SetConfig+0x216>
 800631a:	2302      	movs	r3, #2
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e0b2      	b.n	8006486 <UART_SetConfig+0x216>
 8006320:	2304      	movs	r3, #4
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e0af      	b.n	8006486 <UART_SetConfig+0x216>
 8006326:	2308      	movs	r3, #8
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e0ac      	b.n	8006486 <UART_SetConfig+0x216>
 800632c:	2310      	movs	r3, #16
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e0a9      	b.n	8006486 <UART_SetConfig+0x216>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a97      	ldr	r2, [pc, #604]	; (8006594 <UART_SetConfig+0x324>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d124      	bne.n	8006386 <UART_SetConfig+0x116>
 800633c:	4b94      	ldr	r3, [pc, #592]	; (8006590 <UART_SetConfig+0x320>)
 800633e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006344:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006348:	d011      	beq.n	800636e <UART_SetConfig+0xfe>
 800634a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800634e:	d817      	bhi.n	8006380 <UART_SetConfig+0x110>
 8006350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006354:	d011      	beq.n	800637a <UART_SetConfig+0x10a>
 8006356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800635a:	d811      	bhi.n	8006380 <UART_SetConfig+0x110>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <UART_SetConfig+0xf8>
 8006360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006364:	d006      	beq.n	8006374 <UART_SetConfig+0x104>
 8006366:	e00b      	b.n	8006380 <UART_SetConfig+0x110>
 8006368:	2300      	movs	r3, #0
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e08b      	b.n	8006486 <UART_SetConfig+0x216>
 800636e:	2302      	movs	r3, #2
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e088      	b.n	8006486 <UART_SetConfig+0x216>
 8006374:	2304      	movs	r3, #4
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e085      	b.n	8006486 <UART_SetConfig+0x216>
 800637a:	2308      	movs	r3, #8
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e082      	b.n	8006486 <UART_SetConfig+0x216>
 8006380:	2310      	movs	r3, #16
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e07f      	b.n	8006486 <UART_SetConfig+0x216>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a83      	ldr	r2, [pc, #524]	; (8006598 <UART_SetConfig+0x328>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d124      	bne.n	80063da <UART_SetConfig+0x16a>
 8006390:	4b7f      	ldr	r3, [pc, #508]	; (8006590 <UART_SetConfig+0x320>)
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006398:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800639c:	d011      	beq.n	80063c2 <UART_SetConfig+0x152>
 800639e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063a2:	d817      	bhi.n	80063d4 <UART_SetConfig+0x164>
 80063a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063a8:	d011      	beq.n	80063ce <UART_SetConfig+0x15e>
 80063aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063ae:	d811      	bhi.n	80063d4 <UART_SetConfig+0x164>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <UART_SetConfig+0x14c>
 80063b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063b8:	d006      	beq.n	80063c8 <UART_SetConfig+0x158>
 80063ba:	e00b      	b.n	80063d4 <UART_SetConfig+0x164>
 80063bc:	2300      	movs	r3, #0
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e061      	b.n	8006486 <UART_SetConfig+0x216>
 80063c2:	2302      	movs	r3, #2
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e05e      	b.n	8006486 <UART_SetConfig+0x216>
 80063c8:	2304      	movs	r3, #4
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e05b      	b.n	8006486 <UART_SetConfig+0x216>
 80063ce:	2308      	movs	r3, #8
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e058      	b.n	8006486 <UART_SetConfig+0x216>
 80063d4:	2310      	movs	r3, #16
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e055      	b.n	8006486 <UART_SetConfig+0x216>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a6f      	ldr	r2, [pc, #444]	; (800659c <UART_SetConfig+0x32c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d124      	bne.n	800642e <UART_SetConfig+0x1be>
 80063e4:	4b6a      	ldr	r3, [pc, #424]	; (8006590 <UART_SetConfig+0x320>)
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80063ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063f0:	d011      	beq.n	8006416 <UART_SetConfig+0x1a6>
 80063f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063f6:	d817      	bhi.n	8006428 <UART_SetConfig+0x1b8>
 80063f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063fc:	d011      	beq.n	8006422 <UART_SetConfig+0x1b2>
 80063fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006402:	d811      	bhi.n	8006428 <UART_SetConfig+0x1b8>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <UART_SetConfig+0x1a0>
 8006408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800640c:	d006      	beq.n	800641c <UART_SetConfig+0x1ac>
 800640e:	e00b      	b.n	8006428 <UART_SetConfig+0x1b8>
 8006410:	2300      	movs	r3, #0
 8006412:	77fb      	strb	r3, [r7, #31]
 8006414:	e037      	b.n	8006486 <UART_SetConfig+0x216>
 8006416:	2302      	movs	r3, #2
 8006418:	77fb      	strb	r3, [r7, #31]
 800641a:	e034      	b.n	8006486 <UART_SetConfig+0x216>
 800641c:	2304      	movs	r3, #4
 800641e:	77fb      	strb	r3, [r7, #31]
 8006420:	e031      	b.n	8006486 <UART_SetConfig+0x216>
 8006422:	2308      	movs	r3, #8
 8006424:	77fb      	strb	r3, [r7, #31]
 8006426:	e02e      	b.n	8006486 <UART_SetConfig+0x216>
 8006428:	2310      	movs	r3, #16
 800642a:	77fb      	strb	r3, [r7, #31]
 800642c:	e02b      	b.n	8006486 <UART_SetConfig+0x216>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a5b      	ldr	r2, [pc, #364]	; (80065a0 <UART_SetConfig+0x330>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d124      	bne.n	8006482 <UART_SetConfig+0x212>
 8006438:	4b55      	ldr	r3, [pc, #340]	; (8006590 <UART_SetConfig+0x320>)
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006440:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006444:	d011      	beq.n	800646a <UART_SetConfig+0x1fa>
 8006446:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800644a:	d817      	bhi.n	800647c <UART_SetConfig+0x20c>
 800644c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006450:	d011      	beq.n	8006476 <UART_SetConfig+0x206>
 8006452:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006456:	d811      	bhi.n	800647c <UART_SetConfig+0x20c>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <UART_SetConfig+0x1f4>
 800645c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006460:	d006      	beq.n	8006470 <UART_SetConfig+0x200>
 8006462:	e00b      	b.n	800647c <UART_SetConfig+0x20c>
 8006464:	2300      	movs	r3, #0
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e00d      	b.n	8006486 <UART_SetConfig+0x216>
 800646a:	2302      	movs	r3, #2
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e00a      	b.n	8006486 <UART_SetConfig+0x216>
 8006470:	2304      	movs	r3, #4
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e007      	b.n	8006486 <UART_SetConfig+0x216>
 8006476:	2308      	movs	r3, #8
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e004      	b.n	8006486 <UART_SetConfig+0x216>
 800647c:	2310      	movs	r3, #16
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e001      	b.n	8006486 <UART_SetConfig+0x216>
 8006482:	2310      	movs	r3, #16
 8006484:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800648e:	d15c      	bne.n	800654a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006490:	7ffb      	ldrb	r3, [r7, #31]
 8006492:	2b08      	cmp	r3, #8
 8006494:	d827      	bhi.n	80064e6 <UART_SetConfig+0x276>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <UART_SetConfig+0x22c>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	080064e7 	.word	0x080064e7
 80064ac:	080064d7 	.word	0x080064d7
 80064b0:	080064e7 	.word	0x080064e7
 80064b4:	080064e7 	.word	0x080064e7
 80064b8:	080064e7 	.word	0x080064e7
 80064bc:	080064df 	.word	0x080064df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c0:	f7fe fb72 	bl	8004ba8 <HAL_RCC_GetPCLK1Freq>
 80064c4:	61b8      	str	r0, [r7, #24]
        break;
 80064c6:	e013      	b.n	80064f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c8:	f7fe fb90 	bl	8004bec <HAL_RCC_GetPCLK2Freq>
 80064cc:	61b8      	str	r0, [r7, #24]
        break;
 80064ce:	e00f      	b.n	80064f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d0:	4b34      	ldr	r3, [pc, #208]	; (80065a4 <UART_SetConfig+0x334>)
 80064d2:	61bb      	str	r3, [r7, #24]
        break;
 80064d4:	e00c      	b.n	80064f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d6:	f7fe faf1 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 80064da:	61b8      	str	r0, [r7, #24]
        break;
 80064dc:	e008      	b.n	80064f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e2:	61bb      	str	r3, [r7, #24]
        break;
 80064e4:	e004      	b.n	80064f0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	77bb      	strb	r3, [r7, #30]
        break;
 80064ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8084 	beq.w	8006600 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	005a      	lsls	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	441a      	add	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	b29b      	uxth	r3, r3
 800650e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b0f      	cmp	r3, #15
 8006514:	d916      	bls.n	8006544 <UART_SetConfig+0x2d4>
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651c:	d212      	bcs.n	8006544 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	b29b      	uxth	r3, r3
 8006522:	f023 030f 	bic.w	r3, r3, #15
 8006526:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	085b      	lsrs	r3, r3, #1
 800652c:	b29b      	uxth	r3, r3
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	b29a      	uxth	r2, r3
 8006534:	89fb      	ldrh	r3, [r7, #14]
 8006536:	4313      	orrs	r3, r2
 8006538:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	89fa      	ldrh	r2, [r7, #14]
 8006540:	60da      	str	r2, [r3, #12]
 8006542:	e05d      	b.n	8006600 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	77bb      	strb	r3, [r7, #30]
 8006548:	e05a      	b.n	8006600 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800654a:	7ffb      	ldrb	r3, [r7, #31]
 800654c:	2b08      	cmp	r3, #8
 800654e:	d836      	bhi.n	80065be <UART_SetConfig+0x34e>
 8006550:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <UART_SetConfig+0x2e8>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	0800657d 	.word	0x0800657d
 800655c:	08006585 	.word	0x08006585
 8006560:	080065a9 	.word	0x080065a9
 8006564:	080065bf 	.word	0x080065bf
 8006568:	080065af 	.word	0x080065af
 800656c:	080065bf 	.word	0x080065bf
 8006570:	080065bf 	.word	0x080065bf
 8006574:	080065bf 	.word	0x080065bf
 8006578:	080065b7 	.word	0x080065b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800657c:	f7fe fb14 	bl	8004ba8 <HAL_RCC_GetPCLK1Freq>
 8006580:	61b8      	str	r0, [r7, #24]
        break;
 8006582:	e021      	b.n	80065c8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006584:	f7fe fb32 	bl	8004bec <HAL_RCC_GetPCLK2Freq>
 8006588:	61b8      	str	r0, [r7, #24]
        break;
 800658a:	e01d      	b.n	80065c8 <UART_SetConfig+0x358>
 800658c:	40013800 	.word	0x40013800
 8006590:	40021000 	.word	0x40021000
 8006594:	40004400 	.word	0x40004400
 8006598:	40004800 	.word	0x40004800
 800659c:	40004c00 	.word	0x40004c00
 80065a0:	40005000 	.word	0x40005000
 80065a4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a8:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <UART_SetConfig+0x3a8>)
 80065aa:	61bb      	str	r3, [r7, #24]
        break;
 80065ac:	e00c      	b.n	80065c8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ae:	f7fe fa85 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 80065b2:	61b8      	str	r0, [r7, #24]
        break;
 80065b4:	e008      	b.n	80065c8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ba:	61bb      	str	r3, [r7, #24]
        break;
 80065bc:	e004      	b.n	80065c8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	77bb      	strb	r3, [r7, #30]
        break;
 80065c6:	bf00      	nop
    }

    if (pclk != 0U)
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d018      	beq.n	8006600 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	085a      	lsrs	r2, r3, #1
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	441a      	add	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b0f      	cmp	r3, #15
 80065e8:	d908      	bls.n	80065fc <UART_SetConfig+0x38c>
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f0:	d204      	bcs.n	80065fc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	e001      	b.n	8006600 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800660c:	7fbb      	ldrb	r3, [r7, #30]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3720      	adds	r7, #32
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	007a1200 	.word	0x007a1200

0800661c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	f003 0310 	and.w	r3, r3, #16
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00a      	beq.n	80066ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01a      	beq.n	8006732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800671a:	d10a      	bne.n	8006732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	605a      	str	r2, [r3, #4]
  }
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af02      	add	r7, sp, #8
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006770:	f7fa febe 	bl	80014f0 <HAL_GetTick>
 8006774:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b08      	cmp	r3, #8
 8006782:	d10e      	bne.n	80067a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f82d 	bl	80067f2 <UART_WaitOnFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e023      	b.n	80067ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d10e      	bne.n	80067ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f817 	bl	80067f2 <UART_WaitOnFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e00d      	b.n	80067ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b09c      	sub	sp, #112	; 0x70
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	603b      	str	r3, [r7, #0]
 80067fe:	4613      	mov	r3, r2
 8006800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006802:	e0a5      	b.n	8006950 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	f000 80a1 	beq.w	8006950 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680e:	f7fa fe6f 	bl	80014f0 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800681a:	429a      	cmp	r2, r3
 800681c:	d302      	bcc.n	8006824 <UART_WaitOnFlagUntilTimeout+0x32>
 800681e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006820:	2b00      	cmp	r3, #0
 8006822:	d13e      	bne.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006838:	667b      	str	r3, [r7, #100]	; 0x64
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006844:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e6      	bne.n	8006824 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	663b      	str	r3, [r7, #96]	; 0x60
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3308      	adds	r3, #8
 8006874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006876:	64ba      	str	r2, [r7, #72]	; 0x48
 8006878:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800687c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e5      	bne.n	8006856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2220      	movs	r2, #32
 800688e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e067      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d04f      	beq.n	8006950 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068be:	d147      	bne.n	8006950 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e6      	bne.n	80068ca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3308      	adds	r3, #8
 8006902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	613b      	str	r3, [r7, #16]
   return(result);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f023 0301 	bic.w	r3, r3, #1
 8006912:	66bb      	str	r3, [r7, #104]	; 0x68
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3308      	adds	r3, #8
 800691a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800691c:	623a      	str	r2, [r7, #32]
 800691e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	69f9      	ldr	r1, [r7, #28]
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	61bb      	str	r3, [r7, #24]
   return(result);
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e5      	bne.n	80068fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2220      	movs	r2, #32
 800693a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e010      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69da      	ldr	r2, [r3, #28]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4013      	ands	r3, r2
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	429a      	cmp	r2, r3
 800695e:	bf0c      	ite	eq
 8006960:	2301      	moveq	r3, #1
 8006962:	2300      	movne	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	461a      	mov	r2, r3
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	429a      	cmp	r2, r3
 800696c:	f43f af4a 	beq.w	8006804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3770      	adds	r7, #112	; 0x70
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800697c:	b480      	push	{r7}
 800697e:	b091      	sub	sp, #68	; 0x44
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	4613      	mov	r3, r2
 8006988:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	88fa      	ldrh	r2, [r7, #6]
 8006994:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	88fa      	ldrh	r2, [r7, #6]
 800699c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ae:	d10e      	bne.n	80069ce <UART_Start_Receive_IT+0x52>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d105      	bne.n	80069c4 <UART_Start_Receive_IT+0x48>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069c2:	e01a      	b.n	80069fa <UART_Start_Receive_IT+0x7e>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	22ff      	movs	r2, #255	; 0xff
 80069c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069cc:	e015      	b.n	80069fa <UART_Start_Receive_IT+0x7e>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10d      	bne.n	80069f2 <UART_Start_Receive_IT+0x76>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <UART_Start_Receive_IT+0x6c>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	22ff      	movs	r2, #255	; 0xff
 80069e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069e6:	e008      	b.n	80069fa <UART_Start_Receive_IT+0x7e>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	227f      	movs	r2, #127	; 0x7f
 80069ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069f0:	e003      	b.n	80069fa <UART_Start_Receive_IT+0x7e>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2222      	movs	r2, #34	; 0x22
 8006a06:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a28:	637a      	str	r2, [r7, #52]	; 0x34
 8006a2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e5      	bne.n	8006a08 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a44:	d107      	bne.n	8006a56 <UART_Start_Receive_IT+0xda>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d103      	bne.n	8006a56 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a14      	ldr	r2, [pc, #80]	; (8006aa4 <UART_Start_Receive_IT+0x128>)
 8006a52:	665a      	str	r2, [r3, #100]	; 0x64
 8006a54:	e002      	b.n	8006a5c <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4a13      	ldr	r2, [pc, #76]	; (8006aa8 <UART_Start_Receive_IT+0x12c>)
 8006a5a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	613b      	str	r3, [r7, #16]
   return(result);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	623b      	str	r3, [r7, #32]
 8006a84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	69f9      	ldr	r1, [r7, #28]
 8006a88:	6a3a      	ldr	r2, [r7, #32]
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e6      	bne.n	8006a64 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3744      	adds	r7, #68	; 0x44
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	08006d4f 	.word	0x08006d4f
 8006aa8:	08006bf3 	.word	0x08006bf3

08006aac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b095      	sub	sp, #84	; 0x54
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ad8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e6      	bne.n	8006ab4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3308      	adds	r3, #8
 8006aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e5      	bne.n	8006ae6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d118      	bne.n	8006b54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f023 0310 	bic.w	r3, r3, #16
 8006b36:	647b      	str	r3, [r7, #68]	; 0x44
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	6979      	ldr	r1, [r7, #20]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e6      	bne.n	8006b22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006b66:	bf00      	nop
 8006b68:	3754      	adds	r7, #84	; 0x54
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff fb57 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b088      	sub	sp, #32
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6979      	ldr	r1, [r7, #20]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e6      	bne.n	8006ba6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff fb23 	bl	8006230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bea:	bf00      	nop
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b096      	sub	sp, #88	; 0x58
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c08:	2b22      	cmp	r3, #34	; 0x22
 8006c0a:	f040 8094 	bne.w	8006d36 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c18:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c1c:	b2d9      	uxtb	r1, r3
 8006c1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c28:	400a      	ands	r2, r1
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d177      	bne.n	8006d46 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c6a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c74:	647b      	str	r3, [r7, #68]	; 0x44
 8006c76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e6      	bne.n	8006c56 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	623b      	str	r3, [r7, #32]
   return(result);
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	f023 0301 	bic.w	r3, r3, #1
 8006c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ca8:	633a      	str	r2, [r7, #48]	; 0x30
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e5      	bne.n	8006c88 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d12e      	bne.n	8006d2e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0310 	bic.w	r3, r3, #16
 8006cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	69b9      	ldr	r1, [r7, #24]
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	617b      	str	r3, [r7, #20]
   return(result);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e6      	bne.n	8006cd6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	2b10      	cmp	r3, #16
 8006d14:	d103      	bne.n	8006d1e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7ff fa96 	bl	8006258 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d2c:	e00b      	b.n	8006d46 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7f9 fd58 	bl	80007e4 <HAL_UART_RxCpltCallback>
}
 8006d34:	e007      	b.n	8006d46 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	699a      	ldr	r2, [r3, #24]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0208 	orr.w	r2, r2, #8
 8006d44:	619a      	str	r2, [r3, #24]
}
 8006d46:	bf00      	nop
 8006d48:	3758      	adds	r7, #88	; 0x58
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b096      	sub	sp, #88	; 0x58
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d64:	2b22      	cmp	r3, #34	; 0x22
 8006d66:	f040 8094 	bne.w	8006e92 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d70:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d7a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006d7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d82:	4013      	ands	r3, r2
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8e:	1c9a      	adds	r2, r3, #2
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d177      	bne.n	8006ea2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e6      	bne.n	8006db2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3308      	adds	r3, #8
 8006dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f023 0301 	bic.w	r3, r3, #1
 8006dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3308      	adds	r3, #8
 8006e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e5      	bne.n	8006de4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d12e      	bne.n	8006e8a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	e853 3f00 	ldrex	r3, [r3]
 8006e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f023 0310 	bic.w	r3, r3, #16
 8006e46:	647b      	str	r3, [r7, #68]	; 0x44
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	6979      	ldr	r1, [r7, #20]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e6      	bne.n	8006e32 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	f003 0310 	and.w	r3, r3, #16
 8006e6e:	2b10      	cmp	r3, #16
 8006e70:	d103      	bne.n	8006e7a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2210      	movs	r2, #16
 8006e78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff f9e8 	bl	8006258 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e88:	e00b      	b.n	8006ea2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7f9 fcaa 	bl	80007e4 <HAL_UART_RxCpltCallback>
}
 8006e90:	e007      	b.n	8006ea2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f042 0208 	orr.w	r2, r2, #8
 8006ea0:	619a      	str	r2, [r3, #24]
}
 8006ea2:	bf00      	nop
 8006ea4:	3758      	adds	r7, #88	; 0x58
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ec6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006eca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	4013      	ands	r3, r2
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	f107 0014 	add.w	r0, r7, #20
 8006f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	b004      	add	sp, #16
 8006f34:	4770      	bx	lr
	...

08006f38 <__libc_init_array>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	4d0d      	ldr	r5, [pc, #52]	; (8006f70 <__libc_init_array+0x38>)
 8006f3c:	4c0d      	ldr	r4, [pc, #52]	; (8006f74 <__libc_init_array+0x3c>)
 8006f3e:	1b64      	subs	r4, r4, r5
 8006f40:	10a4      	asrs	r4, r4, #2
 8006f42:	2600      	movs	r6, #0
 8006f44:	42a6      	cmp	r6, r4
 8006f46:	d109      	bne.n	8006f5c <__libc_init_array+0x24>
 8006f48:	4d0b      	ldr	r5, [pc, #44]	; (8006f78 <__libc_init_array+0x40>)
 8006f4a:	4c0c      	ldr	r4, [pc, #48]	; (8006f7c <__libc_init_array+0x44>)
 8006f4c:	f000 f820 	bl	8006f90 <_init>
 8006f50:	1b64      	subs	r4, r4, r5
 8006f52:	10a4      	asrs	r4, r4, #2
 8006f54:	2600      	movs	r6, #0
 8006f56:	42a6      	cmp	r6, r4
 8006f58:	d105      	bne.n	8006f66 <__libc_init_array+0x2e>
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f60:	4798      	blx	r3
 8006f62:	3601      	adds	r6, #1
 8006f64:	e7ee      	b.n	8006f44 <__libc_init_array+0xc>
 8006f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6a:	4798      	blx	r3
 8006f6c:	3601      	adds	r6, #1
 8006f6e:	e7f2      	b.n	8006f56 <__libc_init_array+0x1e>
 8006f70:	08006fe0 	.word	0x08006fe0
 8006f74:	08006fe0 	.word	0x08006fe0
 8006f78:	08006fe0 	.word	0x08006fe0
 8006f7c:	08006fe4 	.word	0x08006fe4

08006f80 <memset>:
 8006f80:	4402      	add	r2, r0
 8006f82:	4603      	mov	r3, r0
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d100      	bne.n	8006f8a <memset+0xa>
 8006f88:	4770      	bx	lr
 8006f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8e:	e7f9      	b.n	8006f84 <memset+0x4>

08006f90 <_init>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr

08006f9c <_fini>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr
