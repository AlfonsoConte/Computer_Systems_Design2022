
LuceSmart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a70  08006a70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006a70  08006a70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a70  08006a70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000584  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000590  20000590  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a5e2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e3c  00000000  00000000  0003a61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  0003d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014a8  00000000  00000000  0003ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f66b  00000000  00000000  0003feb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b84e  00000000  00000000  0005f51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c27fe  00000000  00000000  0007ad69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d567  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d58  00000000  00000000  0013d5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006a20 	.word	0x08006a20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006a20 	.word	0x08006a20

080001c8 <delay_us>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <delay_us+0x30>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2200      	movs	r2, #0
 80001d8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2)<=us);
 80001da:	bf00      	nop
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <delay_us+0x30>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001e2:	88fb      	ldrh	r3, [r7, #6]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d9f9      	bls.n	80001dc <delay_us+0x14>
}
 80001e8:	bf00      	nop
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	2000012c 	.word	0x2000012c

080001fc <receive_data_ir>:

int stato = 0;
int config = 0;
int countdown = 0;

uint32_t receive_data_ir (void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
	  uint32_t code=0;
 8000202:	2300      	movs	r3, #0
 8000204:	60fb      	str	r3, [r7, #12]
	  while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)));  // wait for the pin to go high.. 9ms LOW
 8000206:	bf00      	nop
 8000208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800020c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000210:	f002 fd7c 	bl	8002d0c <HAL_GPIO_ReadPin>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d0f6      	beq.n	8000208 <receive_data_ir+0xc>
      while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)));  // wait for the pin to go low.. 4.5ms HIGH
 800021a:	bf00      	nop
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000224:	f002 fd72 	bl	8002d0c <HAL_GPIO_ReadPin>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d1f6      	bne.n	800021c <receive_data_ir+0x20>



	  for (int i=0; i<32; i++){
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
 8000232:	e033      	b.n	800029c <receive_data_ir+0xa0>
		  uint8_t count=0;
 8000234:	2300      	movs	r3, #0
 8000236:	71fb      	strb	r3, [r7, #7]
		  while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)));
 8000238:	bf00      	nop
 800023a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800023e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000242:	f002 fd63 	bl	8002d0c <HAL_GPIO_ReadPin>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d0f6      	beq.n	800023a <receive_data_ir+0x3e>
		  while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10))){
 800024c:	e005      	b.n	800025a <receive_data_ir+0x5e>
			  count++;
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	3301      	adds	r3, #1
 8000252:	71fb      	strb	r3, [r7, #7]
			  delay_us(100);
 8000254:	2064      	movs	r0, #100	; 0x64
 8000256:	f7ff ffb7 	bl	80001c8 <delay_us>
		  while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10))){
 800025a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000262:	f002 fd53 	bl	8002d0c <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d1f0      	bne.n	800024e <receive_data_ir+0x52>
		  }

		  if (count > 12) code |= (1UL << (31-i));
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	2b0c      	cmp	r3, #12
 8000270:	d908      	bls.n	8000284 <receive_data_ir+0x88>
 8000272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	fa22 f303 	lsr.w	r3, r2, r3
 800027c:	68fa      	ldr	r2, [r7, #12]
 800027e:	4313      	orrs	r3, r2
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e008      	b.n	8000296 <receive_data_ir+0x9a>
		  else code &= ~(1UL << (31-i));
 8000284:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	fa22 f303 	lsr.w	r3, r2, r3
 800028e:	43db      	mvns	r3, r3
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	4013      	ands	r3, r2
 8000294:	60fb      	str	r3, [r7, #12]
	  for (int i=0; i<32; i++){
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	3301      	adds	r3, #1
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	2b1f      	cmp	r3, #31
 80002a0:	ddc8      	ble.n	8000234 <receive_data_ir+0x38>
	  }

		return code;
 80002a2:	68fb      	ldr	r3, [r7, #12]
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <convert_data_ir>:

int convert_data_ir(uint32_t data){
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	switch(data) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ba:	f000 80da 	beq.w	8000472 <convert_data_ir+0x1c6>
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a71      	ldr	r2, [pc, #452]	; (8000488 <convert_data_ir+0x1dc>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	f000 80ad 	beq.w	8000422 <convert_data_ir+0x176>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a6f      	ldr	r2, [pc, #444]	; (8000488 <convert_data_ir+0x1dc>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	f200 80d2 	bhi.w	8000476 <convert_data_ir+0x1ca>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a6d      	ldr	r2, [pc, #436]	; (800048c <convert_data_ir+0x1e0>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	f000 80ad 	beq.w	8000436 <convert_data_ir+0x18a>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a6b      	ldr	r2, [pc, #428]	; (800048c <convert_data_ir+0x1e0>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	f200 80c8 	bhi.w	8000476 <convert_data_ir+0x1ca>
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a69      	ldr	r2, [pc, #420]	; (8000490 <convert_data_ir+0x1e4>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	f000 80a1 	beq.w	8000432 <convert_data_ir+0x186>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a67      	ldr	r2, [pc, #412]	; (8000490 <convert_data_ir+0x1e4>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	f200 80be 	bhi.w	8000476 <convert_data_ir+0x1ca>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a65      	ldr	r2, [pc, #404]	; (8000494 <convert_data_ir+0x1e8>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	f000 80a1 	beq.w	8000446 <convert_data_ir+0x19a>
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a63      	ldr	r2, [pc, #396]	; (8000494 <convert_data_ir+0x1e8>)
 8000308:	4293      	cmp	r3, r2
 800030a:	f200 80b4 	bhi.w	8000476 <convert_data_ir+0x1ca>
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a61      	ldr	r2, [pc, #388]	; (8000498 <convert_data_ir+0x1ec>)
 8000312:	4293      	cmp	r3, r2
 8000314:	f000 8091 	beq.w	800043a <convert_data_ir+0x18e>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a5f      	ldr	r2, [pc, #380]	; (8000498 <convert_data_ir+0x1ec>)
 800031c:	4293      	cmp	r3, r2
 800031e:	f200 80aa 	bhi.w	8000476 <convert_data_ir+0x1ca>
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a5d      	ldr	r2, [pc, #372]	; (800049c <convert_data_ir+0x1f0>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d079      	beq.n	800041e <convert_data_ir+0x172>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a5b      	ldr	r2, [pc, #364]	; (800049c <convert_data_ir+0x1f0>)
 800032e:	4293      	cmp	r3, r2
 8000330:	f200 80a1 	bhi.w	8000476 <convert_data_ir+0x1ca>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a5a      	ldr	r2, [pc, #360]	; (80004a0 <convert_data_ir+0x1f4>)
 8000338:	4293      	cmp	r3, r2
 800033a:	f000 8082 	beq.w	8000442 <convert_data_ir+0x196>
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a57      	ldr	r2, [pc, #348]	; (80004a0 <convert_data_ir+0x1f4>)
 8000342:	4293      	cmp	r3, r2
 8000344:	f200 8097 	bhi.w	8000476 <convert_data_ir+0x1ca>
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a56      	ldr	r2, [pc, #344]	; (80004a4 <convert_data_ir+0x1f8>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d076      	beq.n	800043e <convert_data_ir+0x192>
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a54      	ldr	r2, [pc, #336]	; (80004a4 <convert_data_ir+0x1f8>)
 8000354:	4293      	cmp	r3, r2
 8000356:	f200 808e 	bhi.w	8000476 <convert_data_ir+0x1ca>
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a52      	ldr	r2, [pc, #328]	; (80004a8 <convert_data_ir+0x1fc>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d079      	beq.n	8000456 <convert_data_ir+0x1aa>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a50      	ldr	r2, [pc, #320]	; (80004a8 <convert_data_ir+0x1fc>)
 8000366:	4293      	cmp	r3, r2
 8000368:	f200 8085 	bhi.w	8000476 <convert_data_ir+0x1ca>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a4f      	ldr	r2, [pc, #316]	; (80004ac <convert_data_ir+0x200>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d06a      	beq.n	800044a <convert_data_ir+0x19e>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a4d      	ldr	r2, [pc, #308]	; (80004ac <convert_data_ir+0x200>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d87c      	bhi.n	8000476 <convert_data_ir+0x1ca>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a4c      	ldr	r2, [pc, #304]	; (80004b0 <convert_data_ir+0x204>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d050      	beq.n	8000426 <convert_data_ir+0x17a>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a4a      	ldr	r2, [pc, #296]	; (80004b0 <convert_data_ir+0x204>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d874      	bhi.n	8000476 <convert_data_ir+0x1ca>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a49      	ldr	r2, [pc, #292]	; (80004b4 <convert_data_ir+0x208>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d066      	beq.n	8000462 <convert_data_ir+0x1b6>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a47      	ldr	r2, [pc, #284]	; (80004b4 <convert_data_ir+0x208>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d86c      	bhi.n	8000476 <convert_data_ir+0x1ca>
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a46      	ldr	r2, [pc, #280]	; (80004b8 <convert_data_ir+0x20c>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d064      	beq.n	800046e <convert_data_ir+0x1c2>
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a44      	ldr	r2, [pc, #272]	; (80004b8 <convert_data_ir+0x20c>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d864      	bhi.n	8000476 <convert_data_ir+0x1ca>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a43      	ldr	r2, [pc, #268]	; (80004bc <convert_data_ir+0x210>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d05a      	beq.n	800046a <convert_data_ir+0x1be>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a41      	ldr	r2, [pc, #260]	; (80004bc <convert_data_ir+0x210>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d85c      	bhi.n	8000476 <convert_data_ir+0x1ca>
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a40      	ldr	r2, [pc, #256]	; (80004c0 <convert_data_ir+0x214>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d050      	beq.n	8000466 <convert_data_ir+0x1ba>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a3e      	ldr	r2, [pc, #248]	; (80004c0 <convert_data_ir+0x214>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d854      	bhi.n	8000476 <convert_data_ir+0x1ca>
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a3d      	ldr	r2, [pc, #244]	; (80004c4 <convert_data_ir+0x218>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d044      	beq.n	800045e <convert_data_ir+0x1b2>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a3b      	ldr	r2, [pc, #236]	; (80004c4 <convert_data_ir+0x218>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d84c      	bhi.n	8000476 <convert_data_ir+0x1ca>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a3a      	ldr	r2, [pc, #232]	; (80004c8 <convert_data_ir+0x21c>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d034      	beq.n	800044e <convert_data_ir+0x1a2>
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a38      	ldr	r2, [pc, #224]	; (80004c8 <convert_data_ir+0x21c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d844      	bhi.n	8000476 <convert_data_ir+0x1ca>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a37      	ldr	r2, [pc, #220]	; (80004cc <convert_data_ir+0x220>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d01a      	beq.n	800042a <convert_data_ir+0x17e>
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a35      	ldr	r2, [pc, #212]	; (80004cc <convert_data_ir+0x220>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d83c      	bhi.n	8000476 <convert_data_ir+0x1ca>
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a34      	ldr	r2, [pc, #208]	; (80004d0 <convert_data_ir+0x224>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d026      	beq.n	8000452 <convert_data_ir+0x1a6>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a32      	ldr	r2, [pc, #200]	; (80004d0 <convert_data_ir+0x224>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d834      	bhi.n	8000476 <convert_data_ir+0x1ca>
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a31      	ldr	r2, [pc, #196]	; (80004d4 <convert_data_ir+0x228>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d00c      	beq.n	800042e <convert_data_ir+0x182>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a30      	ldr	r2, [pc, #192]	; (80004d8 <convert_data_ir+0x22c>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d01e      	beq.n	800045a <convert_data_ir+0x1ae>
 800041c:	e02b      	b.n	8000476 <convert_data_ir+0x1ca>
		case 0xFFA25D: return 0; break; // power
 800041e:	2300      	movs	r3, #0
 8000420:	e02b      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFFE21D: return 1; break; //func/stop
 8000422:	2301      	movs	r3, #1
 8000424:	e029      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF629D: return 2; break; //vol+
 8000426:	2302      	movs	r3, #2
 8000428:	e027      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF22DD: return 3; break; //fast back
 800042a:	2303      	movs	r3, #3
 800042c:	e025      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF02FD: return 4; break; //pause
 800042e:	2304      	movs	r3, #4
 8000430:	e023      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFFC23D: return 5; break; //fast forward
 8000432:	2305      	movs	r3, #5
 8000434:	e021      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFFE01F: return 6; break; //down
 8000436:	2306      	movs	r3, #6
 8000438:	e01f      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFFA857: return 7; break; //vol-
 800043a:	2307      	movs	r3, #7
 800043c:	e01d      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF906F: return 8; break; //up
 800043e:	2308      	movs	r3, #8
 8000440:	e01b      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF9867: return 9; break; // eq
 8000442:	2309      	movs	r3, #9
 8000444:	e019      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFFB04F: return 10; break; //st/rept
 8000446:	230a      	movs	r3, #10
 8000448:	e017      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF6897: return 11; break; //0
 800044a:	230b      	movs	r3, #11
 800044c:	e015      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF30CF: return 12; break; //1
 800044e:	230c      	movs	r3, #12
 8000450:	e013      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF18E7: return 13; break; //2
 8000452:	230d      	movs	r3, #13
 8000454:	e011      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF7A85: return 14; break; //3
 8000456:	230e      	movs	r3, #14
 8000458:	e00f      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF10EF: return 15; break; // 4
 800045a:	230f      	movs	r3, #15
 800045c:	e00d      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF38C7: return 16; break; //5
 800045e:	2310      	movs	r3, #16
 8000460:	e00b      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF5AA5: return 17; break; //6
 8000462:	2311      	movs	r3, #17
 8000464:	e009      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF42BD: return 18; break; //7
 8000466:	2312      	movs	r3, #18
 8000468:	e007      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF4AB5: return 19; break; // 8
 800046a:	2313      	movs	r3, #19
 800046c:	e005      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFF52AD: return 20; break; //9
 800046e:	2314      	movs	r3, #20
 8000470:	e003      	b.n	800047a <convert_data_ir+0x1ce>
		case 0xFFFFFFFF: return 21;break; //repeat
 8000472:	2315      	movs	r3, #21
 8000474:	e001      	b.n	800047a <convert_data_ir+0x1ce>
		default:  return -1; //err
 8000476:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800047a:	4618      	mov	r0, r3
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	00ffe21d 	.word	0x00ffe21d
 800048c:	00ffe01f 	.word	0x00ffe01f
 8000490:	00ffc23d 	.word	0x00ffc23d
 8000494:	00ffb04f 	.word	0x00ffb04f
 8000498:	00ffa857 	.word	0x00ffa857
 800049c:	00ffa25d 	.word	0x00ffa25d
 80004a0:	00ff9867 	.word	0x00ff9867
 80004a4:	00ff906f 	.word	0x00ff906f
 80004a8:	00ff7a85 	.word	0x00ff7a85
 80004ac:	00ff6897 	.word	0x00ff6897
 80004b0:	00ff629d 	.word	0x00ff629d
 80004b4:	00ff5aa5 	.word	0x00ff5aa5
 80004b8:	00ff52ad 	.word	0x00ff52ad
 80004bc:	00ff4ab5 	.word	0x00ff4ab5
 80004c0:	00ff42bd 	.word	0x00ff42bd
 80004c4:	00ff38c7 	.word	0x00ff38c7
 80004c8:	00ff30cf 	.word	0x00ff30cf
 80004cc:	00ff22dd 	.word	0x00ff22dd
 80004d0:	00ff18e7 	.word	0x00ff18e7
 80004d4:	00ff02fd 	.word	0x00ff02fd
 80004d8:	00ff10ef 	.word	0x00ff10ef

080004dc <spegni_luce>:

void spegni_luce(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2101      	movs	r1, #1
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <spegni_luce+0x14>)
 80004e6:	f002 fc29 	bl	8002d3c <HAL_GPIO_WritePin>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	48000400 	.word	0x48000400

080004f4 <accendi_luce>:

void accendi_luce(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2101      	movs	r1, #1
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <accendi_luce+0x14>)
 80004fe:	f002 fc1d 	bl	8002d3c <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	48000400 	.word	0x48000400

0800050c <toggle_luce>:

void toggle_luce(){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000510:	2101      	movs	r1, #1
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <toggle_luce+0x10>)
 8000514:	f002 fc2a 	bl	8002d6c <HAL_GPIO_TogglePin>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	48000400 	.word	0x48000400

08000520 <gestisci_tasto>:

void gestisci_tasto(int tasto){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	if(stato == 0){
 8000528:	4b33      	ldr	r3, [pc, #204]	; (80005f8 <gestisci_tasto+0xd8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <gestisci_tasto+0x34>
		if(tasto == 0){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d102      	bne.n	800053c <gestisci_tasto+0x1c>
			toggle_luce();
 8000536:	f7ff ffe9 	bl	800050c <toggle_luce>
				tasto = tasto - 11;
				countdown = countdown*10 + tasto;
			}
		}
	}
}
 800053a:	e059      	b.n	80005f0 <gestisci_tasto+0xd0>
		else if(tasto == 1){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d156      	bne.n	80005f0 <gestisci_tasto+0xd0>
			spegni_luce();
 8000542:	f7ff ffcb 	bl	80004dc <spegni_luce>
			HAL_TIM_Base_Start_IT(&htim4); // avvio tim3 per le misurazioni della luce
 8000546:	482d      	ldr	r0, [pc, #180]	; (80005fc <gestisci_tasto+0xdc>)
 8000548:	f004 fbce 	bl	8004ce8 <HAL_TIM_Base_Start_IT>
			stato = 1;
 800054c:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <gestisci_tasto+0xd8>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
}
 8000552:	e04d      	b.n	80005f0 <gestisci_tasto+0xd0>
	else if(stato == 1){
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <gestisci_tasto+0xd8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d111      	bne.n	8000580 <gestisci_tasto+0x60>
		if(tasto == 1){
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d146      	bne.n	80005f0 <gestisci_tasto+0xd0>
			HAL_TIM_Base_Stop_IT(&htim4);
 8000562:	4826      	ldr	r0, [pc, #152]	; (80005fc <gestisci_tasto+0xdc>)
 8000564:	f004 fc2a 	bl	8004dbc <HAL_TIM_Base_Stop_IT>
			spegni_luce();
 8000568:	f7ff ffb8 	bl	80004dc <spegni_luce>
			config = 1;
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <gestisci_tasto+0xe0>)
 800056e:	2201      	movs	r2, #1
 8000570:	601a      	str	r2, [r3, #0]
			countdown = 0;
 8000572:	4b24      	ldr	r3, [pc, #144]	; (8000604 <gestisci_tasto+0xe4>)
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
			stato = 2;
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <gestisci_tasto+0xd8>)
 800057a:	2202      	movs	r2, #2
 800057c:	601a      	str	r2, [r3, #0]
}
 800057e:	e037      	b.n	80005f0 <gestisci_tasto+0xd0>
	else if(stato == 2){
 8000580:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <gestisci_tasto+0xd8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b02      	cmp	r3, #2
 8000586:	d133      	bne.n	80005f0 <gestisci_tasto+0xd0>
		if(tasto == 1){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d103      	bne.n	8000596 <gestisci_tasto+0x76>
			stato = 0;
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <gestisci_tasto+0xd8>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	e02c      	b.n	80005f0 <gestisci_tasto+0xd0>
		} else if(config == 1){
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <gestisci_tasto+0xe0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d128      	bne.n	80005f0 <gestisci_tasto+0xd0>
			if(tasto == 9){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b09      	cmp	r3, #9
 80005a2:	d111      	bne.n	80005c8 <gestisci_tasto+0xa8>
				config = 0;
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <gestisci_tasto+0xe0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
				countdown--;
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <gestisci_tasto+0xe4>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <gestisci_tasto+0xe4>)
 80005b2:	6013      	str	r3, [r2, #0]
				accendi_luce();
 80005b4:	f7ff ff9e 	bl	80004f4 <accendi_luce>
				__HAL_TIM_SET_COUNTER(&htim3,0);
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <gestisci_tasto+0xe8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2200      	movs	r2, #0
 80005be:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim3);
 80005c0:	4811      	ldr	r0, [pc, #68]	; (8000608 <gestisci_tasto+0xe8>)
 80005c2:	f004 fb91 	bl	8004ce8 <HAL_TIM_Base_Start_IT>
}
 80005c6:	e013      	b.n	80005f0 <gestisci_tasto+0xd0>
			} else if(tasto >= 11 && tasto <= 20){ // se premo un numero
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b0a      	cmp	r3, #10
 80005cc:	dd10      	ble.n	80005f0 <gestisci_tasto+0xd0>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b14      	cmp	r3, #20
 80005d2:	dc0d      	bgt.n	80005f0 <gestisci_tasto+0xd0>
				tasto = tasto - 11;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3b0b      	subs	r3, #11
 80005d8:	607b      	str	r3, [r7, #4]
				countdown = countdown*10 + tasto;
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <gestisci_tasto+0xe4>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	4a05      	ldr	r2, [pc, #20]	; (8000604 <gestisci_tasto+0xe4>)
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000580 	.word	0x20000580
 80005fc:	200001c4 	.word	0x200001c4
 8000600:	20000584 	.word	0x20000584
 8000604:	20000588 	.word	0x20000588
 8000608:	20000178 	.word	0x20000178

0800060c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_10){
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800061c:	d116      	bne.n	800064c <HAL_GPIO_EXTI_Callback+0x40>
		while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)));
 800061e:	bf00      	nop
 8000620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f002 fb70 	bl	8002d0c <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f6      	bne.n	8000620 <HAL_GPIO_EXTI_Callback+0x14>

		uint32_t data = receive_data_ir();
 8000632:	f7ff fde3 	bl	80001fc <receive_data_ir>
 8000636:	60f8      	str	r0, [r7, #12]
		int tasto_premuto = convert_data_ir(data);
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f7ff fe37 	bl	80002ac <convert_data_ir>
 800063e:	60b8      	str	r0, [r7, #8]

		gestisci_tasto(tasto_premuto);
 8000640:	68b8      	ldr	r0, [r7, #8]
 8000642:	f7ff ff6d 	bl	8000520 <gestisci_tasto>
		HAL_Delay(200);
 8000646:	20c8      	movs	r0, #200	; 0xc8
 8000648:	f000 ff1a 	bl	8001480 <HAL_Delay>
	}
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <recive_data_bt>:


uint8_t recive_data_bt(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, RX_BUFFER, BUFFER_LEN);
 8000658:	2201      	movs	r2, #1
 800065a:	4904      	ldr	r1, [pc, #16]	; (800066c <recive_data_bt+0x18>)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <recive_data_bt+0x1c>)
 800065e:	f005 f803 	bl	8005668 <HAL_UART_Receive_IT>
	return RX_BUFFER[0];
 8000662:	4b02      	ldr	r3, [pc, #8]	; (800066c <recive_data_bt+0x18>)
 8000664:	781b      	ldrb	r3, [r3, #0]
}
 8000666:	4618      	mov	r0, r3
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000028 	.word	0x20000028
 8000670:	20000210 	.word	0x20000210

08000674 <convert_data_bt>:

int convert_data_bt(uint8_t data){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	switch(data) {
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b14      	cmp	r3, #20
 8000682:	dc31      	bgt.n	80006e8 <convert_data_bt+0x74>
 8000684:	2b00      	cmp	r3, #0
 8000686:	db5e      	blt.n	8000746 <convert_data_bt+0xd2>
 8000688:	2b14      	cmp	r3, #20
 800068a:	d85c      	bhi.n	8000746 <convert_data_bt+0xd2>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <convert_data_bt+0x20>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006ef 	.word	0x080006ef
 8000698:	080006f3 	.word	0x080006f3
 800069c:	080006f7 	.word	0x080006f7
 80006a0:	080006fb 	.word	0x080006fb
 80006a4:	080006ff 	.word	0x080006ff
 80006a8:	08000703 	.word	0x08000703
 80006ac:	08000707 	.word	0x08000707
 80006b0:	0800070b 	.word	0x0800070b
 80006b4:	0800070f 	.word	0x0800070f
 80006b8:	08000713 	.word	0x08000713
 80006bc:	08000717 	.word	0x08000717
 80006c0:	0800071b 	.word	0x0800071b
 80006c4:	0800071f 	.word	0x0800071f
 80006c8:	08000723 	.word	0x08000723
 80006cc:	08000727 	.word	0x08000727
 80006d0:	0800072b 	.word	0x0800072b
 80006d4:	0800072f 	.word	0x0800072f
 80006d8:	08000733 	.word	0x08000733
 80006dc:	08000737 	.word	0x08000737
 80006e0:	0800073b 	.word	0x0800073b
 80006e4:	0800073f 	.word	0x0800073f
 80006e8:	2bff      	cmp	r3, #255	; 0xff
 80006ea:	d02a      	beq.n	8000742 <convert_data_bt+0xce>
 80006ec:	e02b      	b.n	8000746 <convert_data_bt+0xd2>
		case 0x00: return 0; break; // power
 80006ee:	2300      	movs	r3, #0
 80006f0:	e02b      	b.n	800074a <convert_data_bt+0xd6>
		case 0x01: return 1; break; //func/stop
 80006f2:	2301      	movs	r3, #1
 80006f4:	e029      	b.n	800074a <convert_data_bt+0xd6>
		case 0x02: return 2; break; //vol+
 80006f6:	2302      	movs	r3, #2
 80006f8:	e027      	b.n	800074a <convert_data_bt+0xd6>
		case 0x03: return 3; break; //fast back
 80006fa:	2303      	movs	r3, #3
 80006fc:	e025      	b.n	800074a <convert_data_bt+0xd6>
		case 0x04: return 4; break; //pause
 80006fe:	2304      	movs	r3, #4
 8000700:	e023      	b.n	800074a <convert_data_bt+0xd6>
		case 0x05: return 5; break; //fast forward
 8000702:	2305      	movs	r3, #5
 8000704:	e021      	b.n	800074a <convert_data_bt+0xd6>
		case 0x06: return 6; break; //down
 8000706:	2306      	movs	r3, #6
 8000708:	e01f      	b.n	800074a <convert_data_bt+0xd6>
		case 0x07: return 7; break; //vol-
 800070a:	2307      	movs	r3, #7
 800070c:	e01d      	b.n	800074a <convert_data_bt+0xd6>
		case 0x08: return 8; break; //up
 800070e:	2308      	movs	r3, #8
 8000710:	e01b      	b.n	800074a <convert_data_bt+0xd6>
		case 0x09: return 9; break; // eq
 8000712:	2309      	movs	r3, #9
 8000714:	e019      	b.n	800074a <convert_data_bt+0xd6>
		case 0x0A: return 10; break; //st/rept
 8000716:	230a      	movs	r3, #10
 8000718:	e017      	b.n	800074a <convert_data_bt+0xd6>
		case 0x0B: return 11; break; //0
 800071a:	230b      	movs	r3, #11
 800071c:	e015      	b.n	800074a <convert_data_bt+0xd6>
		case 0x0C: return 12; break; //1
 800071e:	230c      	movs	r3, #12
 8000720:	e013      	b.n	800074a <convert_data_bt+0xd6>
		case 0x0D: return 13; break; //2
 8000722:	230d      	movs	r3, #13
 8000724:	e011      	b.n	800074a <convert_data_bt+0xd6>
		case 0x0E: return 14; break; //3
 8000726:	230e      	movs	r3, #14
 8000728:	e00f      	b.n	800074a <convert_data_bt+0xd6>
		case 0x0F: return 15; break; // 4
 800072a:	230f      	movs	r3, #15
 800072c:	e00d      	b.n	800074a <convert_data_bt+0xd6>
		case 0x10: return 16; break; //5
 800072e:	2310      	movs	r3, #16
 8000730:	e00b      	b.n	800074a <convert_data_bt+0xd6>
		case 0x11: return 17; break; //6
 8000732:	2311      	movs	r3, #17
 8000734:	e009      	b.n	800074a <convert_data_bt+0xd6>
		case 0x12: return 18; break; //7
 8000736:	2312      	movs	r3, #18
 8000738:	e007      	b.n	800074a <convert_data_bt+0xd6>
		case 0x13: return 19; break; // 8
 800073a:	2313      	movs	r3, #19
 800073c:	e005      	b.n	800074a <convert_data_bt+0xd6>
		case 0x14: return 20; break; //9
 800073e:	2314      	movs	r3, #20
 8000740:	e003      	b.n	800074a <convert_data_bt+0xd6>
		case 0xFF: return 21;break; //repeat
 8000742:	2315      	movs	r3, #21
 8000744:	e001      	b.n	800074a <convert_data_bt+0xd6>
		default:  return -1; //err
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <HAL_UART_RxCpltCallback+0x40>)
 8000768:	f002 fae8 	bl	8002d3c <HAL_GPIO_WritePin>
	if(huart->Instance == huart4.Instance){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <HAL_UART_RxCpltCallback+0x44>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	d10b      	bne.n	8000790 <HAL_UART_RxCpltCallback+0x38>
		uint8_t data = recive_data_bt();
 8000778:	f7ff ff6c 	bl	8000654 <recive_data_bt>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
		int tasto_premuto = convert_data_bt(data);
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff76 	bl	8000674 <convert_data_bt>
 8000788:	60b8      	str	r0, [r7, #8]
		gestisci_tasto(tasto_premuto);
 800078a:	68b8      	ldr	r0, [r7, #8]
 800078c:	f7ff fec8 	bl	8000520 <gestisci_tasto>
	}
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	48001000 	.word	0x48001000
 800079c:	20000210 	.word	0x20000210

080007a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 if(htim == &htim3){
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d115      	bne.n	80007dc <HAL_TIM_PeriodElapsedCallback+0x3c>
	 if(countdown == 0){
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10c      	bne.n	80007d2 <HAL_TIM_PeriodElapsedCallback+0x32>
		 if(stato == 2){
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d104      	bne.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x2a>
			 spegni_luce();
 80007c0:	f7ff fe8c 	bl	80004dc <spegni_luce>
		 	 config = 1;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	601a      	str	r2, [r3, #0]
		 }
		 HAL_TIM_Base_Stop_IT(&htim3);
 80007ca:	4815      	ldr	r0, [pc, #84]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007cc:	f004 faf6 	bl	8004dbc <HAL_TIM_Base_Stop_IT>
 80007d0:	e004      	b.n	80007dc <HAL_TIM_PeriodElapsedCallback+0x3c>
	 }
	 else
		 countdown--;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007da:	6013      	str	r3, [r2, #0]
 }
 if(htim == &htim4 && stato == 1){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d118      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x76>
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d114      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x76>
	 HAL_ADC_Start(&hadc1);
 80007ec:	4811      	ldr	r0, [pc, #68]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80007ee:	f001 f84b 	bl	8001888 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 1);
 80007f2:	2101      	movs	r1, #1
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80007f6:	f001 f95d 	bl	8001ab4 <HAL_ADC_PollForConversion>
	 uint16_t AD_RES = HAL_ADC_GetValue(&hadc1);
 80007fa:	480e      	ldr	r0, [pc, #56]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80007fc:	f001 fa5c 	bl	8001cb8 <HAL_ADC_GetValue>
 8000800:	4603      	mov	r3, r0
 8000802:	81fb      	strh	r3, [r7, #14]
	 if(AD_RES >= 2000) accendi_luce(); //accendi
 8000804:	89fb      	ldrh	r3, [r7, #14]
 8000806:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800080a:	d302      	bcc.n	8000812 <HAL_TIM_PeriodElapsedCallback+0x72>
 800080c:	f7ff fe72 	bl	80004f4 <accendi_luce>
	 else spegni_luce(); //spegni
 }
}
 8000810:	e001      	b.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x76>
	 else spegni_luce(); //spegni
 8000812:	f7ff fe63 	bl	80004dc <spegni_luce>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000178 	.word	0x20000178
 8000824:	20000588 	.word	0x20000588
 8000828:	20000580 	.word	0x20000580
 800082c:	20000584 	.word	0x20000584
 8000830:	200001c4 	.word	0x200001c4
 8000834:	2000002c 	.word	0x2000002c

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083c:	f000 fdba 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f82a 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f000 fabc 	bl	8000dc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000848:	f000 f8fc 	bl	8000a44 <MX_I2C1_Init>
  MX_SPI1_Init();
 800084c:	f000 f93a 	bl	8000ac4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000850:	f000 fa94 	bl	8000d7c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000854:	f000 f974 	bl	8000b40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000858:	f000 f9c0 	bl	8000bdc <MX_TIM3_Init>
  MX_ADC1_Init();
 800085c:	f000 f882 	bl	8000964 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000860:	f000 fa0c 	bl	8000c7c <MX_TIM4_Init>
  MX_UART4_Init();
 8000864:	f000 fa5a 	bl	8000d1c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim2);
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <main+0x50>)
 800086a:	f004 f984 	bl	8004b76 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim2);
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <main+0x50>)
 8000870:	f004 f9d8 	bl	8004c24 <HAL_TIM_Base_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, 0);
 8000874:	2100      	movs	r1, #0
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <main+0x54>)
 8000878:	f001 fa2b 	bl	8001cd2 <HAL_ADCEx_Calibration_Start>


  HAL_UART_Receive_IT(&huart4, RX_BUFFER, BUFFER_LEN);
 800087c:	2201      	movs	r2, #1
 800087e:	4904      	ldr	r1, [pc, #16]	; (8000890 <main+0x58>)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <main+0x5c>)
 8000882:	f004 fef1 	bl	8005668 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000886:	e7fe      	b.n	8000886 <main+0x4e>
 8000888:	2000012c 	.word	0x2000012c
 800088c:	2000002c 	.word	0x2000002c
 8000890:	20000028 	.word	0x20000028
 8000894:	20000210 	.word	0x20000210

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09e      	sub	sp, #120	; 0x78
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008a2:	2228      	movs	r2, #40	; 0x28
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f006 f8b2 	bl	8006a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	223c      	movs	r2, #60	; 0x3c
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 f8a4 	bl	8006a10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008c8:	2303      	movs	r3, #3
 80008ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d6:	2301      	movs	r3, #1
 80008d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008da:	2310      	movs	r3, #16
 80008dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008ec:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fc70 	bl	80031d8 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80008fe:	f000 fafd 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2302      	movs	r3, #2
 8000908:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000918:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800091c:	2101      	movs	r1, #1
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fc98 	bl	8004254 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800092a:	f000 fae7 	bl	8000efc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <SystemClock_Config+0xc8>)
 8000930:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000940:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	4618      	mov	r0, r3
 800094a:	f003 feb9 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000954:	f000 fad2 	bl	8000efc <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	3778      	adds	r7, #120	; 0x78
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	000200a8 	.word	0x000200a8

08000964 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000986:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <MX_ADC1_Init+0xdc>)
 8000988:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800098c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <MX_ADC1_Init+0xdc>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <MX_ADC1_Init+0xdc>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099a:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <MX_ADC1_Init+0xdc>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009d0:	2204      	movs	r2, #4
 80009d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009dc:	2200      	movs	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e0:	4817      	ldr	r0, [pc, #92]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009e2:	f000 fd71 	bl	80014c8 <HAL_ADC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80009ec:	f000 fa86 	bl	8000efc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_ADC1_Init+0xdc>)
 80009fc:	f001 fcc8 	bl	8002390 <HAL_ADCEx_MultiModeConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000a06:	f000 fa79 	bl	8000efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_ADC1_Init+0xdc>)
 8000a28:	f001 f9c6 	bl	8001db8 <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000a32:	f000 fa63 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000002c 	.word	0x2000002c

08000a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <MX_I2C1_Init+0x78>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a50:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <MX_I2C1_Init+0x7c>)
 8000a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a80:	f002 f9a6 	bl	8002dd0 <HAL_I2C_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a8a:	f000 fa37 	bl	8000efc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a92:	f002 fa2c 	bl	8002eee <HAL_I2CEx_ConfigAnalogFilter>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a9c:	f000 fa2e 	bl	8000efc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000aa4:	f002 fa6e 	bl	8002f84 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aae:	f000 fa25 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000007c 	.word	0x2000007c
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	2000090e 	.word	0x2000090e

08000ac4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <MX_SPI1_Init+0x78>)
 8000acc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000ade:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ae2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000afa:	2208      	movs	r2, #8
 8000afc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000b12:	2207      	movs	r2, #7
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000b1e:	2208      	movs	r2, #8
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_SPI1_Init+0x74>)
 8000b24:	f003 ff7c 	bl	8004a20 <HAL_SPI_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b2e:	f000 f9e5 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000c8 	.word	0x200000c8
 8000b3c:	40013000 	.word	0x40013000

08000b40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b68:	222f      	movs	r2, #47	; 0x2f
 8000b6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b86:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b88:	f003 fff5 	bl	8004b76 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b92:	f000 f9b3 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000ba4:	f004 fa58 	bl	8005058 <HAL_TIM_ConfigClockSource>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bae:	f000 f9a5 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000bc0:	f004 fc66 	bl	8005490 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bca:	f000 f997 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000012c 	.word	0x2000012c

08000bdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_TIM3_Init+0x98>)
 8000bfc:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <MX_TIM3_Init+0x9c>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_TIM3_Init+0x98>)
 8000c02:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000c06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_TIM3_Init+0x98>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_TIM3_Init+0x98>)
 8000c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_TIM3_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_TIM3_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c22:	4814      	ldr	r0, [pc, #80]	; (8000c74 <MX_TIM3_Init+0x98>)
 8000c24:	f003 ffa7 	bl	8004b76 <HAL_TIM_Base_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000c2e:	f000 f965 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_TIM3_Init+0x98>)
 8000c40:	f004 fa0a 	bl	8005058 <HAL_TIM_ConfigClockSource>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000c4a:	f000 f957 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_TIM3_Init+0x98>)
 8000c5c:	f004 fc18 	bl	8005490 <HAL_TIMEx_MasterConfigSynchronization>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000c66:	f000 f949 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000178 	.word	0x20000178
 8000c78:	40000400 	.word	0x40000400

08000c7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000c9c:	4a1e      	ldr	r2, [pc, #120]	; (8000d18 <MX_TIM4_Init+0x9c>)
 8000c9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000ca2:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000ca6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000cb0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000cb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cc2:	4814      	ldr	r0, [pc, #80]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000cc4:	f003 ff57 	bl	8004b76 <HAL_TIM_Base_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000cce:	f000 f915 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000ce0:	f004 f9ba 	bl	8005058 <HAL_TIM_ConfigClockSource>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000cea:	f000 f907 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000cfc:	f004 fbc8 	bl	8005490 <HAL_TIMEx_MasterConfigSynchronization>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000d06:	f000 f8f9 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001c4 	.word	0x200001c4
 8000d18:	40000800 	.word	0x40000800

08000d1c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_UART4_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <MX_UART4_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_UART4_Init+0x58>)
 8000d28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_UART4_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_UART4_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_UART4_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_UART4_Init+0x58>)
 8000d42:	2204      	movs	r2, #4
 8000d44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_UART4_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_UART4_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_UART4_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_UART4_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_UART4_Init+0x58>)
 8000d60:	f004 fc34 	bl	80055cc <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f000 f8c7 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000210 	.word	0x20000210
 8000d78:	40004c00 	.word	0x40004c00

08000d7c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_USB_PCD_Init+0x3c>)
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <MX_USB_PCD_Init+0x40>)
 8000d84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_USB_PCD_Init+0x3c>)
 8000d88:	2208      	movs	r2, #8
 8000d8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_USB_PCD_Init+0x3c>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_USB_PCD_Init+0x3c>)
 8000d94:	2202      	movs	r2, #2
 8000d96:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <MX_USB_PCD_Init+0x3c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_USB_PCD_Init+0x3c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_USB_PCD_Init+0x3c>)
 8000da6:	f002 f939 	bl	800301c <HAL_PCD_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000db0:	f000 f8a4 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000294 	.word	0x20000294
 8000dbc:	40005c00 	.word	0x40005c00

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	4b46      	ldr	r3, [pc, #280]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a45      	ldr	r2, [pc, #276]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000ddc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4b40      	ldr	r3, [pc, #256]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000df4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000df8:	6153      	str	r3, [r2, #20]
 8000dfa:	4b3d      	ldr	r3, [pc, #244]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e06:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a39      	ldr	r2, [pc, #228]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	4a33      	ldr	r2, [pc, #204]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	6153      	str	r3, [r2, #20]
 8000e2a:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <MX_GPIO_Init+0x130>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000e54:	4827      	ldr	r0, [pc, #156]	; (8000ef4 <MX_GPIO_Init+0x134>)
 8000e56:	f001 ff71 	bl	8002d3c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4826      	ldr	r0, [pc, #152]	; (8000ef8 <MX_GPIO_Init+0x138>)
 8000e60:	f001 ff6c 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000e64:	2337      	movs	r3, #55	; 0x37
 8000e66:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	481e      	ldr	r0, [pc, #120]	; (8000ef4 <MX_GPIO_Init+0x134>)
 8000e7a:	f001 fdcd 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000e7e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000e82:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <MX_GPIO_Init+0x134>)
 8000e98:	f001 fdbe 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <MX_GPIO_Init+0x138>)
 8000eb4:	f001 fdb0 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ebe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f001 fda1 	bl	8002a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2101      	movs	r1, #1
 8000eda:	2028      	movs	r0, #40	; 0x28
 8000edc:	f001 fcef 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ee0:	2028      	movs	r0, #40	; 0x28
 8000ee2:	f001 fd08 	bl	80028f6 <HAL_NVIC_EnableIRQ>

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48001000 	.word	0x48001000
 8000ef8:	48000400 	.word	0x48000400

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <Error_Handler+0x8>
	...

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_MspInit+0x44>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_MspInit+0x44>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_MspInit+0x44>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_MspInit+0x44>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <HAL_MspInit+0x44>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_MspInit+0x44>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000f3e:	2006      	movs	r0, #6
 8000f40:	f001 fcb2 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f70:	d124      	bne.n	8000fbc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_ADC_MspInit+0x74>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <HAL_ADC_MspInit+0x74>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_ADC_MspInit+0x74>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_ADC_MspInit+0x74>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <HAL_ADC_MspInit+0x74>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	6153      	str	r3, [r2, #20]
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_ADC_MspInit+0x74>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f001 fd2e 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_I2C_MspInit+0x7c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d127      	bne.n	800103a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_I2C_MspInit+0x80>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <HAL_I2C_MspInit+0x80>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff4:	6153      	str	r3, [r2, #20]
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_I2C_MspInit+0x80>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001002:	23c0      	movs	r3, #192	; 0xc0
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001006:	2312      	movs	r3, #18
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100a:	2301      	movs	r3, #1
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001012:	2304      	movs	r3, #4
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <HAL_I2C_MspInit+0x84>)
 800101e:	f001 fcfb 	bl	8002a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_I2C_MspInit+0x80>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_I2C_MspInit+0x80>)
 8001028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_I2C_MspInit+0x80>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40005400 	.word	0x40005400
 8001048:	40021000 	.word	0x40021000
 800104c:	48000400 	.word	0x48000400

08001050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_SPI_MspInit+0x7c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d128      	bne.n	80010c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 8001078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010a2:	23e0      	movs	r3, #224	; 0xe0
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b2:	2305      	movs	r3, #5
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f001 fcaa 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40013000 	.word	0x40013000
 80010d0:	40021000 	.word	0x40021000

080010d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e4:	d10c      	bne.n	8001100 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_TIM_Base_MspInit+0x9c>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a21      	ldr	r2, [pc, #132]	; (8001170 <HAL_TIM_Base_MspInit+0x9c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_TIM_Base_MspInit+0x9c>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010fe:	e032      	b.n	8001166 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <HAL_TIM_Base_MspInit+0xa0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d114      	bne.n	8001134 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_TIM_Base_MspInit+0x9c>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <HAL_TIM_Base_MspInit+0x9c>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_TIM_Base_MspInit+0x9c>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	201d      	movs	r0, #29
 8001128:	f001 fbc9 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800112c:	201d      	movs	r0, #29
 800112e:	f001 fbe2 	bl	80028f6 <HAL_NVIC_EnableIRQ>
}
 8001132:	e018      	b.n	8001166 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <HAL_TIM_Base_MspInit+0xa4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d113      	bne.n	8001166 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_TIM_Base_MspInit+0x9c>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <HAL_TIM_Base_MspInit+0x9c>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	61d3      	str	r3, [r2, #28]
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_TIM_Base_MspInit+0x9c>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	201e      	movs	r0, #30
 800115c:	f001 fbaf 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001160:	201e      	movs	r0, #30
 8001162:	f001 fbc8 	bl	80028f6 <HAL_NVIC_EnableIRQ>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	40000400 	.word	0x40000400
 8001178:	40000800 	.word	0x40000800

0800117c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <HAL_UART_MspInit+0x8c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d130      	bne.n	8001200 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_UART_MspInit+0x90>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a1a      	ldr	r2, [pc, #104]	; (800120c <HAL_UART_MspInit+0x90>)
 80011a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_UART_MspInit+0x90>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0x90>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_UART_MspInit+0x90>)
 80011bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_UART_MspInit+0x90>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80011e0:	2305      	movs	r3, #5
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4809      	ldr	r0, [pc, #36]	; (8001210 <HAL_UART_MspInit+0x94>)
 80011ec:	f001 fc14 	bl	8002a18 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	2034      	movs	r0, #52	; 0x34
 80011f6:	f001 fb62 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80011fa:	2034      	movs	r0, #52	; 0x34
 80011fc:	f001 fb7b 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40004c00 	.word	0x40004c00
 800120c:	40021000 	.word	0x40021000
 8001210:	48000800 	.word	0x48000800

08001214 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a18      	ldr	r2, [pc, #96]	; (8001294 <HAL_PCD_MspInit+0x80>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d129      	bne.n	800128a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_PCD_MspInit+0x84>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_PCD_MspInit+0x84>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_PCD_MspInit+0x84>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800124e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001260:	230e      	movs	r3, #14
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f001 fbd3 	bl	8002a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_PCD_MspInit+0x84>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_PCD_MspInit+0x84>)
 8001278:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_PCD_MspInit+0x84>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	; 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40005c00 	.word	0x40005c00
 8001298:	40021000 	.word	0x40021000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <NMI_Handler+0x4>

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e8:	f000 f8aa 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <TIM3_IRQHandler+0x10>)
 80012f6:	f003 fd90 	bl	8004e1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000178 	.word	0x20000178

08001304 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <TIM4_IRQHandler+0x10>)
 800130a:	f003 fd86 	bl	8004e1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200001c4 	.word	0x200001c4

08001318 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800131c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001320:	f001 fd3e 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <UART4_IRQHandler+0x10>)
 800132e:	f004 f9e9 	bl	8005704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000210 	.word	0x20000210

0800133c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <SystemInit+0x20>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <SystemInit+0x20>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001398 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <LoopForever+0x6>)
  ldr r1, =_edata
 8001366:	490e      	ldr	r1, [pc, #56]	; (80013a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <LoopForever+0xe>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800137c:	4c0b      	ldr	r4, [pc, #44]	; (80013ac <LoopForever+0x16>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800138a:	f7ff ffd7 	bl	800133c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f005 fb1b 	bl	80069c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001392:	f7ff fa51 	bl	8000838 <main>

08001396 <LoopForever>:

LoopForever:
    b LoopForever
 8001396:	e7fe      	b.n	8001396 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001398:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013a4:	08006a78 	.word	0x08006a78
  ldr r2, =_sbss
 80013a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013ac:	20000590 	.word	0x20000590

080013b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC1_2_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_Init+0x28>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_Init+0x28>)
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f001 fa6f 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f000 f808 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff fd9a 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40022000 	.word	0x40022000

080013e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x54>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x58>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fa87 	bl	8002912 <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f001 fa4f 	bl	80028be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_InitTick+0x5c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000000 	.word	0x20000000
 8001438:	20000008 	.word	0x20000008
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008
 8001464:	2000058c 	.word	0x2000058c

08001468 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;  
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	2000058c 	.word	0x2000058c

08001480 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffde 	bl	8001468 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008

080014c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b09a      	sub	sp, #104	; 0x68
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e1c9      	b.n	800187c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d176      	bne.n	80015e8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d152      	bne.n	80015a8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fd17 	bl	8000f50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d13b      	bne.n	80015a8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f001 f883 	bl	800263c <ADC_Disable>
 8001536:	4603      	mov	r3, r0
 8001538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b00      	cmp	r3, #0
 8001546:	d12f      	bne.n	80015a8 <HAL_ADC_Init+0xe0>
 8001548:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800154c:	2b00      	cmp	r3, #0
 800154e:	d12b      	bne.n	80015a8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001558:	f023 0302 	bic.w	r3, r3, #2
 800155c:	f043 0202 	orr.w	r2, r3, #2
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001572:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001582:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001584:	4b86      	ldr	r3, [pc, #536]	; (80017a0 <HAL_ADC_Init+0x2d8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a86      	ldr	r2, [pc, #536]	; (80017a4 <HAL_ADC_Init+0x2dc>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	0c9a      	lsrs	r2, r3, #18
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800159a:	e002      	b.n	80015a2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	3b01      	subs	r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f9      	bne.n	800159c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80015c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015c4:	d110      	bne.n	80015e8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f023 0312 	bic.w	r3, r3, #18
 80015ce:	f043 0210 	orr.w	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f043 0201 	orr.w	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f040 8136 	bne.w	8001862 <HAL_ADC_Init+0x39a>
 80015f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 8131 	bne.w	8001862 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 8129 	bne.w	8001862 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001618:	f043 0202 	orr.w	r2, r3, #2
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001628:	d004      	beq.n	8001634 <HAL_ADC_Init+0x16c>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a5e      	ldr	r2, [pc, #376]	; (80017a8 <HAL_ADC_Init+0x2e0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_ADC_Init+0x170>
 8001634:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <HAL_ADC_Init+0x2e4>)
 8001636:	e000      	b.n	800163a <HAL_ADC_Init+0x172>
 8001638:	4b5d      	ldr	r3, [pc, #372]	; (80017b0 <HAL_ADC_Init+0x2e8>)
 800163a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001644:	d102      	bne.n	800164c <HAL_ADC_Init+0x184>
 8001646:	4b58      	ldr	r3, [pc, #352]	; (80017a8 <HAL_ADC_Init+0x2e0>)
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e01a      	b.n	8001682 <HAL_ADC_Init+0x1ba>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a55      	ldr	r2, [pc, #340]	; (80017a8 <HAL_ADC_Init+0x2e0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d103      	bne.n	800165e <HAL_ADC_Init+0x196>
 8001656:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	e011      	b.n	8001682 <HAL_ADC_Init+0x1ba>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a54      	ldr	r2, [pc, #336]	; (80017b4 <HAL_ADC_Init+0x2ec>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d102      	bne.n	800166e <HAL_ADC_Init+0x1a6>
 8001668:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <HAL_ADC_Init+0x2f0>)
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e009      	b.n	8001682 <HAL_ADC_Init+0x1ba>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a51      	ldr	r2, [pc, #324]	; (80017b8 <HAL_ADC_Init+0x2f0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d102      	bne.n	800167e <HAL_ADC_Init+0x1b6>
 8001678:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <HAL_ADC_Init+0x2ec>)
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e001      	b.n	8001682 <HAL_ADC_Init+0x1ba>
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b01      	cmp	r3, #1
 800168e:	d108      	bne.n	80016a2 <HAL_ADC_Init+0x1da>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_ADC_Init+0x1da>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <HAL_ADC_Init+0x1dc>
 80016a2:	2300      	movs	r3, #0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d11c      	bne.n	80016e2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016a8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d010      	beq.n	80016d0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d107      	bne.n	80016ca <HAL_ADC_Init+0x202>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_ADC_Init+0x202>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_ADC_Init+0x204>
 80016ca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d108      	bne.n	80016e2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80016d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	431a      	orrs	r2, r3
 80016de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7e5b      	ldrb	r3, [r3, #25]
 80016e6:	035b      	lsls	r3, r3, #13
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016ec:	2a01      	cmp	r2, #1
 80016ee:	d002      	beq.n	80016f6 <HAL_ADC_Init+0x22e>
 80016f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016f4:	e000      	b.n	80016f8 <HAL_ADC_Init+0x230>
 80016f6:	2200      	movs	r2, #0
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4313      	orrs	r3, r2
 8001706:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001708:	4313      	orrs	r3, r2
 800170a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d11b      	bne.n	800174e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7e5b      	ldrb	r3, [r3, #25]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	3b01      	subs	r3, #1
 8001724:	045a      	lsls	r2, r3, #17
 8001726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001728:	4313      	orrs	r3, r2
 800172a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172e:	663b      	str	r3, [r7, #96]	; 0x60
 8001730:	e00d      	b.n	800174e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800173a:	f043 0220 	orr.w	r2, r3, #32
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	2b01      	cmp	r3, #1
 8001754:	d03a      	beq.n	80017cc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <HAL_ADC_Init+0x2ec>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d004      	beq.n	800176a <HAL_ADC_Init+0x2a2>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <HAL_ADC_Init+0x2f0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d128      	bne.n	80017bc <HAL_ADC_Init+0x2f4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001772:	d012      	beq.n	800179a <HAL_ADC_Init+0x2d2>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177c:	d00a      	beq.n	8001794 <HAL_ADC_Init+0x2cc>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001786:	d002      	beq.n	800178e <HAL_ADC_Init+0x2c6>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	e018      	b.n	80017c0 <HAL_ADC_Init+0x2f8>
 800178e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001792:	e015      	b.n	80017c0 <HAL_ADC_Init+0x2f8>
 8001794:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001798:	e012      	b.n	80017c0 <HAL_ADC_Init+0x2f8>
 800179a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800179e:	e00f      	b.n	80017c0 <HAL_ADC_Init+0x2f8>
 80017a0:	20000000 	.word	0x20000000
 80017a4:	431bde83 	.word	0x431bde83
 80017a8:	50000100 	.word	0x50000100
 80017ac:	50000300 	.word	0x50000300
 80017b0:	50000700 	.word	0x50000700
 80017b4:	50000400 	.word	0x50000400
 80017b8:	50000500 	.word	0x50000500
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017c4:	4313      	orrs	r3, r2
 80017c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017c8:	4313      	orrs	r3, r2
 80017ca:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d114      	bne.n	8001804 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017e8:	f023 0302 	bic.w	r3, r3, #2
 80017ec:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7e1b      	ldrb	r3, [r3, #24]
 80017f2:	039a      	lsls	r2, r3, #14
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4313      	orrs	r3, r2
 80017fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001800:	4313      	orrs	r3, r2
 8001802:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_ADC_Init+0x3bc>)
 800180c:	4013      	ands	r3, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001814:	430b      	orrs	r3, r1
 8001816:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10c      	bne.n	800183a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f023 010f 	bic.w	r1, r3, #15
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	1e5a      	subs	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
 8001838:	e007      	b.n	800184a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 020f 	bic.w	r2, r2, #15
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f023 0303 	bic.w	r3, r3, #3
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	641a      	str	r2, [r3, #64]	; 0x40
 8001860:	e00a      	b.n	8001878 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f023 0312 	bic.w	r3, r3, #18
 800186a:	f043 0210 	orr.w	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001872:	2301      	movs	r3, #1
 8001874:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001878:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800187c:	4618      	mov	r0, r3
 800187e:	3768      	adds	r7, #104	; 0x68
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	fff0c007 	.word	0xfff0c007

08001888 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 80f9 	bne.w	8001a96 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Start+0x2a>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e0f4      	b.n	8001a9c <HAL_ADC_Start+0x214>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fe5a 	bl	8002574 <ADC_Enable>
 80018c0:	4603      	mov	r3, r0
 80018c2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 80e0 	bne.w	8001a8c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e8:	d004      	beq.n	80018f4 <HAL_ADC_Start+0x6c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6d      	ldr	r2, [pc, #436]	; (8001aa4 <HAL_ADC_Start+0x21c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d106      	bne.n	8001902 <HAL_ADC_Start+0x7a>
 80018f4:	4b6c      	ldr	r3, [pc, #432]	; (8001aa8 <HAL_ADC_Start+0x220>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d010      	beq.n	8001922 <HAL_ADC_Start+0x9a>
 8001900:	e005      	b.n	800190e <HAL_ADC_Start+0x86>
 8001902:	4b6a      	ldr	r3, [pc, #424]	; (8001aac <HAL_ADC_Start+0x224>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_ADC_Start+0x9a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001916:	d004      	beq.n	8001922 <HAL_ADC_Start+0x9a>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a64      	ldr	r2, [pc, #400]	; (8001ab0 <HAL_ADC_Start+0x228>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d115      	bne.n	800194e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d036      	beq.n	80019aa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001944:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800194c:	e02d      	b.n	80019aa <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001962:	d004      	beq.n	800196e <HAL_ADC_Start+0xe6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a4e      	ldr	r2, [pc, #312]	; (8001aa4 <HAL_ADC_Start+0x21c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10a      	bne.n	8001984 <HAL_ADC_Start+0xfc>
 800196e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	e008      	b.n	8001996 <HAL_ADC_Start+0x10e>
 8001984:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <HAL_ADC_Start+0x228>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf14      	ite	ne
 8001990:	2301      	movne	r3, #1
 8001992:	2300      	moveq	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b6:	d106      	bne.n	80019c6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	f023 0206 	bic.w	r2, r3, #6
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44
 80019c4:	e002      	b.n	80019cc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	221c      	movs	r2, #28
 80019da:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e4:	d004      	beq.n	80019f0 <HAL_ADC_Start+0x168>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a2e      	ldr	r2, [pc, #184]	; (8001aa4 <HAL_ADC_Start+0x21c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d106      	bne.n	80019fe <HAL_ADC_Start+0x176>
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_ADC_Start+0x220>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d03e      	beq.n	8001a7a <HAL_ADC_Start+0x1f2>
 80019fc:	e005      	b.n	8001a0a <HAL_ADC_Start+0x182>
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_ADC_Start+0x224>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d037      	beq.n	8001a7a <HAL_ADC_Start+0x1f2>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a12:	d004      	beq.n	8001a1e <HAL_ADC_Start+0x196>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a22      	ldr	r2, [pc, #136]	; (8001aa4 <HAL_ADC_Start+0x21c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d106      	bne.n	8001a2c <HAL_ADC_Start+0x1a4>
 8001a1e:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <HAL_ADC_Start+0x220>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d027      	beq.n	8001a7a <HAL_ADC_Start+0x1f2>
 8001a2a:	e005      	b.n	8001a38 <HAL_ADC_Start+0x1b0>
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_ADC_Start+0x224>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d020      	beq.n	8001a7a <HAL_ADC_Start+0x1f2>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a40:	d004      	beq.n	8001a4c <HAL_ADC_Start+0x1c4>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_ADC_Start+0x21c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d106      	bne.n	8001a5a <HAL_ADC_Start+0x1d2>
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_ADC_Start+0x220>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d010      	beq.n	8001a7a <HAL_ADC_Start+0x1f2>
 8001a58:	e005      	b.n	8001a66 <HAL_ADC_Start+0x1de>
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_ADC_Start+0x224>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	2b09      	cmp	r3, #9
 8001a64:	d009      	beq.n	8001a7a <HAL_ADC_Start+0x1f2>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a6e:	d004      	beq.n	8001a7a <HAL_ADC_Start+0x1f2>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_ADC_Start+0x228>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10f      	bne.n	8001a9a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0204 	orr.w	r2, r2, #4
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	e006      	b.n	8001a9a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a94:	e001      	b.n	8001a9a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a96:	2302      	movs	r3, #2
 8001a98:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	50000100 	.word	0x50000100
 8001aa8:	50000300 	.word	0x50000300
 8001aac:	50000700 	.word	0x50000700
 8001ab0:	50000400 	.word	0x50000400

08001ab4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d102      	bne.n	8001ad0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001aca:	2308      	movs	r3, #8
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e03a      	b.n	8001b46 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad8:	d004      	beq.n	8001ae4 <HAL_ADC_PollForConversion+0x30>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a72      	ldr	r2, [pc, #456]	; (8001ca8 <HAL_ADC_PollForConversion+0x1f4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x34>
 8001ae4:	4b71      	ldr	r3, [pc, #452]	; (8001cac <HAL_ADC_PollForConversion+0x1f8>)
 8001ae6:	e000      	b.n	8001aea <HAL_ADC_PollForConversion+0x36>
 8001ae8:	4b71      	ldr	r3, [pc, #452]	; (8001cb0 <HAL_ADC_PollForConversion+0x1fc>)
 8001aea:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d112      	bne.n	8001b1e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d11d      	bne.n	8001b42 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f043 0220 	orr.w	r2, r3, #32
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0bf      	b.n	8001c9e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f043 0220 	orr.w	r2, r3, #32
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0ad      	b.n	8001c9e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001b42:	230c      	movs	r3, #12
 8001b44:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b4e:	d004      	beq.n	8001b5a <HAL_ADC_PollForConversion+0xa6>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_ADC_PollForConversion+0x1f4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d106      	bne.n	8001b68 <HAL_ADC_PollForConversion+0xb4>
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <HAL_ADC_PollForConversion+0x1f8>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d010      	beq.n	8001b88 <HAL_ADC_PollForConversion+0xd4>
 8001b66:	e005      	b.n	8001b74 <HAL_ADC_PollForConversion+0xc0>
 8001b68:	4b51      	ldr	r3, [pc, #324]	; (8001cb0 <HAL_ADC_PollForConversion+0x1fc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d009      	beq.n	8001b88 <HAL_ADC_PollForConversion+0xd4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b7c:	d004      	beq.n	8001b88 <HAL_ADC_PollForConversion+0xd4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a4c      	ldr	r2, [pc, #304]	; (8001cb4 <HAL_ADC_PollForConversion+0x200>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d104      	bne.n	8001b92 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	e00f      	b.n	8001bb2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_PollForConversion+0xf2>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a41      	ldr	r2, [pc, #260]	; (8001ca8 <HAL_ADC_PollForConversion+0x1f4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d102      	bne.n	8001bac <HAL_ADC_PollForConversion+0xf8>
 8001ba6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001baa:	e000      	b.n	8001bae <HAL_ADC_PollForConversion+0xfa>
 8001bac:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <HAL_ADC_PollForConversion+0x200>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001bb2:	f7ff fc59 	bl	8001468 <HAL_GetTick>
 8001bb6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001bb8:	e021      	b.n	8001bfe <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d01d      	beq.n	8001bfe <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d007      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0x124>
 8001bc8:	f7ff fc4e 	bl	8001468 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d212      	bcs.n	8001bfe <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10b      	bne.n	8001bfe <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f043 0204 	orr.w	r2, r3, #4
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e04f      	b.n	8001c9e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0d6      	beq.n	8001bba <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d131      	bne.n	8001c8a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d12c      	bne.n	8001c8a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d125      	bne.n	8001c8a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d112      	bne.n	8001c72 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d112      	bne.n	8001c8a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c70:	e00b      	b.n	8001c8a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0220 	orr.w	r2, r3, #32
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d103      	bne.n	8001c9c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	50000100 	.word	0x50000100
 8001cac:	50000300 	.word	0x50000300
 8001cb0:	50000700 	.word	0x50000700
 8001cb4:	50000400 	.word	0x50000400

08001cb8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_ADCEx_Calibration_Start+0x1c>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e05f      	b.n	8001dae <HAL_ADCEx_Calibration_Start+0xdc>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fca0 	bl	800263c <ADC_Disable>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d14e      	bne.n	8001da4 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001d1a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d30:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d40:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001d42:	f7ff fb91 	bl	8001468 <HAL_GetTick>
 8001d46:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001d48:	e01c      	b.n	8001d84 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001d4a:	f7ff fb8d 	bl	8001468 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b0a      	cmp	r3, #10
 8001d56:	d915      	bls.n	8001d84 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d66:	d10d      	bne.n	8001d84 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f023 0312 	bic.w	r3, r3, #18
 8001d70:	f043 0210 	orr.w	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e014      	b.n	8001dae <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d92:	d0da      	beq.n	8001d4a <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f023 0303 	bic.w	r3, r3, #3
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b09b      	sub	sp, #108	; 0x6c
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x22>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e2ca      	b.n	8002370 <HAL_ADC_ConfigChannel+0x5b8>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f040 82ae 	bne.w	800234e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d81c      	bhi.n	8001e34 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	231f      	movs	r3, #31
 8001e10:	4093      	lsls	r3, r2
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4019      	ands	r1, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
 8001e32:	e063      	b.n	8001efc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b09      	cmp	r3, #9
 8001e3a:	d81e      	bhi.n	8001e7a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	3b1e      	subs	r3, #30
 8001e50:	221f      	movs	r2, #31
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	4019      	ands	r1, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	3b1e      	subs	r3, #30
 8001e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34
 8001e78:	e040      	b.n	8001efc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b0e      	cmp	r3, #14
 8001e80:	d81e      	bhi.n	8001ec0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	3b3c      	subs	r3, #60	; 0x3c
 8001e96:	221f      	movs	r2, #31
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	4019      	ands	r1, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	3b3c      	subs	r3, #60	; 0x3c
 8001eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
 8001ebe:	e01d      	b.n	8001efc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	3b5a      	subs	r3, #90	; 0x5a
 8001ed4:	221f      	movs	r2, #31
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4019      	ands	r1, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	3b5a      	subs	r3, #90	; 0x5a
 8001ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 80e5 	bne.w	80020d6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	d91c      	bls.n	8001f4e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6999      	ldr	r1, [r3, #24]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	3b1e      	subs	r3, #30
 8001f26:	2207      	movs	r2, #7
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	4019      	ands	r1, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6898      	ldr	r0, [r3, #8]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3b1e      	subs	r3, #30
 8001f40:	fa00 f203 	lsl.w	r2, r0, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	619a      	str	r2, [r3, #24]
 8001f4c:	e019      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6959      	ldr	r1, [r3, #20]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	2207      	movs	r2, #7
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4019      	ands	r1, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6898      	ldr	r0, [r3, #8]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d84f      	bhi.n	8002044 <HAL_ADC_ConfigChannel+0x28c>
 8001fa4:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <HAL_ADC_ConfigChannel+0x1f4>)
 8001fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001faa:	bf00      	nop
 8001fac:	08001fbd 	.word	0x08001fbd
 8001fb0:	08001fdf 	.word	0x08001fdf
 8001fb4:	08002001 	.word	0x08002001
 8001fb8:	08002023 	.word	0x08002023
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fc2:	4b9a      	ldr	r3, [pc, #616]	; (800222c <HAL_ADC_ConfigChannel+0x474>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	0691      	lsls	r1, r2, #26
 8001fcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fda:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fdc:	e07e      	b.n	80020dc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fe4:	4b91      	ldr	r3, [pc, #580]	; (800222c <HAL_ADC_ConfigChannel+0x474>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	0691      	lsls	r1, r2, #26
 8001fee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ffc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ffe:	e06d      	b.n	80020dc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002006:	4b89      	ldr	r3, [pc, #548]	; (800222c <HAL_ADC_ConfigChannel+0x474>)
 8002008:	4013      	ands	r3, r2
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	0691      	lsls	r1, r2, #26
 8002010:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002012:	430a      	orrs	r2, r1
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800201e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002020:	e05c      	b.n	80020dc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002028:	4b80      	ldr	r3, [pc, #512]	; (800222c <HAL_ADC_ConfigChannel+0x474>)
 800202a:	4013      	ands	r3, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	0691      	lsls	r1, r2, #26
 8002032:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002034:	430a      	orrs	r2, r1
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002040:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002042:	e04b      	b.n	80020dc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	069b      	lsls	r3, r3, #26
 8002054:	429a      	cmp	r2, r3
 8002056:	d107      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002066:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800206e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	069b      	lsls	r3, r3, #26
 8002078:	429a      	cmp	r2, r3
 800207a:	d107      	bne.n	800208c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800208a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002092:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	069b      	lsls	r3, r3, #26
 800209c:	429a      	cmp	r2, r3
 800209e:	d107      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020ae:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	069b      	lsls	r3, r3, #26
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d10a      	bne.n	80020da <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020d2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80020d4:	e001      	b.n	80020da <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80020d6:	bf00      	nop
 80020d8:	e000      	b.n	80020dc <HAL_ADC_ConfigChannel+0x324>
      break;
 80020da:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d108      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x344>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x344>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_ADC_ConfigChannel+0x346>
 80020fc:	2300      	movs	r3, #0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 8130 	bne.w	8002364 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d00f      	beq.n	800212c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2201      	movs	r2, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	400a      	ands	r2, r1
 8002126:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800212a:	e049      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2201      	movs	r2, #1
 800213a:	409a      	lsls	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b09      	cmp	r3, #9
 800214c:	d91c      	bls.n	8002188 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6999      	ldr	r1, [r3, #24]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	3b1b      	subs	r3, #27
 8002160:	2207      	movs	r2, #7
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	4019      	ands	r1, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6898      	ldr	r0, [r3, #8]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	3b1b      	subs	r3, #27
 800217a:	fa00 f203 	lsl.w	r2, r0, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	619a      	str	r2, [r3, #24]
 8002186:	e01b      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6959      	ldr	r1, [r3, #20]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	2207      	movs	r2, #7
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4019      	ands	r1, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6898      	ldr	r0, [r3, #8]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	fa00 f203 	lsl.w	r2, r0, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c8:	d004      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x41c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a18      	ldr	r2, [pc, #96]	; (8002230 <HAL_ADC_ConfigChannel+0x478>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x420>
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_ADC_ConfigChannel+0x47c>)
 80021d6:	e000      	b.n	80021da <HAL_ADC_ConfigChannel+0x422>
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_ADC_ConfigChannel+0x480>)
 80021da:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d015      	beq.n	800221c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021f4:	2b11      	cmp	r3, #17
 80021f6:	d105      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002208:	2b12      	cmp	r3, #18
 800220a:	f040 80ab 	bne.w	8002364 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800220e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 80a4 	bne.w	8002364 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002224:	d10a      	bne.n	800223c <HAL_ADC_ConfigChannel+0x484>
 8002226:	4b02      	ldr	r3, [pc, #8]	; (8002230 <HAL_ADC_ConfigChannel+0x478>)
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e022      	b.n	8002272 <HAL_ADC_ConfigChannel+0x4ba>
 800222c:	83fff000 	.word	0x83fff000
 8002230:	50000100 	.word	0x50000100
 8002234:	50000300 	.word	0x50000300
 8002238:	50000700 	.word	0x50000700
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a4e      	ldr	r2, [pc, #312]	; (800237c <HAL_ADC_ConfigChannel+0x5c4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d103      	bne.n	800224e <HAL_ADC_ConfigChannel+0x496>
 8002246:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e011      	b.n	8002272 <HAL_ADC_ConfigChannel+0x4ba>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_ADC_ConfigChannel+0x5c8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d102      	bne.n	800225e <HAL_ADC_ConfigChannel+0x4a6>
 8002258:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <HAL_ADC_ConfigChannel+0x5cc>)
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e009      	b.n	8002272 <HAL_ADC_ConfigChannel+0x4ba>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a48      	ldr	r2, [pc, #288]	; (8002384 <HAL_ADC_ConfigChannel+0x5cc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d102      	bne.n	800226e <HAL_ADC_ConfigChannel+0x4b6>
 8002268:	4b45      	ldr	r3, [pc, #276]	; (8002380 <HAL_ADC_ConfigChannel+0x5c8>)
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	e001      	b.n	8002272 <HAL_ADC_ConfigChannel+0x4ba>
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d108      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x4da>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x4da>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_ADC_ConfigChannel+0x4dc>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d150      	bne.n	800233a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002298:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d010      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x502>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x502>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_ADC_ConfigChannel+0x504>
 80022ba:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d13c      	bne.n	800233a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b10      	cmp	r3, #16
 80022c6:	d11d      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x54c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022d0:	d118      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80022d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022dc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_ADC_ConfigChannel+0x5d0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2a      	ldr	r2, [pc, #168]	; (800238c <HAL_ADC_ConfigChannel+0x5d4>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	0c9a      	lsrs	r2, r3, #18
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022f4:	e002      	b.n	80022fc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f9      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002302:	e02e      	b.n	8002362 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b11      	cmp	r3, #17
 800230a:	d10b      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x56c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002314:	d106      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800231e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002320:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002322:	e01e      	b.n	8002362 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b12      	cmp	r3, #18
 800232a:	d11a      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800232c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002336:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002338:	e013      	b.n	8002362 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f043 0220 	orr.w	r2, r3, #32
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800234c:	e00a      	b.n	8002364 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f043 0220 	orr.w	r2, r3, #32
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002360:	e000      	b.n	8002364 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002362:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800236c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002370:	4618      	mov	r0, r3
 8002372:	376c      	adds	r7, #108	; 0x6c
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	50000100 	.word	0x50000100
 8002380:	50000400 	.word	0x50000400
 8002384:	50000500 	.word	0x50000500
 8002388:	20000000 	.word	0x20000000
 800238c:	431bde83 	.word	0x431bde83

08002390 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002390:	b480      	push	{r7}
 8002392:	b099      	sub	sp, #100	; 0x64
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a8:	d102      	bne.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80023aa:	4b6d      	ldr	r3, [pc, #436]	; (8002560 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	e01a      	b.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a6a      	ldr	r2, [pc, #424]	; (8002560 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d103      	bne.n	80023c2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80023ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	e011      	b.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a67      	ldr	r2, [pc, #412]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d102      	bne.n	80023d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023cc:	4b66      	ldr	r3, [pc, #408]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	e009      	b.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a64      	ldr	r2, [pc, #400]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d102      	bne.n	80023e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80023dc:	4b61      	ldr	r3, [pc, #388]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	e001      	b.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0b0      	b.n	8002552 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e0a9      	b.n	8002552 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 808d 	bne.w	8002530 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 8086 	bne.w	8002530 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800242c:	d004      	beq.n	8002438 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a4b      	ldr	r2, [pc, #300]	; (8002560 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002438:	4b4c      	ldr	r3, [pc, #304]	; (800256c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800243a:	e000      	b.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800243c:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800243e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d040      	beq.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800245a:	035b      	lsls	r3, r3, #13
 800245c:	430b      	orrs	r3, r1
 800245e:	431a      	orrs	r2, r3
 8002460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002462:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d108      	bne.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002484:	2300      	movs	r3, #0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d15c      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80024a6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d14b      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80024ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024b4:	f023 030f 	bic.w	r3, r3, #15
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	6811      	ldr	r1, [r2, #0]
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	6892      	ldr	r2, [r2, #8]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024c6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024c8:	e03c      	b.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024d4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d108      	bne.n	80024f6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80024f6:	2300      	movs	r3, #0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d123      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d107      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002518:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	d112      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800251e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002526:	f023 030f 	bic.w	r3, r3, #15
 800252a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800252c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800252e:	e009      	b.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002542:	e000      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002544:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800254e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002552:	4618      	mov	r0, r3
 8002554:	3764      	adds	r7, #100	; 0x64
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	50000100 	.word	0x50000100
 8002564:	50000400 	.word	0x50000400
 8002568:	50000500 	.word	0x50000500
 800256c:	50000300 	.word	0x50000300
 8002570:	50000700 	.word	0x50000700

08002574 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <ADC_Enable+0x2c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <ADC_Enable+0x2c>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <ADC_Enable+0x2e>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d143      	bne.n	800262e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <ADC_Enable+0xc4>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00d      	beq.n	80025d0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f043 0210 	orr.w	r2, r3, #16
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e02f      	b.n	8002630 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80025e0:	f7fe ff42 	bl	8001468 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025e6:	e01b      	b.n	8002620 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025e8:	f7fe ff3e 	bl	8001468 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d914      	bls.n	8002620 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d00d      	beq.n	8002620 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f043 0210 	orr.w	r2, r3, #16
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	f043 0201 	orr.w	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e007      	b.n	8002630 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d1dc      	bne.n	80025e8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	8000003f 	.word	0x8000003f

0800263c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <ADC_Disable+0x2c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <ADC_Disable+0x2c>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <ADC_Disable+0x2e>
 8002668:	2300      	movs	r3, #0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d047      	beq.n	80026fe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030d 	and.w	r3, r3, #13
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10f      	bne.n	800269c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0202 	orr.w	r2, r2, #2
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2203      	movs	r2, #3
 8002692:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002694:	f7fe fee8 	bl	8001468 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800269a:	e029      	b.n	80026f0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f043 0210 	orr.w	r2, r3, #16
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e023      	b.n	8002700 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026b8:	f7fe fed6 	bl	8001468 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d914      	bls.n	80026f0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10d      	bne.n	80026f0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f043 0210 	orr.w	r2, r3, #16
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e007      	b.n	8002700 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d0dc      	beq.n	80026b8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273a:	4a04      	ldr	r2, [pc, #16]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	60d3      	str	r3, [r2, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4907      	ldr	r1, [pc, #28]	; (80027a4 <__NVIC_EnableIRQ+0x38>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100

080027a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	db0a      	blt.n	80027d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	490c      	ldr	r1, [pc, #48]	; (80027f4 <__NVIC_SetPriority+0x4c>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d0:	e00a      	b.n	80027e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	; (80027f8 <__NVIC_SetPriority+0x50>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3b04      	subs	r3, #4
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	440b      	add	r3, r1
 80027e6:	761a      	strb	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000e100 	.word	0xe000e100
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1c3 0307 	rsb	r3, r3, #7
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf28      	it	cs
 800281a:	2304      	movcs	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3304      	adds	r3, #4
 8002822:	2b06      	cmp	r3, #6
 8002824:	d902      	bls.n	800282c <NVIC_EncodePriority+0x30>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3b03      	subs	r3, #3
 800282a:	e000      	b.n	800282e <NVIC_EncodePriority+0x32>
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	f04f 32ff 	mov.w	r2, #4294967295
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002844:	f04f 31ff 	mov.w	r1, #4294967295
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	43d9      	mvns	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	4313      	orrs	r3, r2
         );
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002874:	d301      	bcc.n	800287a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002876:	2301      	movs	r3, #1
 8002878:	e00f      	b.n	800289a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <SysTick_Config+0x40>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002882:	210f      	movs	r1, #15
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	f7ff ff8e 	bl	80027a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <SysTick_Config+0x40>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <SysTick_Config+0x40>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff29 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff ff3e 	bl	8002750 <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff8e 	bl	80027fc <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5d 	bl	80027a8 <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff31 	bl	800276c <__NVIC_EnableIRQ>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ffa2 	bl	8002864 <SysTick_Config>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002938:	2b02      	cmp	r3, #2
 800293a:	d008      	beq.n	800294e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2204      	movs	r2, #4
 8002940:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e020      	b.n	8002990 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 020e 	bic.w	r2, r2, #14
 800295c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d005      	beq.n	80029be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2204      	movs	r2, #4
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	e027      	b.n	8002a0e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 020e 	bic.w	r2, r2, #14
 80029cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0201 	bic.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
    } 
  }
  return status;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a26:	e154      	b.n	8002cd2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8146 	beq.w	8002ccc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d005      	beq.n	8002a58 <HAL_GPIO_Init+0x40>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d130      	bne.n	8002aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a8e:	2201      	movs	r2, #1
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 0201 	and.w	r2, r3, #1
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d017      	beq.n	8002af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d123      	bne.n	8002b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3208      	adds	r2, #8
 8002b44:	6939      	ldr	r1, [r7, #16]
 8002b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0203 	and.w	r2, r3, #3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80a0 	beq.w	8002ccc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8c:	4b58      	ldr	r3, [pc, #352]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	4a57      	ldr	r2, [pc, #348]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6193      	str	r3, [r2, #24]
 8002b98:	4b55      	ldr	r3, [pc, #340]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba4:	4a53      	ldr	r2, [pc, #332]	; (8002cf4 <HAL_GPIO_Init+0x2dc>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bce:	d019      	beq.n	8002c04 <HAL_GPIO_Init+0x1ec>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a49      	ldr	r2, [pc, #292]	; (8002cf8 <HAL_GPIO_Init+0x2e0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d013      	beq.n	8002c00 <HAL_GPIO_Init+0x1e8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a48      	ldr	r2, [pc, #288]	; (8002cfc <HAL_GPIO_Init+0x2e4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00d      	beq.n	8002bfc <HAL_GPIO_Init+0x1e4>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a47      	ldr	r2, [pc, #284]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d007      	beq.n	8002bf8 <HAL_GPIO_Init+0x1e0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a46      	ldr	r2, [pc, #280]	; (8002d04 <HAL_GPIO_Init+0x2ec>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d101      	bne.n	8002bf4 <HAL_GPIO_Init+0x1dc>
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	e008      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002bf4:	2305      	movs	r3, #5
 8002bf6:	e006      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e004      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e002      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002c04:	2300      	movs	r3, #0
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	f002 0203 	and.w	r2, r2, #3
 8002c0c:	0092      	lsls	r2, r2, #2
 8002c0e:	4093      	lsls	r3, r2
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c16:	4937      	ldr	r1, [pc, #220]	; (8002cf4 <HAL_GPIO_Init+0x2dc>)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c24:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <HAL_GPIO_Init+0x2f0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c48:	4a2f      	ldr	r2, [pc, #188]	; (8002d08 <HAL_GPIO_Init+0x2f0>)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c4e:	4b2e      	ldr	r3, [pc, #184]	; (8002d08 <HAL_GPIO_Init+0x2f0>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c72:	4a25      	ldr	r2, [pc, #148]	; (8002d08 <HAL_GPIO_Init+0x2f0>)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c78:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <HAL_GPIO_Init+0x2f0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c9c:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <HAL_GPIO_Init+0x2f0>)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_GPIO_Init+0x2f0>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cc6:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <HAL_GPIO_Init+0x2f0>)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f47f aea3 	bne.w	8002a28 <HAL_GPIO_Init+0x10>
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	48000400 	.word	0x48000400
 8002cfc:	48000800 	.word	0x48000800
 8002d00:	48000c00 	.word	0x48000c00
 8002d04:	48001000 	.word	0x48001000
 8002d08:	40010400 	.word	0x40010400

08002d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	e001      	b.n	8002d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d4c:	787b      	ldrb	r3, [r7, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4013      	ands	r3, r2
 8002d84:	041a      	lsls	r2, r3, #16
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43d9      	mvns	r1, r3
 8002d8a:	887b      	ldrh	r3, [r7, #2]
 8002d8c:	400b      	ands	r3, r1
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	619a      	str	r2, [r3, #24]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d006      	beq.n	8002dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fc24 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e081      	b.n	8002ee6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe f8e6 	bl	8000fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	e006      	b.n	8002e58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d104      	bne.n	8002e6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69d9      	ldr	r1, [r3, #28]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1a      	ldr	r2, [r3, #32]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d138      	bne.n	8002f76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e032      	b.n	8002f78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2224      	movs	r2, #36	; 0x24
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0201 	orr.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e000      	b.n	8002f78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f76:	2302      	movs	r3, #2
  }
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d139      	bne.n	800300e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e033      	b.n	8003010 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800301c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301e:	b08b      	sub	sp, #44	; 0x2c
 8003020:	af06      	add	r7, sp, #24
 8003022:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0d0      	b.n	80031d0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe f8e6 	bl	8001214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2203      	movs	r2, #3
 800304c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f003 fc7a 	bl	800694e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	e04c      	b.n	80030fa <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	3301      	adds	r3, #1
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	b298      	uxth	r0, r3
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	3336      	adds	r3, #54	; 0x36
 800309e:	4602      	mov	r2, r0
 80030a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	3303      	adds	r3, #3
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	440b      	add	r3, r1
 80030c6:	3338      	adds	r3, #56	; 0x38
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	440b      	add	r3, r1
 80030da:	333c      	adds	r3, #60	; 0x3c
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	3340      	adds	r3, #64	; 0x40
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	3301      	adds	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d3ad      	bcc.n	8003060 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e044      	b.n	8003194 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	f203 1369 	addw	r3, r3, #361	; 0x169
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	440b      	add	r3, r1
 8003170:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	3301      	adds	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	429a      	cmp	r2, r3
 800319c:	d3b5      	bcc.n	800310a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	687e      	ldr	r6, [r7, #4]
 80031a6:	466d      	mov	r5, sp
 80031a8:	f106 0410 	add.w	r4, r6, #16
 80031ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	602b      	str	r3, [r5, #0]
 80031b4:	1d33      	adds	r3, r6, #4
 80031b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b8:	6838      	ldr	r0, [r7, #0]
 80031ba:	f003 fbe3 	bl	8006984 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80031de:	af00      	add	r7, sp, #0
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f001 b823 	b.w	8004244 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 817d 	beq.w	800350e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003214:	4bbc      	ldr	r3, [pc, #752]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b04      	cmp	r3, #4
 800321e:	d00c      	beq.n	800323a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003220:	4bb9      	ldr	r3, [pc, #740]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d15c      	bne.n	80032e6 <HAL_RCC_OscConfig+0x10e>
 800322c:	4bb6      	ldr	r3, [pc, #728]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d155      	bne.n	80032e6 <HAL_RCC_OscConfig+0x10e>
 800323a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800323e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800324e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d102      	bne.n	800326c <HAL_RCC_OscConfig+0x94>
 8003266:	4ba8      	ldr	r3, [pc, #672]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	e015      	b.n	8003298 <HAL_RCC_OscConfig+0xc0>
 800326c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003270:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003284:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003288:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003294:	4b9c      	ldr	r3, [pc, #624]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800329c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80032a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80032a4:	fa92 f2a2 	rbit	r2, r2
 80032a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80032ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80032b0:	fab2 f282 	clz	r2, r2
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f042 0220 	orr.w	r2, r2, #32
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	f002 021f 	and.w	r2, r2, #31
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f202 	lsl.w	r2, r1, r2
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 811f 	beq.w	800350c <HAL_RCC_OscConfig+0x334>
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 8116 	bne.w	800350c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f000 bfaf 	b.w	8004244 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f6:	d106      	bne.n	8003306 <HAL_RCC_OscConfig+0x12e>
 80032f8:	4b83      	ldr	r3, [pc, #524]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a82      	ldr	r2, [pc, #520]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 80032fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	e036      	b.n	8003374 <HAL_RCC_OscConfig+0x19c>
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x158>
 8003316:	4b7c      	ldr	r3, [pc, #496]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a7b      	ldr	r2, [pc, #492]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 800331c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	4b79      	ldr	r3, [pc, #484]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a78      	ldr	r2, [pc, #480]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e021      	b.n	8003374 <HAL_RCC_OscConfig+0x19c>
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x184>
 8003342:	4b71      	ldr	r3, [pc, #452]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a70      	ldr	r2, [pc, #448]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b6e      	ldr	r3, [pc, #440]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6d      	ldr	r2, [pc, #436]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0x19c>
 800335c:	4b6a      	ldr	r3, [pc, #424]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a69      	ldr	r2, [pc, #420]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b67      	ldr	r3, [pc, #412]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a66      	ldr	r2, [pc, #408]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003374:	4b64      	ldr	r3, [pc, #400]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	f023 020f 	bic.w	r2, r3, #15
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	495f      	ldr	r1, [pc, #380]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 800338a:	4313      	orrs	r3, r2
 800338c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d059      	beq.n	8003452 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fe f863 	bl	8001468 <HAL_GetTick>
 80033a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	e00a      	b.n	80033be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe f85e 	bl	8001468 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b64      	cmp	r3, #100	; 0x64
 80033b6:	d902      	bls.n	80033be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	f000 bf43 	b.w	8004244 <HAL_RCC_OscConfig+0x106c>
 80033be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80033d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HAL_RCC_OscConfig+0x218>
 80033ea:	4b47      	ldr	r3, [pc, #284]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	e015      	b.n	800341c <HAL_RCC_OscConfig+0x244>
 80033f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003408:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800340c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003420:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003424:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003428:	fa92 f2a2 	rbit	r2, r2
 800342c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003430:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003434:	fab2 f282 	clz	r2, r2
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f042 0220 	orr.w	r2, r2, #32
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	f002 021f 	and.w	r2, r2, #31
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f202 	lsl.w	r2, r1, r2
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ab      	beq.n	80033a8 <HAL_RCC_OscConfig+0x1d0>
 8003450:	e05d      	b.n	800350e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7fe f809 	bl	8001468 <HAL_GetTick>
 8003456:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e00a      	b.n	8003472 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe f804 	bl	8001468 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	; 0x64
 800346a:	d902      	bls.n	8003472 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	f000 bee9 	b.w	8004244 <HAL_RCC_OscConfig+0x106c>
 8003472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003476:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003486:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2cc>
 800349e:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	e015      	b.n	80034d0 <HAL_RCC_OscConfig+0x2f8>
 80034a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80034b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80034c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80034c4:	fa93 f3a3 	rbit	r3, r3
 80034c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80034cc:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <HAL_RCC_OscConfig+0x330>)
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034d4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80034d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034dc:	fa92 f2a2 	rbit	r2, r2
 80034e0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80034e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80034e8:	fab2 f282 	clz	r2, r2
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	f042 0220 	orr.w	r2, r2, #32
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	f002 021f 	and.w	r2, r2, #31
 80034f8:	2101      	movs	r1, #1
 80034fa:	fa01 f202 	lsl.w	r2, r1, r2
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ab      	bne.n	800345c <HAL_RCC_OscConfig+0x284>
 8003504:	e003      	b.n	800350e <HAL_RCC_OscConfig+0x336>
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 817d 	beq.w	800381e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003524:	4ba6      	ldr	r3, [pc, #664]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003530:	4ba3      	ldr	r3, [pc, #652]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 030c 	and.w	r3, r3, #12
 8003538:	2b08      	cmp	r3, #8
 800353a:	d172      	bne.n	8003622 <HAL_RCC_OscConfig+0x44a>
 800353c:	4ba0      	ldr	r3, [pc, #640]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d16c      	bne.n	8003622 <HAL_RCC_OscConfig+0x44a>
 8003548:	2302      	movs	r3, #2
 800354a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800355a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d102      	bne.n	8003578 <HAL_RCC_OscConfig+0x3a0>
 8003572:	4b93      	ldr	r3, [pc, #588]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	e013      	b.n	80035a0 <HAL_RCC_OscConfig+0x3c8>
 8003578:	2302      	movs	r3, #2
 800357a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800358a:	2302      	movs	r3, #2
 800358c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003590:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800359c:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	2202      	movs	r2, #2
 80035a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80035a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80035aa:	fa92 f2a2 	rbit	r2, r2
 80035ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80035b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80035b6:	fab2 f282 	clz	r2, r2
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	f042 0220 	orr.w	r2, r2, #32
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f002 021f 	and.w	r2, r2, #31
 80035c6:	2101      	movs	r1, #1
 80035c8:	fa01 f202 	lsl.w	r2, r1, r2
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCC_OscConfig+0x410>
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d002      	beq.n	80035e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f000 be2e 	b.w	8004244 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	4b75      	ldr	r3, [pc, #468]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	21f8      	movs	r1, #248	; 0xf8
 80035fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003606:	fa91 f1a1 	rbit	r1, r1
 800360a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800360e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003612:	fab1 f181 	clz	r1, r1
 8003616:	b2c9      	uxtb	r1, r1
 8003618:	408b      	lsls	r3, r1
 800361a:	4969      	ldr	r1, [pc, #420]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003620:	e0fd      	b.n	800381e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8088 	beq.w	8003744 <HAL_RCC_OscConfig+0x56c>
 8003634:	2301      	movs	r3, #1
 8003636:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003646:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	461a      	mov	r2, r3
 800365c:	2301      	movs	r3, #1
 800365e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fd ff02 	bl	8001468 <HAL_GetTick>
 8003664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	e00a      	b.n	8003680 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800366a:	f7fd fefd 	bl	8001468 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d902      	bls.n	8003680 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	f000 bde2 	b.w	8004244 <HAL_RCC_OscConfig+0x106c>
 8003680:	2302      	movs	r3, #2
 8003682:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003692:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d102      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4d8>
 80036aa:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	e013      	b.n	80036d8 <HAL_RCC_OscConfig+0x500>
 80036b0:	2302      	movs	r3, #2
 80036b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036c2:	2302      	movs	r3, #2
 80036c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80036d4:	4b3a      	ldr	r3, [pc, #232]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2202      	movs	r2, #2
 80036da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80036de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80036e2:	fa92 f2a2 	rbit	r2, r2
 80036e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80036ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80036ee:	fab2 f282 	clz	r2, r2
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	f042 0220 	orr.w	r2, r2, #32
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	f002 021f 	and.w	r2, r2, #31
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f202 	lsl.w	r2, r1, r2
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0af      	beq.n	800366a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370a:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	21f8      	movs	r1, #248	; 0xf8
 8003720:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003728:	fa91 f1a1 	rbit	r1, r1
 800372c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003730:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003734:	fab1 f181 	clz	r1, r1
 8003738:	b2c9      	uxtb	r1, r1
 800373a:	408b      	lsls	r3, r1
 800373c:	4920      	ldr	r1, [pc, #128]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]
 8003742:	e06c      	b.n	800381e <HAL_RCC_OscConfig+0x646>
 8003744:	2301      	movs	r3, #1
 8003746:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003756:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003764:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	461a      	mov	r2, r3
 800376c:	2300      	movs	r3, #0
 800376e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fd fe7a 	bl	8001468 <HAL_GetTick>
 8003774:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800377a:	f7fd fe75 	bl	8001468 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d902      	bls.n	8003790 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	f000 bd5a 	b.w	8004244 <HAL_RCC_OscConfig+0x106c>
 8003790:	2302      	movs	r3, #2
 8003792:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80037a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d104      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5ec>
 80037ba:	4b01      	ldr	r3, [pc, #4]	; (80037c0 <HAL_RCC_OscConfig+0x5e8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	e015      	b.n	80037ec <HAL_RCC_OscConfig+0x614>
 80037c0:	40021000 	.word	0x40021000
 80037c4:	2302      	movs	r3, #2
 80037c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037d6:	2302      	movs	r3, #2
 80037d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80037e8:	4bc8      	ldr	r3, [pc, #800]	; (8003b0c <HAL_RCC_OscConfig+0x934>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2202      	movs	r2, #2
 80037ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80037f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037f6:	fa92 f2a2 	rbit	r2, r2
 80037fa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80037fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ad      	bne.n	800377a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800381e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8110 	beq.w	8003a54 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003838:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d079      	beq.n	8003938 <HAL_RCC_OscConfig+0x760>
 8003844:	2301      	movs	r3, #1
 8003846:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	4bab      	ldr	r3, [pc, #684]	; (8003b10 <HAL_RCC_OscConfig+0x938>)
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	461a      	mov	r2, r3
 800386a:	2301      	movs	r3, #1
 800386c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386e:	f7fd fdfb 	bl	8001468 <HAL_GetTick>
 8003872:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003878:	f7fd fdf6 	bl	8001468 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d902      	bls.n	800388e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	f000 bcdb 	b.w	8004244 <HAL_RCC_OscConfig+0x106c>
 800388e:	2302      	movs	r3, #2
 8003890:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80038a8:	2202      	movs	r2, #2
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	fa93 f2a3 	rbit	r2, r3
 80038ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038cc:	2202      	movs	r2, #2
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e8:	4b88      	ldr	r3, [pc, #544]	; (8003b0c <HAL_RCC_OscConfig+0x934>)
 80038ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038f4:	2102      	movs	r1, #2
 80038f6:	6019      	str	r1, [r3, #0]
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	fa93 f1a3 	rbit	r1, r3
 8003906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800390e:	6019      	str	r1, [r3, #0]
  return result;
 8003910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003914:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	fab3 f383 	clz	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	2101      	movs	r1, #1
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0a0      	beq.n	8003878 <HAL_RCC_OscConfig+0x6a0>
 8003936:	e08d      	b.n	8003a54 <HAL_RCC_OscConfig+0x87c>
 8003938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003948:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	fa93 f2a3 	rbit	r2, r3
 8003952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003956:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800395a:	601a      	str	r2, [r3, #0]
  return result;
 800395c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003960:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003964:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003966:	fab3 f383 	clz	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	4b68      	ldr	r3, [pc, #416]	; (8003b10 <HAL_RCC_OscConfig+0x938>)
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	461a      	mov	r2, r3
 8003976:	2300      	movs	r3, #0
 8003978:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397a:	f7fd fd75 	bl	8001468 <HAL_GetTick>
 800397e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003982:	e00a      	b.n	800399a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003984:	f7fd fd70 	bl	8001468 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d902      	bls.n	800399a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	f000 bc55 	b.w	8004244 <HAL_RCC_OscConfig+0x106c>
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80039a2:	2202      	movs	r2, #2
 80039a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	fa93 f2a3 	rbit	r2, r3
 80039b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039c6:	2202      	movs	r2, #2
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039ea:	2202      	movs	r2, #2
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fa93 f2a3 	rbit	r2, r3
 80039fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a06:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <HAL_RCC_OscConfig+0x934>)
 8003a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a12:	2102      	movs	r1, #2
 8003a14:	6019      	str	r1, [r3, #0]
 8003a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	fa93 f1a3 	rbit	r1, r3
 8003a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a28:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a2c:	6019      	str	r1, [r3, #0]
  return result;
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	2101      	movs	r1, #1
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d197      	bne.n	8003984 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 81a1 	beq.w	8003dac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a70:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <HAL_RCC_OscConfig+0x934>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7c:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <HAL_RCC_OscConfig+0x934>)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	4a22      	ldr	r2, [pc, #136]	; (8003b0c <HAL_RCC_OscConfig+0x934>)
 8003a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a86:	61d3      	str	r3, [r2, #28]
 8003a88:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_RCC_OscConfig+0x934>)
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a94:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003aa2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_RCC_OscConfig+0x93c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11a      	bne.n	8003aec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab6:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_RCC_OscConfig+0x93c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <HAL_RCC_OscConfig+0x93c>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac2:	f7fd fcd1 	bl	8001468 <HAL_GetTick>
 8003ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aca:	e009      	b.n	8003ae0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003acc:	f7fd fccc 	bl	8001468 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b64      	cmp	r3, #100	; 0x64
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e3b1      	b.n	8004244 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <HAL_RCC_OscConfig+0x93c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ef      	beq.n	8003acc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d10d      	bne.n	8003b18 <HAL_RCC_OscConfig+0x940>
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_RCC_OscConfig+0x934>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	4a02      	ldr	r2, [pc, #8]	; (8003b0c <HAL_RCC_OscConfig+0x934>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6213      	str	r3, [r2, #32]
 8003b08:	e03c      	b.n	8003b84 <HAL_RCC_OscConfig+0x9ac>
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	10908120 	.word	0x10908120
 8003b14:	40007000 	.word	0x40007000
 8003b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10c      	bne.n	8003b42 <HAL_RCC_OscConfig+0x96a>
 8003b28:	4bc1      	ldr	r3, [pc, #772]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	4ac0      	ldr	r2, [pc, #768]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	6213      	str	r3, [r2, #32]
 8003b34:	4bbe      	ldr	r3, [pc, #760]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	4abd      	ldr	r2, [pc, #756]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b3a:	f023 0304 	bic.w	r3, r3, #4
 8003b3e:	6213      	str	r3, [r2, #32]
 8003b40:	e020      	b.n	8003b84 <HAL_RCC_OscConfig+0x9ac>
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x994>
 8003b52:	4bb7      	ldr	r3, [pc, #732]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4ab6      	ldr	r2, [pc, #728]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	6213      	str	r3, [r2, #32]
 8003b5e:	4bb4      	ldr	r3, [pc, #720]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4ab3      	ldr	r2, [pc, #716]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6213      	str	r3, [r2, #32]
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCC_OscConfig+0x9ac>
 8003b6c:	4bb0      	ldr	r3, [pc, #704]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4aaf      	ldr	r2, [pc, #700]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	6213      	str	r3, [r2, #32]
 8003b78:	4bad      	ldr	r3, [pc, #692]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	4aac      	ldr	r2, [pc, #688]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003b7e:	f023 0304 	bic.w	r3, r3, #4
 8003b82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8081 	beq.w	8003c98 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b96:	f7fd fc67 	bl	8001468 <HAL_GetTick>
 8003b9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fd fc62 	bl	8001468 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e345      	b.n	8004244 <HAL_RCC_OscConfig+0x106c>
 8003bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	fa93 f2a3 	rbit	r2, r3
 8003bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003be4:	2202      	movs	r2, #2
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	fa93 f2a3 	rbit	r2, r3
 8003bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bfe:	601a      	str	r2, [r3, #0]
  return result;
 8003c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c04:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f043 0302 	orr.w	r3, r3, #2
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d102      	bne.n	8003c24 <HAL_RCC_OscConfig+0xa4c>
 8003c1e:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	e013      	b.n	8003c4c <HAL_RCC_OscConfig+0xa74>
 8003c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	fa93 f2a3 	rbit	r2, r3
 8003c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	4b79      	ldr	r3, [pc, #484]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c54:	2102      	movs	r1, #2
 8003c56:	6011      	str	r1, [r2, #0]
 8003c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	fa92 f1a2 	rbit	r1, r2
 8003c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c6a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c6e:	6011      	str	r1, [r2, #0]
  return result;
 8003c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c74:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	fab2 f282 	clz	r2, r2
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	f002 021f 	and.w	r2, r2, #31
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d084      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x9c8>
 8003c96:	e07f      	b.n	8003d98 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c98:	f7fd fbe6 	bl	8001468 <HAL_GetTick>
 8003c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca0:	e00b      	b.n	8003cba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca2:	f7fd fbe1 	bl	8001468 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e2c4      	b.n	8004244 <HAL_RCC_OscConfig+0x106c>
 8003cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	fa93 f2a3 	rbit	r2, r3
 8003cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	fa93 f2a3 	rbit	r2, r3
 8003cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d00:	601a      	str	r2, [r3, #0]
  return result;
 8003d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d06:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0c:	fab3 f383 	clz	r3, r3
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f043 0302 	orr.w	r3, r3, #2
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d102      	bne.n	8003d26 <HAL_RCC_OscConfig+0xb4e>
 8003d20:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	e013      	b.n	8003d4e <HAL_RCC_OscConfig+0xb76>
 8003d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d2e:	2202      	movs	r2, #2
 8003d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d52:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d56:	2102      	movs	r1, #2
 8003d58:	6011      	str	r1, [r2, #0]
 8003d5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	fa92 f1a2 	rbit	r1, r2
 8003d68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d70:	6011      	str	r1, [r2, #0]
  return result;
 8003d72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d76:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	fab2 f282 	clz	r2, r2
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	f002 021f 	and.w	r2, r2, #31
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d184      	bne.n	8003ca2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da0:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	4a22      	ldr	r2, [pc, #136]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003daa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8242 	beq.w	8004242 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dbe:	4b1c      	ldr	r3, [pc, #112]	; (8003e30 <HAL_RCC_OscConfig+0xc58>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	f000 8213 	beq.w	80041f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	f040 8162 	bne.w	80040a2 <HAL_RCC_OscConfig+0xeca>
 8003dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003de6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	fa93 f2a3 	rbit	r2, r3
 8003dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dfe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e02:	601a      	str	r2, [r3, #0]
  return result;
 8003e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e08:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2300      	movs	r3, #0
 8003e22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fd fb20 	bl	8001468 <HAL_GetTick>
 8003e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e2c:	e00c      	b.n	8003e48 <HAL_RCC_OscConfig+0xc70>
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fd fb18 	bl	8001468 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e1fd      	b.n	8004244 <HAL_RCC_OscConfig+0x106c>
 8003e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	fa93 f2a3 	rbit	r2, r3
 8003e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e68:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e6c:	601a      	str	r2, [r3, #0]
  return result;
 8003e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e78:	fab3 f383 	clz	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d102      	bne.n	8003e92 <HAL_RCC_OscConfig+0xcba>
 8003e8c:	4bb0      	ldr	r3, [pc, #704]	; (8004150 <HAL_RCC_OscConfig+0xf78>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	e027      	b.n	8003ee2 <HAL_RCC_OscConfig+0xd0a>
 8003e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e96:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	fa93 f2a3 	rbit	r2, r3
 8003eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	fa93 f2a3 	rbit	r2, r3
 8003ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	4b9c      	ldr	r3, [pc, #624]	; (8004150 <HAL_RCC_OscConfig+0xf78>)
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ee6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003eea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003eee:	6011      	str	r1, [r2, #0]
 8003ef0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ef4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	fa92 f1a2 	rbit	r1, r2
 8003efe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f02:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f06:	6011      	str	r1, [r2, #0]
  return result;
 8003f08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f0c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	fab2 f282 	clz	r2, r2
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	f042 0220 	orr.w	r2, r2, #32
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	f002 021f 	and.w	r2, r2, #31
 8003f22:	2101      	movs	r1, #1
 8003f24:	fa01 f202 	lsl.w	r2, r1, r2
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d182      	bne.n	8003e34 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f2e:	4b88      	ldr	r3, [pc, #544]	; (8004150 <HAL_RCC_OscConfig+0xf78>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	497f      	ldr	r1, [pc, #508]	; (8004150 <HAL_RCC_OscConfig+0xf78>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]
 8003f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f68:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	fa93 f2a3 	rbit	r2, r3
 8003f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f7a:	601a      	str	r2, [r3, #0]
  return result;
 8003f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f84:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f86:	fab3 f383 	clz	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	461a      	mov	r2, r3
 8003f98:	2301      	movs	r3, #1
 8003f9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fd fa64 	bl	8001468 <HAL_GetTick>
 8003fa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fa4:	e009      	b.n	8003fba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fd fa5f 	bl	8001468 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e144      	b.n	8004244 <HAL_RCC_OscConfig+0x106c>
 8003fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fcc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	fa93 f2a3 	rbit	r2, r3
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fde:	601a      	str	r2, [r3, #0]
  return result;
 8003fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fe8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d102      	bne.n	8004004 <HAL_RCC_OscConfig+0xe2c>
 8003ffe:	4b54      	ldr	r3, [pc, #336]	; (8004150 <HAL_RCC_OscConfig+0xf78>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	e027      	b.n	8004054 <HAL_RCC_OscConfig+0xe7c>
 8004004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004008:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800400c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004016:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	fa93 f2a3 	rbit	r2, r3
 8004020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004024:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	fa93 f2a3 	rbit	r2, r3
 8004046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	4b3f      	ldr	r3, [pc, #252]	; (8004150 <HAL_RCC_OscConfig+0xf78>)
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004058:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800405c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004060:	6011      	str	r1, [r2, #0]
 8004062:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004066:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	fa92 f1a2 	rbit	r1, r2
 8004070:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004074:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004078:	6011      	str	r1, [r2, #0]
  return result;
 800407a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800407e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	fab2 f282 	clz	r2, r2
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	f042 0220 	orr.w	r2, r2, #32
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	f002 021f 	and.w	r2, r2, #31
 8004094:	2101      	movs	r1, #1
 8004096:	fa01 f202 	lsl.w	r2, r1, r2
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d082      	beq.n	8003fa6 <HAL_RCC_OscConfig+0xdce>
 80040a0:	e0cf      	b.n	8004242 <HAL_RCC_OscConfig+0x106a>
 80040a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80040aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	fa93 f2a3 	rbit	r2, r3
 80040be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040c6:	601a      	str	r2, [r3, #0]
  return result;
 80040c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	461a      	mov	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fd f9be 	bl	8001468 <HAL_GetTick>
 80040ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f0:	e009      	b.n	8004106 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fd f9b9 	bl	8001468 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e09e      	b.n	8004244 <HAL_RCC_OscConfig+0x106c>
 8004106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800410e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004118:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	fa93 f2a3 	rbit	r2, r3
 8004122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004126:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800412a:	601a      	str	r2, [r3, #0]
  return result;
 800412c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004130:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004134:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d104      	bne.n	8004154 <HAL_RCC_OscConfig+0xf7c>
 800414a:	4b01      	ldr	r3, [pc, #4]	; (8004150 <HAL_RCC_OscConfig+0xf78>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	e029      	b.n	80041a4 <HAL_RCC_OscConfig+0xfcc>
 8004150:	40021000 	.word	0x40021000
 8004154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004158:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800415c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004166:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	fa93 f2a3 	rbit	r2, r3
 8004170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004174:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	fa93 f2a3 	rbit	r2, r3
 8004196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	4b2b      	ldr	r3, [pc, #172]	; (8004250 <HAL_RCC_OscConfig+0x1078>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80041ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041b0:	6011      	str	r1, [r2, #0]
 80041b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	fa92 f1a2 	rbit	r1, r2
 80041c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041c8:	6011      	str	r1, [r2, #0]
  return result;
 80041ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	fab2 f282 	clz	r2, r2
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	f042 0220 	orr.w	r2, r2, #32
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f002 021f 	and.w	r2, r2, #31
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d180      	bne.n	80040f2 <HAL_RCC_OscConfig+0xf1a>
 80041f0:	e027      	b.n	8004242 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e01e      	b.n	8004244 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_RCC_OscConfig+0x1078>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800420e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004212:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	429a      	cmp	r2, r3
 8004224:	d10b      	bne.n	800423e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004226:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800422a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800422e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800423a:	429a      	cmp	r2, r3
 800423c:	d001      	beq.n	8004242 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40021000 	.word	0x40021000

08004254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b09e      	sub	sp, #120	; 0x78
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e162      	b.n	8004532 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800426c:	4b90      	ldr	r3, [pc, #576]	; (80044b0 <HAL_RCC_ClockConfig+0x25c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d910      	bls.n	800429c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b8d      	ldr	r3, [pc, #564]	; (80044b0 <HAL_RCC_ClockConfig+0x25c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 0207 	bic.w	r2, r3, #7
 8004282:	498b      	ldr	r1, [pc, #556]	; (80044b0 <HAL_RCC_ClockConfig+0x25c>)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b89      	ldr	r3, [pc, #548]	; (80044b0 <HAL_RCC_ClockConfig+0x25c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e14a      	b.n	8004532 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a8:	4b82      	ldr	r3, [pc, #520]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	497f      	ldr	r1, [pc, #508]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80dc 	beq.w	8004480 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d13c      	bne.n	800434a <HAL_RCC_ClockConfig+0xf6>
 80042d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042d8:	fa93 f3a3 	rbit	r3, r3
 80042dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e0:	fab3 f383 	clz	r3, r3
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d102      	bne.n	80042fa <HAL_RCC_ClockConfig+0xa6>
 80042f4:	4b6f      	ldr	r3, [pc, #444]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	e00f      	b.n	800431a <HAL_RCC_ClockConfig+0xc6>
 80042fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004302:	fa93 f3a3 	rbit	r3, r3
 8004306:	667b      	str	r3, [r7, #100]	; 0x64
 8004308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800430c:	663b      	str	r3, [r7, #96]	; 0x60
 800430e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004316:	4b67      	ldr	r3, [pc, #412]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800431e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004320:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004322:	fa92 f2a2 	rbit	r2, r2
 8004326:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004328:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800432a:	fab2 f282 	clz	r2, r2
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	f042 0220 	orr.w	r2, r2, #32
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	f002 021f 	and.w	r2, r2, #31
 800433a:	2101      	movs	r1, #1
 800433c:	fa01 f202 	lsl.w	r2, r1, r2
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d17b      	bne.n	800443e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e0f3      	b.n	8004532 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d13c      	bne.n	80043cc <HAL_RCC_ClockConfig+0x178>
 8004352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004356:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800435a:	fa93 f3a3 	rbit	r3, r3
 800435e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004362:	fab3 f383 	clz	r3, r3
 8004366:	b2db      	uxtb	r3, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d102      	bne.n	800437c <HAL_RCC_ClockConfig+0x128>
 8004376:	4b4f      	ldr	r3, [pc, #316]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	e00f      	b.n	800439c <HAL_RCC_ClockConfig+0x148>
 800437c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004380:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004384:	fa93 f3a3 	rbit	r3, r3
 8004388:	647b      	str	r3, [r7, #68]	; 0x44
 800438a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800438e:	643b      	str	r3, [r7, #64]	; 0x40
 8004390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004398:	4b46      	ldr	r3, [pc, #280]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80043a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043a4:	fa92 f2a2 	rbit	r2, r2
 80043a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80043aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ac:	fab2 f282 	clz	r2, r2
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	f042 0220 	orr.w	r2, r2, #32
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	f002 021f 	and.w	r2, r2, #31
 80043bc:	2101      	movs	r1, #1
 80043be:	fa01 f202 	lsl.w	r2, r1, r2
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d13a      	bne.n	800443e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0b2      	b.n	8004532 <HAL_RCC_ClockConfig+0x2de>
 80043cc:	2302      	movs	r3, #2
 80043ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d102      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x1a0>
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	e00d      	b.n	8004410 <HAL_RCC_ClockConfig+0x1bc>
 80043f4:	2302      	movs	r3, #2
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004400:	2302      	movs	r3, #2
 8004402:	623b      	str	r3, [r7, #32]
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	fa93 f3a3 	rbit	r3, r3
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2202      	movs	r2, #2
 8004412:	61ba      	str	r2, [r7, #24]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	fa92 f2a2 	rbit	r2, r2
 800441a:	617a      	str	r2, [r7, #20]
  return result;
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	fab2 f282 	clz	r2, r2
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	f042 0220 	orr.w	r2, r2, #32
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	f002 021f 	and.w	r2, r2, #31
 800442e:	2101      	movs	r1, #1
 8004430:	fa01 f202 	lsl.w	r2, r1, r2
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e079      	b.n	8004532 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800443e:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f023 0203 	bic.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	491a      	ldr	r1, [pc, #104]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004450:	f7fd f80a 	bl	8001468 <HAL_GetTick>
 8004454:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	e00a      	b.n	800446e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004458:	f7fd f806 	bl	8001468 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e061      	b.n	8004532 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 020c 	and.w	r2, r3, #12
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	429a      	cmp	r2, r3
 800447e:	d1eb      	bne.n	8004458 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_RCC_ClockConfig+0x25c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d214      	bcs.n	80044b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_RCC_ClockConfig+0x25c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 0207 	bic.w	r2, r3, #7
 8004496:	4906      	ldr	r1, [pc, #24]	; (80044b0 <HAL_RCC_ClockConfig+0x25c>)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	4313      	orrs	r3, r2
 800449c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <HAL_RCC_ClockConfig+0x25c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e040      	b.n	8004532 <HAL_RCC_ClockConfig+0x2de>
 80044b0:	40022000 	.word	0x40022000
 80044b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_RCC_ClockConfig+0x2e8>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	491a      	ldr	r1, [pc, #104]	; (800453c <HAL_RCC_ClockConfig+0x2e8>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <HAL_RCC_ClockConfig+0x2e8>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4912      	ldr	r1, [pc, #72]	; (800453c <HAL_RCC_ClockConfig+0x2e8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044f6:	f000 f829 	bl	800454c <HAL_RCC_GetSysClockFreq>
 80044fa:	4601      	mov	r1, r0
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <HAL_RCC_ClockConfig+0x2e8>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004504:	22f0      	movs	r2, #240	; 0xf0
 8004506:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	fa92 f2a2 	rbit	r2, r2
 800450e:	60fa      	str	r2, [r7, #12]
  return result;
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	fab2 f282 	clz	r2, r2
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	40d3      	lsrs	r3, r2
 800451a:	4a09      	ldr	r2, [pc, #36]	; (8004540 <HAL_RCC_ClockConfig+0x2ec>)
 800451c:	5cd3      	ldrb	r3, [r2, r3]
 800451e:	fa21 f303 	lsr.w	r3, r1, r3
 8004522:	4a08      	ldr	r2, [pc, #32]	; (8004544 <HAL_RCC_ClockConfig+0x2f0>)
 8004524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <HAL_RCC_ClockConfig+0x2f4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc ff58 	bl	80013e0 <HAL_InitTick>
  
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3778      	adds	r7, #120	; 0x78
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	08006a38 	.word	0x08006a38
 8004544:	20000000 	.word	0x20000000
 8004548:	20000004 	.word	0x20000004

0800454c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800454c:	b480      	push	{r7}
 800454e:	b08b      	sub	sp, #44	; 0x2c
 8004550:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	2300      	movs	r3, #0
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004566:	4b29      	ldr	r3, [pc, #164]	; (800460c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b04      	cmp	r3, #4
 8004574:	d002      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x30>
 8004576:	2b08      	cmp	r3, #8
 8004578:	d003      	beq.n	8004582 <HAL_RCC_GetSysClockFreq+0x36>
 800457a:	e03c      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800457c:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_RCC_GetSysClockFreq+0xc4>)
 800457e:	623b      	str	r3, [r7, #32]
      break;
 8004580:	e03c      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004588:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800458c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	fa92 f2a2 	rbit	r2, r2
 8004594:	607a      	str	r2, [r7, #4]
  return result;
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	fab2 f282 	clz	r2, r2
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	40d3      	lsrs	r3, r2
 80045a0:	4a1c      	ldr	r2, [pc, #112]	; (8004614 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045a6:	4b19      	ldr	r3, [pc, #100]	; (800460c <HAL_RCC_GetSysClockFreq+0xc0>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	220f      	movs	r2, #15
 80045b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	fa92 f2a2 	rbit	r2, r2
 80045b8:	60fa      	str	r2, [r7, #12]
  return result;
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	fab2 f282 	clz	r2, r2
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	40d3      	lsrs	r3, r2
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045c6:	5cd3      	ldrb	r3, [r2, r3]
 80045c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045d4:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
 80045e4:	e004      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4a0c      	ldr	r2, [pc, #48]	; (800461c <HAL_RCC_GetSysClockFreq+0xd0>)
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	623b      	str	r3, [r7, #32]
      break;
 80045f4:	e002      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045f8:	623b      	str	r3, [r7, #32]
      break;
 80045fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045fc:	6a3b      	ldr	r3, [r7, #32]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	372c      	adds	r7, #44	; 0x2c
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	007a1200 	.word	0x007a1200
 8004614:	08006a50 	.word	0x08006a50
 8004618:	08006a60 	.word	0x08006a60
 800461c:	003d0900 	.word	0x003d0900

08004620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004624:	4b03      	ldr	r3, [pc, #12]	; (8004634 <HAL_RCC_GetHCLKFreq+0x14>)
 8004626:	681b      	ldr	r3, [r3, #0]
}
 8004628:	4618      	mov	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000000 	.word	0x20000000

08004638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800463e:	f7ff ffef 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004642:	4601      	mov	r1, r0
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800464c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004650:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	fa92 f2a2 	rbit	r2, r2
 8004658:	603a      	str	r2, [r7, #0]
  return result;
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	fab2 f282 	clz	r2, r2
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	40d3      	lsrs	r3, r2
 8004664:	4a04      	ldr	r2, [pc, #16]	; (8004678 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	08006a48 	.word	0x08006a48

0800467c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004682:	f7ff ffcd 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004686:	4601      	mov	r1, r0
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004690:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004694:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	fa92 f2a2 	rbit	r2, r2
 800469c:	603a      	str	r2, [r7, #0]
  return result;
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	fab2 f282 	clz	r2, r2
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	40d3      	lsrs	r3, r2
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80046aa:	5cd3      	ldrb	r3, [r2, r3]
 80046ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000
 80046bc:	08006a48 	.word	0x08006a48

080046c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b092      	sub	sp, #72	; 0x48
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 80d4 	beq.w	800488c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e4:	4b4e      	ldr	r3, [pc, #312]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10e      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f0:	4b4b      	ldr	r3, [pc, #300]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4a4a      	ldr	r2, [pc, #296]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fa:	61d3      	str	r3, [r2, #28]
 80046fc:	4b48      	ldr	r3, [pc, #288]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470e:	4b45      	ldr	r3, [pc, #276]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d118      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800471a:	4b42      	ldr	r3, [pc, #264]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a41      	ldr	r2, [pc, #260]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004724:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004726:	f7fc fe9f 	bl	8001468 <HAL_GetTick>
 800472a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	e008      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472e:	f7fc fe9b 	bl	8001468 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b64      	cmp	r3, #100	; 0x64
 800473a:	d901      	bls.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e169      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	4b38      	ldr	r3, [pc, #224]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800474c:	4b34      	ldr	r3, [pc, #208]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004754:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8084 	beq.w	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004768:	429a      	cmp	r2, r3
 800476a:	d07c      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800476c:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	fa93 f3a3 	rbit	r3, r3
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	4b26      	ldr	r3, [pc, #152]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	461a      	mov	r2, r3
 8004796:	2301      	movs	r3, #1
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800479e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	461a      	mov	r2, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047be:	4a18      	ldr	r2, [pc, #96]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d04b      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ce:	f7fc fe4b 	bl	8001468 <HAL_GetTick>
 80047d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d4:	e00a      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d6:	f7fc fe47 	bl	8001468 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d901      	bls.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e113      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80047ec:	2302      	movs	r3, #2
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
 80047f8:	2302      	movs	r3, #2
 80047fa:	623b      	str	r3, [r7, #32]
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	61fb      	str	r3, [r7, #28]
  return result;
 8004804:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004806:	fab3 f383 	clz	r3, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d108      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800481a:	4b01      	ldr	r3, [pc, #4]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	e00d      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004820:	40021000 	.word	0x40021000
 8004824:	40007000 	.word	0x40007000
 8004828:	10908100 	.word	0x10908100
 800482c:	2302      	movs	r3, #2
 800482e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	fa93 f3a3 	rbit	r3, r3
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	4b78      	ldr	r3, [pc, #480]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	2202      	movs	r2, #2
 800483e:	613a      	str	r2, [r7, #16]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	fa92 f2a2 	rbit	r2, r2
 8004846:	60fa      	str	r2, [r7, #12]
  return result;
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	fab2 f282 	clz	r2, r2
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	f002 021f 	and.w	r2, r2, #31
 800485a:	2101      	movs	r1, #1
 800485c:	fa01 f202 	lsl.w	r2, r1, r2
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0b7      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004866:	4b6d      	ldr	r3, [pc, #436]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	496a      	ldr	r1, [pc, #424]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004874:	4313      	orrs	r3, r2
 8004876:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004878:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800487c:	2b01      	cmp	r3, #1
 800487e:	d105      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004880:	4b66      	ldr	r3, [pc, #408]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	4a65      	ldr	r2, [pc, #404]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004898:	4b60      	ldr	r3, [pc, #384]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	f023 0203 	bic.w	r2, r3, #3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	495d      	ldr	r1, [pc, #372]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b6:	4b59      	ldr	r3, [pc, #356]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	4956      	ldr	r1, [pc, #344]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048d4:	4b51      	ldr	r3, [pc, #324]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	494e      	ldr	r1, [pc, #312]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f2:	4b4a      	ldr	r3, [pc, #296]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f023 0210 	bic.w	r2, r3, #16
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	4947      	ldr	r1, [pc, #284]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004900:	4313      	orrs	r3, r2
 8004902:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004910:	4b42      	ldr	r3, [pc, #264]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	493f      	ldr	r1, [pc, #252]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800492e:	4b3b      	ldr	r3, [pc, #236]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f023 0220 	bic.w	r2, r3, #32
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	4938      	ldr	r1, [pc, #224]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800494c:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	4930      	ldr	r1, [pc, #192]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800495a:	4313      	orrs	r3, r2
 800495c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800496a:	4b2c      	ldr	r3, [pc, #176]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	4929      	ldr	r1, [pc, #164]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004988:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	4921      	ldr	r1, [pc, #132]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049a6:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	491a      	ldr	r1, [pc, #104]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049c4:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	4912      	ldr	r1, [pc, #72]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049e2:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	490b      	ldr	r1, [pc, #44]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3748      	adds	r7, #72	; 0x48
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40021000 	.word	0x40021000

08004a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e09d      	b.n	8004b6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a42:	d009      	beq.n	8004a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	61da      	str	r2, [r3, #28]
 8004a4a:	e005      	b.n	8004a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fc faec 	bl	8001050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a98:	d902      	bls.n	8004aa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	e002      	b.n	8004aa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004aae:	d007      	beq.n	8004ac0 <HAL_SPI_Init+0xa0>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	ea42 0103 	orr.w	r1, r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	0c1b      	lsrs	r3, r3, #16
 8004b1c:	f003 0204 	and.w	r2, r3, #4
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b3c:	ea42 0103 	orr.w	r1, r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e049      	b.n	8004c1c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d106      	bne.n	8004ba2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fc fa99 	bl	80010d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	f000 fb41 	bl	800523c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d001      	beq.n	8004c3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e042      	b.n	8004cc2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a21      	ldr	r2, [pc, #132]	; (8004cd0 <HAL_TIM_Base_Start+0xac>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d018      	beq.n	8004c80 <HAL_TIM_Base_Start+0x5c>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c56:	d013      	beq.n	8004c80 <HAL_TIM_Base_Start+0x5c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <HAL_TIM_Base_Start+0xb0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00e      	beq.n	8004c80 <HAL_TIM_Base_Start+0x5c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <HAL_TIM_Base_Start+0xb4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_TIM_Base_Start+0x5c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1a      	ldr	r2, [pc, #104]	; (8004cdc <HAL_TIM_Base_Start+0xb8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d004      	beq.n	8004c80 <HAL_TIM_Base_Start+0x5c>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <HAL_TIM_Base_Start+0xbc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d115      	bne.n	8004cac <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <HAL_TIM_Base_Start+0xc0>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b06      	cmp	r3, #6
 8004c90:	d015      	beq.n	8004cbe <HAL_TIM_Base_Start+0x9a>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c98:	d011      	beq.n	8004cbe <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004caa:	e008      	b.n	8004cbe <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	e000      	b.n	8004cc0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800
 8004cdc:	40013400 	.word	0x40013400
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	00010007 	.word	0x00010007

08004ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d001      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e04a      	b.n	8004d96 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a21      	ldr	r2, [pc, #132]	; (8004da4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d018      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x6c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d013      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x6c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00e      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x6c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_TIM_Base_Start_IT+0xc4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d009      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x6c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x6c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a19      	ldr	r2, [pc, #100]	; (8004db4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d115      	bne.n	8004d80 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b06      	cmp	r3, #6
 8004d64:	d015      	beq.n	8004d92 <HAL_TIM_Base_Start_IT+0xaa>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d011      	beq.n	8004d92 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7e:	e008      	b.n	8004d92 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e000      	b.n	8004d94 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800
 8004db0:	40013400 	.word	0x40013400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	00010007 	.word	0x00010007

08004dbc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a1a      	ldr	r2, [r3, #32]
 8004dda:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10f      	bne.n	8004e04 <HAL_TIM_Base_Stop_IT+0x48>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	f240 4344 	movw	r3, #1092	; 0x444
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d107      	bne.n	8004e04 <HAL_TIM_Base_Stop_IT+0x48>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d122      	bne.n	8004e76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d11b      	bne.n	8004e76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f06f 0202 	mvn.w	r2, #2
 8004e46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f9ce 	bl	80051fe <HAL_TIM_IC_CaptureCallback>
 8004e62:	e005      	b.n	8004e70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f9c0 	bl	80051ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f9d1 	bl	8005212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d122      	bne.n	8004eca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d11b      	bne.n	8004eca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f06f 0204 	mvn.w	r2, #4
 8004e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f9a4 	bl	80051fe <HAL_TIM_IC_CaptureCallback>
 8004eb6:	e005      	b.n	8004ec4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f996 	bl	80051ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f9a7 	bl	8005212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d122      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d11b      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f06f 0208 	mvn.w	r2, #8
 8004eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f97a 	bl	80051fe <HAL_TIM_IC_CaptureCallback>
 8004f0a:	e005      	b.n	8004f18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f96c 	bl	80051ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f97d 	bl	8005212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d122      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d11b      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f06f 0210 	mvn.w	r2, #16
 8004f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2208      	movs	r2, #8
 8004f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f950 	bl	80051fe <HAL_TIM_IC_CaptureCallback>
 8004f5e:	e005      	b.n	8004f6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f942 	bl	80051ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f953 	bl	8005212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d10e      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d107      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f06f 0201 	mvn.w	r2, #1
 8004f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7fb fc01 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa8:	2b80      	cmp	r3, #128	; 0x80
 8004faa:	d10e      	bne.n	8004fca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b80      	cmp	r3, #128	; 0x80
 8004fb8:	d107      	bne.n	8004fca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 faed 	bl	80055a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe4:	2b80      	cmp	r3, #128	; 0x80
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fae0 	bl	80055b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	d10e      	bne.n	8005024 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b40      	cmp	r3, #64	; 0x40
 8005012:	d107      	bne.n	8005024 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800501c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f901 	bl	8005226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b20      	cmp	r3, #32
 8005030:	d10e      	bne.n	8005050 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b20      	cmp	r3, #32
 800503e:	d107      	bne.n	8005050 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0220 	mvn.w	r2, #32
 8005048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 faa0 	bl	8005590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_TIM_ConfigClockSource+0x1c>
 8005070:	2302      	movs	r3, #2
 8005072:	e0b6      	b.n	80051e2 <HAL_TIM_ConfigClockSource+0x18a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005092:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800509e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b0:	d03e      	beq.n	8005130 <HAL_TIM_ConfigClockSource+0xd8>
 80050b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b6:	f200 8087 	bhi.w	80051c8 <HAL_TIM_ConfigClockSource+0x170>
 80050ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050be:	f000 8086 	beq.w	80051ce <HAL_TIM_ConfigClockSource+0x176>
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c6:	d87f      	bhi.n	80051c8 <HAL_TIM_ConfigClockSource+0x170>
 80050c8:	2b70      	cmp	r3, #112	; 0x70
 80050ca:	d01a      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0xaa>
 80050cc:	2b70      	cmp	r3, #112	; 0x70
 80050ce:	d87b      	bhi.n	80051c8 <HAL_TIM_ConfigClockSource+0x170>
 80050d0:	2b60      	cmp	r3, #96	; 0x60
 80050d2:	d050      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0x11e>
 80050d4:	2b60      	cmp	r3, #96	; 0x60
 80050d6:	d877      	bhi.n	80051c8 <HAL_TIM_ConfigClockSource+0x170>
 80050d8:	2b50      	cmp	r3, #80	; 0x50
 80050da:	d03c      	beq.n	8005156 <HAL_TIM_ConfigClockSource+0xfe>
 80050dc:	2b50      	cmp	r3, #80	; 0x50
 80050de:	d873      	bhi.n	80051c8 <HAL_TIM_ConfigClockSource+0x170>
 80050e0:	2b40      	cmp	r3, #64	; 0x40
 80050e2:	d058      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x13e>
 80050e4:	2b40      	cmp	r3, #64	; 0x40
 80050e6:	d86f      	bhi.n	80051c8 <HAL_TIM_ConfigClockSource+0x170>
 80050e8:	2b30      	cmp	r3, #48	; 0x30
 80050ea:	d064      	beq.n	80051b6 <HAL_TIM_ConfigClockSource+0x15e>
 80050ec:	2b30      	cmp	r3, #48	; 0x30
 80050ee:	d86b      	bhi.n	80051c8 <HAL_TIM_ConfigClockSource+0x170>
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d060      	beq.n	80051b6 <HAL_TIM_ConfigClockSource+0x15e>
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d867      	bhi.n	80051c8 <HAL_TIM_ConfigClockSource+0x170>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d05c      	beq.n	80051b6 <HAL_TIM_ConfigClockSource+0x15e>
 80050fc:	2b10      	cmp	r3, #16
 80050fe:	d05a      	beq.n	80051b6 <HAL_TIM_ConfigClockSource+0x15e>
 8005100:	e062      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6899      	ldr	r1, [r3, #8]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f000 f99d 	bl	8005450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005124:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	609a      	str	r2, [r3, #8]
      break;
 800512e:	e04f      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	6899      	ldr	r1, [r3, #8]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f000 f986 	bl	8005450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005152:	609a      	str	r2, [r3, #8]
      break;
 8005154:	e03c      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6859      	ldr	r1, [r3, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	461a      	mov	r2, r3
 8005164:	f000 f8fa 	bl	800535c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2150      	movs	r1, #80	; 0x50
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f953 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 8005174:	e02c      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	6859      	ldr	r1, [r3, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	461a      	mov	r2, r3
 8005184:	f000 f919 	bl	80053ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2160      	movs	r1, #96	; 0x60
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f943 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 8005194:	e01c      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6859      	ldr	r1, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	461a      	mov	r2, r3
 80051a4:	f000 f8da 	bl	800535c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2140      	movs	r1, #64	; 0x40
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f933 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 80051b4:	e00c      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4619      	mov	r1, r3
 80051c0:	4610      	mov	r0, r2
 80051c2:	f000 f92a 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 80051c6:	e003      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
      break;
 80051cc:	e000      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80051ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a3c      	ldr	r2, [pc, #240]	; (8005340 <TIM_Base_SetConfig+0x104>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00f      	beq.n	8005274 <TIM_Base_SetConfig+0x38>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525a:	d00b      	beq.n	8005274 <TIM_Base_SetConfig+0x38>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a39      	ldr	r2, [pc, #228]	; (8005344 <TIM_Base_SetConfig+0x108>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d007      	beq.n	8005274 <TIM_Base_SetConfig+0x38>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a38      	ldr	r2, [pc, #224]	; (8005348 <TIM_Base_SetConfig+0x10c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d003      	beq.n	8005274 <TIM_Base_SetConfig+0x38>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a37      	ldr	r2, [pc, #220]	; (800534c <TIM_Base_SetConfig+0x110>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d108      	bne.n	8005286 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a2d      	ldr	r2, [pc, #180]	; (8005340 <TIM_Base_SetConfig+0x104>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01b      	beq.n	80052c6 <TIM_Base_SetConfig+0x8a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005294:	d017      	beq.n	80052c6 <TIM_Base_SetConfig+0x8a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a2a      	ldr	r2, [pc, #168]	; (8005344 <TIM_Base_SetConfig+0x108>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d013      	beq.n	80052c6 <TIM_Base_SetConfig+0x8a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a29      	ldr	r2, [pc, #164]	; (8005348 <TIM_Base_SetConfig+0x10c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00f      	beq.n	80052c6 <TIM_Base_SetConfig+0x8a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a28      	ldr	r2, [pc, #160]	; (800534c <TIM_Base_SetConfig+0x110>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00b      	beq.n	80052c6 <TIM_Base_SetConfig+0x8a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a27      	ldr	r2, [pc, #156]	; (8005350 <TIM_Base_SetConfig+0x114>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d007      	beq.n	80052c6 <TIM_Base_SetConfig+0x8a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a26      	ldr	r2, [pc, #152]	; (8005354 <TIM_Base_SetConfig+0x118>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <TIM_Base_SetConfig+0x8a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a25      	ldr	r2, [pc, #148]	; (8005358 <TIM_Base_SetConfig+0x11c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d108      	bne.n	80052d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a10      	ldr	r2, [pc, #64]	; (8005340 <TIM_Base_SetConfig+0x104>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00f      	beq.n	8005324 <TIM_Base_SetConfig+0xe8>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a11      	ldr	r2, [pc, #68]	; (800534c <TIM_Base_SetConfig+0x110>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00b      	beq.n	8005324 <TIM_Base_SetConfig+0xe8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a10      	ldr	r2, [pc, #64]	; (8005350 <TIM_Base_SetConfig+0x114>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d007      	beq.n	8005324 <TIM_Base_SetConfig+0xe8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a0f      	ldr	r2, [pc, #60]	; (8005354 <TIM_Base_SetConfig+0x118>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_Base_SetConfig+0xe8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a0e      	ldr	r2, [pc, #56]	; (8005358 <TIM_Base_SetConfig+0x11c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d103      	bne.n	800532c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	615a      	str	r2, [r3, #20]
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40013400 	.word	0x40013400
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800

0800535c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f023 0201 	bic.w	r2, r3, #1
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f023 030a 	bic.w	r3, r3, #10
 8005398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b087      	sub	sp, #28
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f023 0210 	bic.w	r2, r3, #16
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	031b      	lsls	r3, r3, #12
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	621a      	str	r2, [r3, #32]
}
 800540e:	bf00      	nop
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	f043 0307 	orr.w	r3, r3, #7
 800543c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	609a      	str	r2, [r3, #8]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800546a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	021a      	lsls	r2, r3, #8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	431a      	orrs	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4313      	orrs	r3, r2
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	609a      	str	r2, [r3, #8]
}
 8005484:	bf00      	nop
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e063      	b.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a2b      	ldr	r2, [pc, #172]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d004      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1b      	ldr	r2, [pc, #108]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d018      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551a:	d013      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a18      	ldr	r2, [pc, #96]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00e      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a17      	ldr	r2, [pc, #92]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d009      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a12      	ldr	r2, [pc, #72]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a13      	ldr	r2, [pc, #76]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d10c      	bne.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800554a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40013400 	.word	0x40013400
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40014000 	.word	0x40014000

08005590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e040      	b.n	8005660 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fb fdc4 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2224      	movs	r2, #36	; 0x24
 80055f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fb78 	bl	8005d00 <UART_SetConfig>
 8005610:	4603      	mov	r3, r0
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e022      	b.n	8005660 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fd42 	bl	80060ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fdc9 	bl	80061f0 <UART_CheckIdleState>
 800565e:	4603      	mov	r3, r0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567a:	2b20      	cmp	r3, #32
 800567c:	d13d      	bne.n	80056fa <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <HAL_UART_Receive_IT+0x22>
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e036      	b.n	80056fc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_UART_Receive_IT+0x34>
 8005698:	2302      	movs	r3, #2
 800569a:	e02f      	b.n	80056fc <HAL_UART_Receive_IT+0x94>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d018      	beq.n	80056ea <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	613b      	str	r3, [r7, #16]
   return(result);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	69f9      	ldr	r1, [r7, #28]
 80056dc:	6a3a      	ldr	r2, [r7, #32]
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e6      	bne.n	80056b8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	461a      	mov	r2, r3
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fe8b 	bl	800640c <UART_Start_Receive_IT>
 80056f6:	4603      	mov	r3, r0
 80056f8:	e000      	b.n	80056fc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
  }
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3728      	adds	r7, #40	; 0x28
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b0ba      	sub	sp, #232	; 0xe8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800572a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800572e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005732:	4013      	ands	r3, r2
 8005734:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800573c:	2b00      	cmp	r3, #0
 800573e:	d115      	bne.n	800576c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00f      	beq.n	800576c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800574c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d009      	beq.n	800576c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 82a3 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	4798      	blx	r3
      }
      return;
 800576a:	e29d      	b.n	8005ca8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800576c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8117 	beq.w	80059a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005782:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005786:	4b85      	ldr	r3, [pc, #532]	; (800599c <HAL_UART_IRQHandler+0x298>)
 8005788:	4013      	ands	r3, r2
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 810a 	beq.w	80059a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d011      	beq.n	80057c0 <HAL_UART_IRQHandler+0xbc>
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00b      	beq.n	80057c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2201      	movs	r2, #1
 80057ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b6:	f043 0201 	orr.w	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d011      	beq.n	80057f0 <HAL_UART_IRQHandler+0xec>
 80057cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00b      	beq.n	80057f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2202      	movs	r2, #2
 80057de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e6:	f043 0204 	orr.w	r2, r3, #4
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d011      	beq.n	8005820 <HAL_UART_IRQHandler+0x11c>
 80057fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00b      	beq.n	8005820 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2204      	movs	r2, #4
 800580e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005816:	f043 0202 	orr.w	r2, r3, #2
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d017      	beq.n	800585c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d105      	bne.n	8005844 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800583c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2208      	movs	r2, #8
 800584a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005852:	f043 0208 	orr.w	r2, r3, #8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800585c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005864:	2b00      	cmp	r3, #0
 8005866:	d012      	beq.n	800588e <HAL_UART_IRQHandler+0x18a>
 8005868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800586c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00c      	beq.n	800588e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800587c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005884:	f043 0220 	orr.w	r2, r3, #32
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8209 	beq.w	8005cac <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00d      	beq.n	80058c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	d005      	beq.n	80058e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d04f      	beq.n	8005986 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fe28 	bl	800653c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d141      	bne.n	800597e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3308      	adds	r3, #8
 8005900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3308      	adds	r3, #8
 8005922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005926:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800592a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800593e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1d9      	bne.n	80058fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594a:	2b00      	cmp	r3, #0
 800594c:	d013      	beq.n	8005976 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <HAL_UART_IRQHandler+0x29c>)
 8005954:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	4618      	mov	r0, r3
 800595c:	f7fd f81e 	bl	800299c <HAL_DMA_Abort_IT>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d017      	beq.n	8005996 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005970:	4610      	mov	r0, r2
 8005972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	e00f      	b.n	8005996 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f9ac 	bl	8005cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	e00b      	b.n	8005996 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f9a8 	bl	8005cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	e007      	b.n	8005996 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f9a4 	bl	8005cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005994:	e18a      	b.n	8005cac <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005996:	bf00      	nop
    return;
 8005998:	e188      	b.n	8005cac <HAL_UART_IRQHandler+0x5a8>
 800599a:	bf00      	nop
 800599c:	04000120 	.word	0x04000120
 80059a0:	08006603 	.word	0x08006603

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	f040 8143 	bne.w	8005c34 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 813c 	beq.w	8005c34 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8135 	beq.w	8005c34 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2210      	movs	r2, #16
 80059d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	f040 80b1 	bne.w	8005b44 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 815c 	beq.w	8005cb0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a02:	429a      	cmp	r2, r3
 8005a04:	f080 8154 	bcs.w	8005cb0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	f000 8085 	beq.w	8005b28 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a4c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1da      	bne.n	8005a1e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e1      	bne.n	8005a68 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ac8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005aca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ace:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e3      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af8:	f023 0310 	bic.w	r3, r3, #16
 8005afc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e4      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fc ff01 	bl	800292a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f8d3 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b42:	e0b5      	b.n	8005cb0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 80a7 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005b66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 80a2 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b92:	647b      	str	r3, [r7, #68]	; 0x44
 8005b94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e4      	bne.n	8005b70 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3308      	adds	r3, #8
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bca:	633a      	str	r2, [r7, #48]	; 0x30
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e3      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f023 0310 	bic.w	r3, r3, #16
 8005c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	69b9      	ldr	r1, [r7, #24]
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e4      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f85b 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c32:	e03f      	b.n	8005cb4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00e      	beq.n	8005c5e <HAL_UART_IRQHandler+0x55a>
 8005c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fe6f 	bl	800693a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c5c:	e02d      	b.n	8005cba <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00e      	beq.n	8005c88 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d008      	beq.n	8005c88 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01c      	beq.n	8005cb8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
    }
    return;
 8005c86:	e017      	b.n	8005cb8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d012      	beq.n	8005cba <HAL_UART_IRQHandler+0x5b6>
 8005c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00c      	beq.n	8005cba <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fcc4 	bl	800662e <UART_EndTransmit_IT>
    return;
 8005ca6:	e008      	b.n	8005cba <HAL_UART_IRQHandler+0x5b6>
      return;
 8005ca8:	bf00      	nop
 8005caa:	e006      	b.n	8005cba <HAL_UART_IRQHandler+0x5b6>
    return;
 8005cac:	bf00      	nop
 8005cae:	e004      	b.n	8005cba <HAL_UART_IRQHandler+0x5b6>
      return;
 8005cb0:	bf00      	nop
 8005cb2:	e002      	b.n	8005cba <HAL_UART_IRQHandler+0x5b6>
      return;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <HAL_UART_IRQHandler+0x5b6>
    return;
 8005cb8:	bf00      	nop
  }

}
 8005cba:	37e8      	adds	r7, #232	; 0xe8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d2e:	f023 030c 	bic.w	r3, r3, #12
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	6979      	ldr	r1, [r7, #20]
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4aa8      	ldr	r2, [pc, #672]	; (800601c <UART_SetConfig+0x31c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d120      	bne.n	8005dc2 <UART_SetConfig+0xc2>
 8005d80:	4ba7      	ldr	r3, [pc, #668]	; (8006020 <UART_SetConfig+0x320>)
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	f003 0303 	and.w	r3, r3, #3
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d817      	bhi.n	8005dbc <UART_SetConfig+0xbc>
 8005d8c:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <UART_SetConfig+0x94>)
 8005d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	08005da5 	.word	0x08005da5
 8005d98:	08005db1 	.word	0x08005db1
 8005d9c:	08005db7 	.word	0x08005db7
 8005da0:	08005dab 	.word	0x08005dab
 8005da4:	2301      	movs	r3, #1
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e0b5      	b.n	8005f16 <UART_SetConfig+0x216>
 8005daa:	2302      	movs	r3, #2
 8005dac:	77fb      	strb	r3, [r7, #31]
 8005dae:	e0b2      	b.n	8005f16 <UART_SetConfig+0x216>
 8005db0:	2304      	movs	r3, #4
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e0af      	b.n	8005f16 <UART_SetConfig+0x216>
 8005db6:	2308      	movs	r3, #8
 8005db8:	77fb      	strb	r3, [r7, #31]
 8005dba:	e0ac      	b.n	8005f16 <UART_SetConfig+0x216>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e0a9      	b.n	8005f16 <UART_SetConfig+0x216>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a97      	ldr	r2, [pc, #604]	; (8006024 <UART_SetConfig+0x324>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d124      	bne.n	8005e16 <UART_SetConfig+0x116>
 8005dcc:	4b94      	ldr	r3, [pc, #592]	; (8006020 <UART_SetConfig+0x320>)
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dd8:	d011      	beq.n	8005dfe <UART_SetConfig+0xfe>
 8005dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dde:	d817      	bhi.n	8005e10 <UART_SetConfig+0x110>
 8005de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005de4:	d011      	beq.n	8005e0a <UART_SetConfig+0x10a>
 8005de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dea:	d811      	bhi.n	8005e10 <UART_SetConfig+0x110>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <UART_SetConfig+0xf8>
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df4:	d006      	beq.n	8005e04 <UART_SetConfig+0x104>
 8005df6:	e00b      	b.n	8005e10 <UART_SetConfig+0x110>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e08b      	b.n	8005f16 <UART_SetConfig+0x216>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e088      	b.n	8005f16 <UART_SetConfig+0x216>
 8005e04:	2304      	movs	r3, #4
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e085      	b.n	8005f16 <UART_SetConfig+0x216>
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	77fb      	strb	r3, [r7, #31]
 8005e0e:	e082      	b.n	8005f16 <UART_SetConfig+0x216>
 8005e10:	2310      	movs	r3, #16
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e07f      	b.n	8005f16 <UART_SetConfig+0x216>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a83      	ldr	r2, [pc, #524]	; (8006028 <UART_SetConfig+0x328>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d124      	bne.n	8005e6a <UART_SetConfig+0x16a>
 8005e20:	4b7f      	ldr	r3, [pc, #508]	; (8006020 <UART_SetConfig+0x320>)
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e2c:	d011      	beq.n	8005e52 <UART_SetConfig+0x152>
 8005e2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e32:	d817      	bhi.n	8005e64 <UART_SetConfig+0x164>
 8005e34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e38:	d011      	beq.n	8005e5e <UART_SetConfig+0x15e>
 8005e3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e3e:	d811      	bhi.n	8005e64 <UART_SetConfig+0x164>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <UART_SetConfig+0x14c>
 8005e44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e48:	d006      	beq.n	8005e58 <UART_SetConfig+0x158>
 8005e4a:	e00b      	b.n	8005e64 <UART_SetConfig+0x164>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e061      	b.n	8005f16 <UART_SetConfig+0x216>
 8005e52:	2302      	movs	r3, #2
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e05e      	b.n	8005f16 <UART_SetConfig+0x216>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e05b      	b.n	8005f16 <UART_SetConfig+0x216>
 8005e5e:	2308      	movs	r3, #8
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e058      	b.n	8005f16 <UART_SetConfig+0x216>
 8005e64:	2310      	movs	r3, #16
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e055      	b.n	8005f16 <UART_SetConfig+0x216>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a6f      	ldr	r2, [pc, #444]	; (800602c <UART_SetConfig+0x32c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d124      	bne.n	8005ebe <UART_SetConfig+0x1be>
 8005e74:	4b6a      	ldr	r3, [pc, #424]	; (8006020 <UART_SetConfig+0x320>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e80:	d011      	beq.n	8005ea6 <UART_SetConfig+0x1a6>
 8005e82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e86:	d817      	bhi.n	8005eb8 <UART_SetConfig+0x1b8>
 8005e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e8c:	d011      	beq.n	8005eb2 <UART_SetConfig+0x1b2>
 8005e8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e92:	d811      	bhi.n	8005eb8 <UART_SetConfig+0x1b8>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <UART_SetConfig+0x1a0>
 8005e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e9c:	d006      	beq.n	8005eac <UART_SetConfig+0x1ac>
 8005e9e:	e00b      	b.n	8005eb8 <UART_SetConfig+0x1b8>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	77fb      	strb	r3, [r7, #31]
 8005ea4:	e037      	b.n	8005f16 <UART_SetConfig+0x216>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	77fb      	strb	r3, [r7, #31]
 8005eaa:	e034      	b.n	8005f16 <UART_SetConfig+0x216>
 8005eac:	2304      	movs	r3, #4
 8005eae:	77fb      	strb	r3, [r7, #31]
 8005eb0:	e031      	b.n	8005f16 <UART_SetConfig+0x216>
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	77fb      	strb	r3, [r7, #31]
 8005eb6:	e02e      	b.n	8005f16 <UART_SetConfig+0x216>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e02b      	b.n	8005f16 <UART_SetConfig+0x216>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a5b      	ldr	r2, [pc, #364]	; (8006030 <UART_SetConfig+0x330>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d124      	bne.n	8005f12 <UART_SetConfig+0x212>
 8005ec8:	4b55      	ldr	r3, [pc, #340]	; (8006020 <UART_SetConfig+0x320>)
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005ed0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ed4:	d011      	beq.n	8005efa <UART_SetConfig+0x1fa>
 8005ed6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005eda:	d817      	bhi.n	8005f0c <UART_SetConfig+0x20c>
 8005edc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ee0:	d011      	beq.n	8005f06 <UART_SetConfig+0x206>
 8005ee2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ee6:	d811      	bhi.n	8005f0c <UART_SetConfig+0x20c>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <UART_SetConfig+0x1f4>
 8005eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef0:	d006      	beq.n	8005f00 <UART_SetConfig+0x200>
 8005ef2:	e00b      	b.n	8005f0c <UART_SetConfig+0x20c>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e00d      	b.n	8005f16 <UART_SetConfig+0x216>
 8005efa:	2302      	movs	r3, #2
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e00a      	b.n	8005f16 <UART_SetConfig+0x216>
 8005f00:	2304      	movs	r3, #4
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e007      	b.n	8005f16 <UART_SetConfig+0x216>
 8005f06:	2308      	movs	r3, #8
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e004      	b.n	8005f16 <UART_SetConfig+0x216>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e001      	b.n	8005f16 <UART_SetConfig+0x216>
 8005f12:	2310      	movs	r3, #16
 8005f14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1e:	d15c      	bne.n	8005fda <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8005f20:	7ffb      	ldrb	r3, [r7, #31]
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d827      	bhi.n	8005f76 <UART_SetConfig+0x276>
 8005f26:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <UART_SetConfig+0x22c>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f59 	.word	0x08005f59
 8005f34:	08005f61 	.word	0x08005f61
 8005f38:	08005f77 	.word	0x08005f77
 8005f3c:	08005f67 	.word	0x08005f67
 8005f40:	08005f77 	.word	0x08005f77
 8005f44:	08005f77 	.word	0x08005f77
 8005f48:	08005f77 	.word	0x08005f77
 8005f4c:	08005f6f 	.word	0x08005f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7fe fb72 	bl	8004638 <HAL_RCC_GetPCLK1Freq>
 8005f54:	61b8      	str	r0, [r7, #24]
        break;
 8005f56:	e013      	b.n	8005f80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f58:	f7fe fb90 	bl	800467c <HAL_RCC_GetPCLK2Freq>
 8005f5c:	61b8      	str	r0, [r7, #24]
        break;
 8005f5e:	e00f      	b.n	8005f80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f60:	4b34      	ldr	r3, [pc, #208]	; (8006034 <UART_SetConfig+0x334>)
 8005f62:	61bb      	str	r3, [r7, #24]
        break;
 8005f64:	e00c      	b.n	8005f80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f66:	f7fe faf1 	bl	800454c <HAL_RCC_GetSysClockFreq>
 8005f6a:	61b8      	str	r0, [r7, #24]
        break;
 8005f6c:	e008      	b.n	8005f80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f72:	61bb      	str	r3, [r7, #24]
        break;
 8005f74:	e004      	b.n	8005f80 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8005f7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 8084 	beq.w	8006090 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	005a      	lsls	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	441a      	add	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b0f      	cmp	r3, #15
 8005fa4:	d916      	bls.n	8005fd4 <UART_SetConfig+0x2d4>
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fac:	d212      	bcs.n	8005fd4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f023 030f 	bic.w	r3, r3, #15
 8005fb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	89fb      	ldrh	r3, [r7, #14]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	89fa      	ldrh	r2, [r7, #14]
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	e05d      	b.n	8006090 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	77bb      	strb	r3, [r7, #30]
 8005fd8:	e05a      	b.n	8006090 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fda:	7ffb      	ldrb	r3, [r7, #31]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d836      	bhi.n	800604e <UART_SetConfig+0x34e>
 8005fe0:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <UART_SetConfig+0x2e8>)
 8005fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe6:	bf00      	nop
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006015 	.word	0x08006015
 8005ff0:	08006039 	.word	0x08006039
 8005ff4:	0800604f 	.word	0x0800604f
 8005ff8:	0800603f 	.word	0x0800603f
 8005ffc:	0800604f 	.word	0x0800604f
 8006000:	0800604f 	.word	0x0800604f
 8006004:	0800604f 	.word	0x0800604f
 8006008:	08006047 	.word	0x08006047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800600c:	f7fe fb14 	bl	8004638 <HAL_RCC_GetPCLK1Freq>
 8006010:	61b8      	str	r0, [r7, #24]
        break;
 8006012:	e021      	b.n	8006058 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fe fb32 	bl	800467c <HAL_RCC_GetPCLK2Freq>
 8006018:	61b8      	str	r0, [r7, #24]
        break;
 800601a:	e01d      	b.n	8006058 <UART_SetConfig+0x358>
 800601c:	40013800 	.word	0x40013800
 8006020:	40021000 	.word	0x40021000
 8006024:	40004400 	.word	0x40004400
 8006028:	40004800 	.word	0x40004800
 800602c:	40004c00 	.word	0x40004c00
 8006030:	40005000 	.word	0x40005000
 8006034:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006038:	4b1b      	ldr	r3, [pc, #108]	; (80060a8 <UART_SetConfig+0x3a8>)
 800603a:	61bb      	str	r3, [r7, #24]
        break;
 800603c:	e00c      	b.n	8006058 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603e:	f7fe fa85 	bl	800454c <HAL_RCC_GetSysClockFreq>
 8006042:	61b8      	str	r0, [r7, #24]
        break;
 8006044:	e008      	b.n	8006058 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800604a:	61bb      	str	r3, [r7, #24]
        break;
 800604c:	e004      	b.n	8006058 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	77bb      	strb	r3, [r7, #30]
        break;
 8006056:	bf00      	nop
    }

    if (pclk != 0U)
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d018      	beq.n	8006090 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	085a      	lsrs	r2, r3, #1
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	441a      	add	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	b29b      	uxth	r3, r3
 8006072:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b0f      	cmp	r3, #15
 8006078:	d908      	bls.n	800608c <UART_SetConfig+0x38c>
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d204      	bcs.n	800608c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	60da      	str	r2, [r3, #12]
 800608a:	e001      	b.n	8006090 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800609c:	7fbb      	ldrb	r3, [r7, #30]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3720      	adds	r7, #32
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	007a1200 	.word	0x007a1200

080060ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01a      	beq.n	80061c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061aa:	d10a      	bne.n	80061c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	605a      	str	r2, [r3, #4]
  }
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006200:	f7fb f932 	bl	8001468 <HAL_GetTick>
 8006204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b08      	cmp	r3, #8
 8006212:	d10e      	bne.n	8006232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f82d 	bl	8006282 <UART_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e023      	b.n	800627a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b04      	cmp	r3, #4
 800623e:	d10e      	bne.n	800625e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f817 	bl	8006282 <UART_WaitOnFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e00d      	b.n	800627a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b09c      	sub	sp, #112	; 0x70
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	603b      	str	r3, [r7, #0]
 800628e:	4613      	mov	r3, r2
 8006290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006292:	e0a5      	b.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629a:	f000 80a1 	beq.w	80063e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800629e:	f7fb f8e3 	bl	8001468 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d302      	bcc.n	80062b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80062ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d13e      	bne.n	8006332 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062c8:	667b      	str	r3, [r7, #100]	; 0x64
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e6      	bne.n	80062b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	f023 0301 	bic.w	r3, r3, #1
 80062fc:	663b      	str	r3, [r7, #96]	; 0x60
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3308      	adds	r3, #8
 8006304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006306:	64ba      	str	r2, [r7, #72]	; 0x48
 8006308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800630c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e5      	bne.n	80062e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e067      	b.n	8006402 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d04f      	beq.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800634a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634e:	d147      	bne.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006358:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800636e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
 800637a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800637e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e6      	bne.n	800635a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	613b      	str	r3, [r7, #16]
   return(result);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f023 0301 	bic.w	r3, r3, #1
 80063a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3308      	adds	r3, #8
 80063aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063ac:	623a      	str	r2, [r7, #32]
 80063ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	69f9      	ldr	r1, [r7, #28]
 80063b2:	6a3a      	ldr	r2, [r7, #32]
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e5      	bne.n	800638c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2220      	movs	r2, #32
 80063ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e010      	b.n	8006402 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69da      	ldr	r2, [r3, #28]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	4013      	ands	r3, r2
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	bf0c      	ite	eq
 80063f0:	2301      	moveq	r3, #1
 80063f2:	2300      	movne	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	461a      	mov	r2, r3
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	f43f af4a 	beq.w	8006294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3770      	adds	r7, #112	; 0x70
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800640c:	b480      	push	{r7}
 800640e:	b091      	sub	sp, #68	; 0x44
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	88fa      	ldrh	r2, [r7, #6]
 8006424:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643e:	d10e      	bne.n	800645e <UART_Start_Receive_IT+0x52>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <UART_Start_Receive_IT+0x48>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800644e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006452:	e01a      	b.n	800648a <UART_Start_Receive_IT+0x7e>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	22ff      	movs	r2, #255	; 0xff
 8006458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800645c:	e015      	b.n	800648a <UART_Start_Receive_IT+0x7e>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10d      	bne.n	8006482 <UART_Start_Receive_IT+0x76>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <UART_Start_Receive_IT+0x6c>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	22ff      	movs	r2, #255	; 0xff
 8006472:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006476:	e008      	b.n	800648a <UART_Start_Receive_IT+0x7e>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	227f      	movs	r2, #127	; 0x7f
 800647c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006480:	e003      	b.n	800648a <UART_Start_Receive_IT+0x7e>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2222      	movs	r2, #34	; 0x22
 8006496:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3308      	adds	r3, #8
 800649e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	f043 0301 	orr.w	r3, r3, #1
 80064ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3308      	adds	r3, #8
 80064b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064b8:	637a      	str	r2, [r7, #52]	; 0x34
 80064ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e5      	bne.n	8006498 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d4:	d107      	bne.n	80064e6 <UART_Start_Receive_IT+0xda>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d103      	bne.n	80064e6 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a14      	ldr	r2, [pc, #80]	; (8006534 <UART_Start_Receive_IT+0x128>)
 80064e2:	665a      	str	r2, [r3, #100]	; 0x64
 80064e4:	e002      	b.n	80064ec <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a13      	ldr	r2, [pc, #76]	; (8006538 <UART_Start_Receive_IT+0x12c>)
 80064ea:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	613b      	str	r3, [r7, #16]
   return(result);
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006508:	63bb      	str	r3, [r7, #56]	; 0x38
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006512:	623b      	str	r3, [r7, #32]
 8006514:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	69f9      	ldr	r1, [r7, #28]
 8006518:	6a3a      	ldr	r2, [r7, #32]
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e6      	bne.n	80064f4 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3744      	adds	r7, #68	; 0x44
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	080067df 	.word	0x080067df
 8006538:	08006683 	.word	0x08006683

0800653c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b095      	sub	sp, #84	; 0x54
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006562:	643b      	str	r3, [r7, #64]	; 0x40
 8006564:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006568:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e6      	bne.n	8006544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	61fb      	str	r3, [r7, #28]
   return(result);
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	64bb      	str	r3, [r7, #72]	; 0x48
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3308      	adds	r3, #8
 8006594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006598:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800659c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e5      	bne.n	8006576 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d118      	bne.n	80065e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	60bb      	str	r3, [r7, #8]
   return(result);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f023 0310 	bic.w	r3, r3, #16
 80065c6:	647b      	str	r3, [r7, #68]	; 0x44
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6979      	ldr	r1, [r7, #20]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	613b      	str	r3, [r7, #16]
   return(result);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e6      	bne.n	80065b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80065f6:	bf00      	nop
 80065f8:	3754      	adds	r7, #84	; 0x54
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7ff fb57 	bl	8005cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b088      	sub	sp, #32
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	60bb      	str	r3, [r7, #8]
   return(result);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664a:	61fb      	str	r3, [r7, #28]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6979      	ldr	r1, [r7, #20]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	613b      	str	r3, [r7, #16]
   return(result);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e6      	bne.n	8006636 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2220      	movs	r2, #32
 800666c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff fb23 	bl	8005cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800667a:	bf00      	nop
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b096      	sub	sp, #88	; 0x58
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006690:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006698:	2b22      	cmp	r3, #34	; 0x22
 800669a:	f040 8094 	bne.w	80067c6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80066a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80066ac:	b2d9      	uxtb	r1, r3
 80066ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b8:	400a      	ands	r2, r1
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d177      	bne.n	80067d6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066fa:	653b      	str	r3, [r7, #80]	; 0x50
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006704:	647b      	str	r3, [r7, #68]	; 0x44
 8006706:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800670a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e6      	bne.n	80066e6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	623b      	str	r3, [r7, #32]
   return(result);
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	f023 0301 	bic.w	r3, r3, #1
 800672e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006738:	633a      	str	r2, [r7, #48]	; 0x30
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800673e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e5      	bne.n	8006718 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2220      	movs	r2, #32
 8006750:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675c:	2b01      	cmp	r3, #1
 800675e:	d12e      	bne.n	80067be <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	60fb      	str	r3, [r7, #12]
   return(result);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0310 	bic.w	r3, r3, #16
 800677a:	64bb      	str	r3, [r7, #72]	; 0x48
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	69b9      	ldr	r1, [r7, #24]
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	617b      	str	r3, [r7, #20]
   return(result);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e6      	bne.n	8006766 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d103      	bne.n	80067ae <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2210      	movs	r2, #16
 80067ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff fa96 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067bc:	e00b      	b.n	80067d6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7f9 ffca 	bl	8000758 <HAL_UART_RxCpltCallback>
}
 80067c4:	e007      	b.n	80067d6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0208 	orr.w	r2, r2, #8
 80067d4:	619a      	str	r2, [r3, #24]
}
 80067d6:	bf00      	nop
 80067d8:	3758      	adds	r7, #88	; 0x58
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b096      	sub	sp, #88	; 0x58
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067f4:	2b22      	cmp	r3, #34	; 0x22
 80067f6:	f040 8094 	bne.w	8006922 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006800:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006808:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800680a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800680e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006812:	4013      	ands	r3, r2
 8006814:	b29a      	uxth	r2, r3
 8006816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006818:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681e:	1c9a      	adds	r2, r3, #2
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d177      	bne.n	8006932 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	643b      	str	r3, [r7, #64]	; 0x40
 8006862:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006866:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e6      	bne.n	8006842 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3308      	adds	r3, #8
 800687a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	61fb      	str	r3, [r7, #28]
   return(result);
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f023 0301 	bic.w	r3, r3, #1
 800688a:	64bb      	str	r3, [r7, #72]	; 0x48
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3308      	adds	r3, #8
 8006892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006894:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800689a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e5      	bne.n	8006874 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d12e      	bne.n	800691a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f023 0310 	bic.w	r3, r3, #16
 80068d6:	647b      	str	r3, [r7, #68]	; 0x44
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6979      	ldr	r1, [r7, #20]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	613b      	str	r3, [r7, #16]
   return(result);
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e6      	bne.n	80068c2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f003 0310 	and.w	r3, r3, #16
 80068fe:	2b10      	cmp	r3, #16
 8006900:	d103      	bne.n	800690a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2210      	movs	r2, #16
 8006908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff f9e8 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006918:	e00b      	b.n	8006932 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7f9 ff1c 	bl	8000758 <HAL_UART_RxCpltCallback>
}
 8006920:	e007      	b.n	8006932 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699a      	ldr	r2, [r3, #24]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0208 	orr.w	r2, r2, #8
 8006930:	619a      	str	r2, [r3, #24]
}
 8006932:	bf00      	nop
 8006934:	3758      	adds	r7, #88	; 0x58
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800694e:	b480      	push	{r7}
 8006950:	b085      	sub	sp, #20
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006956:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800695a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	b29b      	uxth	r3, r3
 8006968:	43db      	mvns	r3, r3
 800696a:	b29b      	uxth	r3, r3
 800696c:	4013      	ands	r3, r2
 800696e:	b29a      	uxth	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006984:	b084      	sub	sp, #16
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	f107 0014 	add.w	r0, r7, #20
 8006992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	b004      	add	sp, #16
 80069c4:	4770      	bx	lr
	...

080069c8 <__libc_init_array>:
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	4d0d      	ldr	r5, [pc, #52]	; (8006a00 <__libc_init_array+0x38>)
 80069cc:	4c0d      	ldr	r4, [pc, #52]	; (8006a04 <__libc_init_array+0x3c>)
 80069ce:	1b64      	subs	r4, r4, r5
 80069d0:	10a4      	asrs	r4, r4, #2
 80069d2:	2600      	movs	r6, #0
 80069d4:	42a6      	cmp	r6, r4
 80069d6:	d109      	bne.n	80069ec <__libc_init_array+0x24>
 80069d8:	4d0b      	ldr	r5, [pc, #44]	; (8006a08 <__libc_init_array+0x40>)
 80069da:	4c0c      	ldr	r4, [pc, #48]	; (8006a0c <__libc_init_array+0x44>)
 80069dc:	f000 f820 	bl	8006a20 <_init>
 80069e0:	1b64      	subs	r4, r4, r5
 80069e2:	10a4      	asrs	r4, r4, #2
 80069e4:	2600      	movs	r6, #0
 80069e6:	42a6      	cmp	r6, r4
 80069e8:	d105      	bne.n	80069f6 <__libc_init_array+0x2e>
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
 80069ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f0:	4798      	blx	r3
 80069f2:	3601      	adds	r6, #1
 80069f4:	e7ee      	b.n	80069d4 <__libc_init_array+0xc>
 80069f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fa:	4798      	blx	r3
 80069fc:	3601      	adds	r6, #1
 80069fe:	e7f2      	b.n	80069e6 <__libc_init_array+0x1e>
 8006a00:	08006a70 	.word	0x08006a70
 8006a04:	08006a70 	.word	0x08006a70
 8006a08:	08006a70 	.word	0x08006a70
 8006a0c:	08006a74 	.word	0x08006a74

08006a10 <memset>:
 8006a10:	4402      	add	r2, r0
 8006a12:	4603      	mov	r3, r0
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d100      	bne.n	8006a1a <memset+0xa>
 8006a18:	4770      	bx	lr
 8006a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a1e:	e7f9      	b.n	8006a14 <memset+0x4>

08006a20 <_init>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	bf00      	nop
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr

08006a2c <_fini>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	bf00      	nop
 8006a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a32:	bc08      	pop	{r3}
 8006a34:	469e      	mov	lr, r3
 8006a36:	4770      	bx	lr
